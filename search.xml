<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ Primer文本查询程序</title>
    <url>/2022/02/07/C++%E6%96%87%E6%9C%AC%E6%9F%A5%E8%AF%A2%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>​        此为C++ Primer中第十二章中的一个文本查询程序，我想通过自己的分析来很假透彻的理解整个程序的设计，于是将此节单独作为一章重点去看：</p>
<h1 id="文本查询程序"><a href="#文本查询程序" class="headerlink" title="文本查询程序"></a>文本查询程序</h1><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul>
<li>当程序读取输入文件时，它必须记住单词出现的每一行。因此，程序需要逐行读取输入文件，并将每一行分解为独立的单词</li>
<li>当程序生成输出时，<ul>
<li>它必须能提取每个单词所关联的行号</li>
<li>行号必须按升序出现且无重复</li>
<li>它必须能打印给定行号中的文本。</li>
</ul>
</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>当输入element时，得到的是：</p>
<p><img src="https://s2.loli.net/2022/02/07/7ANskrKFnG3qV1o.png" alt="image.png"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>​        首先看这里我认为最重要一个对应关系，单词→行号。每一个单词都有n行与之对应，那么容易想到的方法是用容器将每个单词的行号记录下来，由于每个行号只出现一次且需要升序排列，所以最优解就是使用set容器，接着如何实现通过行号找到那一行文字呢？我们可以想到使用<code>vector&lt;string&gt;</code>按行号保存文本。此外使用一个map可以将单词与它对应的set容器绑定起来，就可以实现，单词对应行号，行号对应文本。</p>
<p>​        还有一个问题是：如何建立起这个map和set，我们定义一个函数，命名为istringstream，思路大致是从vector<string>读取每个元素（每行文本），访问每个单词前首先判断map中没有这个单词，如果有：就将对应的set中加入这一次遍历的下标（即行号），如果没有：就创建一个set，并将单词与set加入map中。</p>
<h3 id="大致的类"><a href="#大致的类" class="headerlink" title="大致的类"></a>大致的类</h3><p>​        我们需要将这些结构与操作串联起来，从定义一个保存输入文件的类开始，将类命名为TextQuery，它包含一个vector和一个map。我们用这个类来构造vector和map，并且执行查询操作。</p>
<p>​        之后如果我们查到了到底要返回什么呢，返回那么一大串的东西最好的方法就是定义另一个类，这个类内应该有一个打印操作。我们将它命名为QueryResult。</p>
<h3 id="类之间的数据共享"><a href="#类之间的数据共享" class="headerlink" title="类之间的数据共享"></a>类之间的数据共享</h3><p>​        再仔细看一下这个QueryResult类，由于我们必须要返回文本，所以要用到提到过的保存整个文本的vector，然而它是第一类的成员，我们拷贝一份貌似没有必要，因为我们只需要调用其中很小的一部分，这样会造成大量的浪费，那么使用一个类内的迭代器（或指针）可以嘛？答案也是不行，因为如果第一个类再第二个类之前销毁，那么打印操作就会访问一个不存在的对象中的数据。最好的办法就是使用我们”最牛逼“的shared_ptr来反映数据结构中的共享关系。</p>
<h3 id="设计类之前先使用类"><a href="#设计类之前先使用类" class="headerlink" title="设计类之前先使用类"></a>设计类之前先使用类</h3><p>​        当我们设计一个类时，在真正实现成员之前先编写程序使用这个类，是一种非常有用的方法。通过这种方法，可以看到类是否具有我们所需要的操作。例如，下面的程序使用了TextQuery和 QueryResult类。这个函数接受一个指向要处理的文件的ifstream，并与用户交互，打印给定单词的查询结果</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runQueries</span><span class="params">(ifstream &amp;infile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//infile是一个ifstream，指向我们要处理的文件</span></span><br><span class="line">	<span class="function">TextQuery <span class="title">tq</span><span class="params">(infile)</span></span>; 	<span class="comment">//保存文件并建立查询map</span></span><br><span class="line">	<span class="comment">//与用户交互:提示用户输入要查询的单词，完成查询并打印结果</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;enter word to look for, or q to quit: &quot;</span>;</span><br><span class="line">		string s;</span><br><span class="line">		<span class="comment">//若遇到文件尾或用户输入了&#x27;q&#x27;时循环终止</span></span><br><span class="line">		<span class="keyword">if</span>(!(cin &gt;&gt; s) || s == <span class="string">&quot;q&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//指向查询并打印结果</span></span><br><span class="line">		<span class="built_in">print</span>(cout, tq.<span class="built_in">query</span>(s)) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><h3 id="TextQuery框架"><a href="#TextQuery框架" class="headerlink" title="TextQuery框架"></a>TextQuery框架</h3><p>​        首先是TextQuery，用用户提供的一个istream读取文件，类中应该还有query操作，接受string，返回QueryResult表示string出现的行。我们创建一个头文件命名为textquery，在其中输入：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEXTQUERY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXTQUERY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::shared_ptr;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span>;</span><span class="comment">// 为了定义函数query的返回类型，这个定义是必需的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextQuery</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//简化行下标</span></span><br><span class="line">	<span class="keyword">using</span> line_no = vector&lt;string&gt;::size_type;</span><br><span class="line">	<span class="comment">//通过用户提供的文本的构造函数</span></span><br><span class="line">	<span class="built_in">TextQuery</span>(std::ifstream&amp;);</span><br><span class="line">	<span class="comment">//返回查询结果的函数，由于只是查询所以应该加上const</span></span><br><span class="line">	<span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="keyword">const</span> string&amp;)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">//输入的文件</span></span><br><span class="line">	shared_ptr&lt;vector&lt;string&gt;&gt; file;</span><br><span class="line">	<span class="comment">//每个单词到它所在的行号的集合的映射</span></span><br><span class="line">	std::map&lt;string, shared_ptr&lt;std::set&lt;line_no&gt;&gt;&gt; wm;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>​        至于这里为什么出现这么多的std，而不是直接引入整个命名空间：在头文件这样做是非常危险的，由于C++头文件通常与源文件分开存放，对于不知道这个头文件里有什么的用户来说，使用这个头文件就有可能会导致很多的命名冲突。这里建议在任何文件中都不要这样做。</p>
<h3 id="QueryResult框架"><a href="#QueryResult框架" class="headerlink" title="QueryResult框架"></a>QueryResult框架</h3><p>​        QueryResult类有三个数据成员：一个string，保存查询单词：一个shared_ptr，指向保存输入文件的vector；一个shared ptr，指向保存单词出现行号的set。它唯一的一个成员函数是一个构造函数，初始化这三个数据成员。在刚才的类之后，紧接着写入以下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span> &#123;</span></span><br><span class="line">    <span class="comment">//将ostream声明为友元函数，之后用来打印结果</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> std::ostream&amp; <span class="title">print</span><span class="params">(std::ostream&amp;, <span class="keyword">const</span> QueryResult&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">	<span class="built_in">QueryResult</span>(string s,</span><br><span class="line">		shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt;p,</span><br><span class="line">		shared_ptr&lt;vector&lt;string&gt;&gt; f) :</span><br><span class="line">		<span class="built_in">sought</span>(s), <span class="built_in">lines</span>(p), <span class="built_in">file</span>(f) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string sought; 							<span class="comment">// 查询单词</span></span><br><span class="line">	shared_ptr&lt;set&lt;TextQuery::line_no&gt;&gt; lines;<span class="comment">//出现的行号</span></span><br><span class="line">	shared_ptr&lt;vector&lt;string&gt;&gt; file;		 <span class="comment">//输入文件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里为什么不在TextQuery类之前那里写呢？因为这个类中我们用到了TextQuery中的line_no，这两个类其实是你中有我，我中有你的关系，所以我们在开头需要一个声明，在之后去定义他。</p>
<h3 id="TextQuery构造函数"><a href="#TextQuery构造函数" class="headerlink" title="TextQuery构造函数"></a>TextQuery构造函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取输入文件并建立单词到行号的映射</span></span><br><span class="line">TextQuery::<span class="built_in">TextQuery</span>(ifstream &amp;is): <span class="built_in">file</span> (<span class="keyword">new</span> vector&lt;string&gt;)</span><br><span class="line">&#123;</span><br><span class="line">	string text;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">getline</span>(is, text))	&#123;		<span class="comment">//对文件中每一行</span></span><br><span class="line">		file-&gt;<span class="built_in">push_back</span>(text);			<span class="comment">//保存此行文本</span></span><br><span class="line">		<span class="keyword">int</span> n = file-&gt;<span class="built_in">size</span>() - l;		<span class="comment">//当前行号</span></span><br><span class="line">		<span class="function">istringstream <span class="title">line</span><span class="params">(text)</span></span>;		<span class="comment">//将行文本分解为单词</span></span><br><span class="line">		string word;</span><br><span class="line">		<span class="keyword">while</span> (line &gt;&gt; word) &#123;			<span class="comment">//对行中每个单词</span></span><br><span class="line">			<span class="comment">//如果单词不在 wm 中，以之为下标在wm中添加一项</span></span><br><span class="line">			<span class="keyword">auto</span> &amp;lines = wm [ word];	<span class="comment">// lines是一个shared _ptr</span></span><br><span class="line">			<span class="keyword">if</span> (!lines)				   <span class="comment">//在我们第一次遇到这个单词时，此指针为空</span></span><br><span class="line">				lines.<span class="built_in">reset</span>(<span class="keyword">new</span> set&lt;line_no&gt;); <span class="comment">//分配一个新的set</span></span><br><span class="line">            lines-&gt;<span class="built_in">insert</span>(n);			<span class="comment">//将此行号插入set中</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第十二章</title>
    <url>/2022/01/23/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h1><p>我们的程序到目前为止只使用过静态内存或栈内存。静态内存用来保存局部static对象（就是局部对象加上static）、类static数据成员以及定义在任何函数之外的变量。栈内存用来保存定义在函数内的非static对象。分配在静态或栈内存中的对象由编译器自动创建和销毁。对于栈对象，在其定义的程序块运行时才存在: static 对象在使用之前分配，在程序结束时销毁。</p>
<p>除了静态内存和栈内存，每个程序还拥有一个内存池。这部分内存被称作自由空间( free store)或堆(heap)。程序用堆来存储动态分配(dynamically allocate)的对象一即，那些在程序运行时分配的对象。动态对象的生存期由程序来控制，也就是说，当动态对象不再使用时，我们的代码必须显式地销毁它们。</p>
<h2 id="动态内存与智能指针"><a href="#动态内存与智能指针" class="headerlink" title="动态内存与智能指针"></a>动态内存与智能指针</h2><p>在C++中，动态内存的管理是通过一对运算符来完成的: <strong>new</strong>，在动态内存中为对象分配空间并返回一个指向该对象的指针，我们可以选择对对象进行初始化; <strong>delete</strong>, 接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。</p>
<p>新标准提供了两个智能指针类型类管理动态对象。他们行为类似常规指针，却可以自动的释放锁指向的对象，这两种指针的区别在于管理底层指针的方式：</p>
<p><strong>shared_ ptr</strong>允许多个指针指向同-一个对象; <strong>unique_ ptr</strong>则“独占”所指向的对象。标准库还定义了一个名为<strong>weak_ ptr</strong>的伴随类，它是一种弱引用，指向shared_ ptr所管理的对象。这三种类型都定义在memory头文件中。</p>
<h3 id="shared-ptr类"><a href="#shared-ptr类" class="headerlink" title="shared_ptr类"></a>shared_ptr类</h3><p>创建时我们也需要提供指向的类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;string&gt; p1;				<span class="comment">// shared_ _ptr, 可以指向string</span></span><br><span class="line">shared_ptr&lt;list&lt;<span class="keyword">int</span>&gt;&gt; p2;			<span class="comment">// shared_ ptr， 可以指向int的list</span></span><br></pre></td></tr></table></figure>

<p>默认初始化的指针中保存着一个空指针，</p>
<p>智能之后着呢使用方式与普通指针类似，解引用返回指向的对象，在if使用，是检测它是否为空：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果p1不为空，检查它是否指向一个空string</span></span><br><span class="line"><span class="keyword">if</span> (p1 &amp;&amp; pl-&gt;<span class="built_in">empty</span>())</span><br><span class="line">	*p1 = <span class="string">&quot;hi&quot;</span>; 			<span class="comment">//如果p1指向一个空string,解引用p1,将一个新值赋予string</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/27/QGMjaLHzpiNKeFV.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/01/27/UYdeStwyJBpqVKG.png" alt="image.png"></p>
<h4 id="make-shared函数"><a href="#make-shared函数" class="headerlink" title="make_shared函数"></a>make_shared函数</h4><p>他是最安全的分配和使用动态内存的方法，函数在动态内存中分配一个对象并初始化它，返回指向此对象的shared_ptr，一样要给出创建对象类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指向一个值为42的int的shared_ ptr</span></span><br><span class="line">shared_ptr&lt;<span class="keyword">int</span>&gt; p3 = make_shared&lt;<span class="keyword">int</span>&gt; (<span class="number">42</span>) ;</span><br><span class="line"><span class="comment">// p4指向一个值为&quot;999999999&quot;的string</span></span><br><span class="line">shared_ptr&lt;string&gt; p4 = make_shared&lt;string&gt;(<span class="number">10</span>， <span class="string">&#x27;9&#x27;</span>) ;</span><br><span class="line"><span class="comment">// p5指向一个值初始化的(参见3.3.1节，第88页)int,即，值为0</span></span><br><span class="line">shared_ptr&lt;<span class="keyword">int</span>&gt; p5 = make_shared&lt;<span class="keyword">int</span>&gt;() ;</span><br></pre></td></tr></table></figure>

<p>通常使用auto来指向它</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// p6指向一个动态分配的空vector&lt;string&gt;</span></span><br><span class="line"><span class="keyword">auto</span> p6 = make_shared&lt;vector&lt;string&gt;&gt;() ;</span><br></pre></td></tr></table></figure>

<h4 id="shared-ptr拷贝和赋值"><a href="#shared-ptr拷贝和赋值" class="headerlink" title="shared_ptr拷贝和赋值"></a>shared_ptr拷贝和赋值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> p = make shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>); <span class="comment">// p指向的对象只有p一个引用者</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">q</span><span class="params">(p)</span></span>; <span class="comment">// p和q指向相同对象，此对象有两个引用者</span></span><br></pre></td></tr></table></figure>

<p>每一个shared_ptr都会有一个关联的计数器，为引用计数。拷贝一个shared_ptr、作为参数传递给函数或者作为返回值就会递增，给shared_ptr赋予新值或者它被销毁计数器会递减。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> r = make_ shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>); <span class="comment">// r指向的int只有一个引用者</span></span><br><span class="line">r = q;	<span class="comment">//给r赋值，令它指向另一个地址</span></span><br><span class="line">		<span class="comment">//递增q指向的对象的引用计数</span></span><br><span class="line">		<span class="comment">//递减r原来指向的对象的引用计数</span></span><br><span class="line">		<span class="comment">// r原来指向的对象已没有引用者，会自动释放</span></span><br></pre></td></tr></table></figure>

<h4 id="shared-ptr销毁管理对象"><a href="#shared-ptr销毁管理对象" class="headerlink" title="shared_ptr销毁管理对象"></a>shared_ptr销毁管理对象</h4><p>当指向一个对象的最后一个智能指针被销毁，指针的析构函数会递减指向对象的析构函数的引用计数，计数为0，指针的析构函数会销毁对象，释放内存。</p>
<p>且动态对象不再被使用时，shared_ptr类会自动的释放对象，特性使得动态内存的使用变得容易，例如在函数创建智能指针在离开作用域后会自动的释放掉</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// factory 返回一个shared_ ptr, 指向一个动态分配的对象</span></span><br><span class="line"><span class="function">shared_ptr&lt;Foo&gt; <span class="title">factory</span><span class="params">(T arg)</span></span></span><br><span class="line"><span class="function">	<span class="comment">//恰当地处理arg</span></span></span><br><span class="line"><span class="function">	<span class="comment">// shared_ ptr负责释放内存</span></span></span><br><span class="line"><span class="function">	<span class="keyword">return</span> make_shared&lt;Foo&gt; <span class="params">(arg)</span> </span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use_factory</span><span class="params">(T arg)</span></span></span><br><span class="line"><span class="function">	shared_ptr&lt;Foo&gt; P </span>= <span class="built_in">factory</span>(arg) ;</span><br><span class="line">	<span class="comment">//使用p</span></span><br><span class="line">&#125; 	<span class="comment">// p离开了作用城，它指向的内存会被自动释放掉</span></span><br></pre></td></tr></table></figure>

<h4 id="使用了动态生存期的资源的类"><a href="#使用了动态生存期的资源的类" class="headerlink" title="使用了动态生存期的资源的类"></a>使用了动态生存期的资源的类</h4><p>程序使用动态内存出于以下三种原因之一:</p>
<ol>
<li>程序不知道自己需要使用多少对象</li>
<li>程序不知道所需对象的准确类型</li>
<li>程序需要在多个对象间共享数据</li>
</ol>
<p>目前使用的类分配资源都与对应对象生存期一致。例如每个vector拥有自己的元素，当拷贝一个vector时，原vector和副本vector是相互分离的。</p>
<p>如果我们希望有一个类，当它进行拷贝时，不是拷贝其中成员，而是不同对象之间共享相同的元素。所以当两个对象共享底层数据，当其中一个被销毁，我们不能单方面的销毁底层数据：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Blob&lt;string&gt; bl; <span class="comment">// 空Blob</span></span><br><span class="line">&#123; 	<span class="comment">//新作用域</span></span><br><span class="line">	Blob&lt;string&gt; b2 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span>&#125;;</span><br><span class="line">	bl = b2;<span class="comment">//bl和b2共享相同的元素</span></span><br><span class="line">&#125; 	<span class="comment">// b2被销毁了，但b2中的元素不能销毁</span></span><br><span class="line">	<span class="comment">// bl指向最初由b2创建的元素</span></span><br></pre></td></tr></table></figure>

<h4 id="定义StrBlob"><a href="#定义StrBlob" class="headerlink" title="定义StrBlob"></a>定义StrBlob</h4><p>这里想要实现一个StrBlob类管理string元素，如果我们在类内直接使用一个vector来保存元素，那么当多个对象中的一个被销毁时就会把底层vector销毁，所以这里使用vector保存在动态内存中。</p>
<p>为了实现数据共享，我们为StrBlob设置一个shared_ptr来管理动态内存分配的vector。该指针可以记录有多少个StrBlob共享相同的vector。</p>
<p>还需要提供一些操作，当访问一个不存在的元素，会抛出异常，且有一个默认构造和单一构造：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrB1ob</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">typedef</span> std::vector&lt;std::string&gt;::size_type size_type;</span><br><span class="line">	<span class="built_in">StrBlob</span>() ;</span><br><span class="line">	<span class="built_in">StrBlob</span>(std::initializer_list&lt;std::string&gt; il) ;</span><br><span class="line">	<span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;<span class="built_in">size</span>(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;<span class="built_in">empty</span>() ; &#125;</span><br><span class="line">	<span class="comment">//添加和删除元素</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push_back</span> <span class="params">(<span class="keyword">const</span> std: :string &amp;t)</span> </span>&#123;data-&gt;<span class="function">push_ <span class="title">back</span><span class="params">(t)</span></span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="comment">//元素访问</span></span><br><span class="line">	<span class="function">std::string&amp; <span class="title">front</span> <span class="params">()</span> </span>;</span><br><span class="line">	<span class="function">std::string&amp; <span class="title">back</span><span class="params">()</span> </span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt; data;</span><br><span class="line">	<span class="comment">//如果data[i]不合法，抛出一个异常</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(size_type i, <span class="keyword">const</span> std::string &amp;msg)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="StrBlob构造函数"><a href="#StrBlob构造函数" class="headerlink" title="StrBlob构造函数"></a>StrBlob构造函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StrBlob::<span class="built_in">StrB1ob</span> (): <span class="built_in">data</span> (make_shared&lt;vector&lt;string&gt;&gt;()) &#123; &#125;</span><br><span class="line">StrBlob::<span class="built_in">StrBlob</span> (initializer_list&lt;string&gt; il) :</span><br><span class="line"><span class="built_in">data</span> (make_shared&lt;vector&lt;string&gt;&gt;(il)) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="元素访问成员函数"><a href="#元素访问成员函数" class="headerlink" title="元素访问成员函数"></a>元素访问成员函数</h4><p>由于操作访问函数需要先检查存不存在，所以定义一个私有的工具函数check：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StrBlob::check</span><span class="params">(size_type i, <span class="keyword">const</span> string &amp;msg)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	<span class="title">if</span> <span class="params">(i &gt;= data-&gt;size())</span>	</span></span><br><span class="line"><span class="function">	<span class="keyword">throw</span> <span class="title">out_of_range</span><span class="params">(msg)</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他操作首先调用check，如成功则继续下一步：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string&amp; <span class="title">StrBlob::front</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//如果vector为空，check 会抛出一个异常</span></span><br><span class="line">	<span class="built_in">check</span>(<span class="number">0</span>，<span class="string">&quot;front on empty StrB1ob&quot;</span>) ;</span><br><span class="line">	<span class="keyword">return</span> data-&gt;<span class="built_in">front</span> () ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string&amp; <span class="title">StrBlob::back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">check</span>(<span class="number">0</span>，<span class="string">&quot;back on empty StrB1ob&quot;</span>) ;</span><br><span class="line">	<span class="keyword">return</span> data-&gt;<span class="built_in">back</span>() ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StrBlob::pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">check</span>(<span class="number">0</span>, <span class="string">&quot;pop_back on empty StrBlob&quot;</span>) ;</span><br><span class="line">	data-&gt;<span class="built_in">pop_back</span>() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后还应对front和back的const版本进行重载：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> string&amp; <span class="title">StrBlob::front</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//如果vector为空，check 会抛出一个异常</span></span><br><span class="line">	<span class="built_in">check</span>(<span class="number">0</span>，<span class="string">&quot;front on empty StrB1ob&quot;</span>) ;</span><br><span class="line">	<span class="keyword">return</span> data-&gt;<span class="built_in">front</span> () ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> string&amp; <span class="title">StrBlob::back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">check</span>(<span class="number">0</span>，<span class="string">&quot;back on empty StrB1ob&quot;</span>) ;</span><br><span class="line">	<span class="keyword">return</span> data-&gt;<span class="built_in">back</span>() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StrBlob的拷贝、赋值和销毁"><a href="#StrBlob的拷贝、赋值和销毁" class="headerlink" title="StrBlob的拷贝、赋值和销毁"></a>StrBlob的拷贝、赋值和销毁</h4><p>该类型对象被拷贝’赋值或者销毁时，执行相应操作的是shared_ptr成员而不是vector，直到最后一个指向vector的指针对象被销毁。</p>
<h3 id="直接管理内存"><a href="#直接管理内存" class="headerlink" title="直接管理内存"></a>直接管理内存</h3><p>还可以使用new和delete来分配内存，但非常容出错。</p>
<h4 id="使用new动态分配内存和初始化对象"><a href="#使用new动态分配内存和初始化对象" class="headerlink" title="使用new动态分配内存和初始化对象"></a>使用new动态分配内存和初始化对象</h4><p>new分配的内存是无名的，返回一个指向该对象的指针：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="keyword">int</span>; 			<span class="comment">// pi指向一个动态分配的、未初始化的无名对象</span></span><br><span class="line"><span class="comment">// 默认情况下，动态分配内存是默认初始化的，意味着内置类型或组合类型的值是未定义的。</span></span><br><span class="line">string *ps = <span class="keyword">new</span> string; 	<span class="comment">//初始化为空string</span></span><br><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="keyword">int</span>;			<span class="comment">// pi指向一个未初始化的int</span></span><br></pre></td></tr></table></figure>

<p>也可以使用列表初始化，或值初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">1024</span>);			<span class="comment">// pi指向的对象的值为1024</span></span><br><span class="line">string *ps = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="number">10</span>， <span class="string">&#x27;9&#x27;</span>);	<span class="comment">// *ps 为&quot;999999999&quot;</span></span><br><span class="line"><span class="comment">// vector 有10个元素，值依次从0到9</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; *pv = <span class="keyword">new</span> vector&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">string *ps1 = <span class="keyword">new</span> string;			<span class="comment">//默认初始化为空string</span></span><br><span class="line">string *ps = <span class="keyword">new</span> <span class="built_in">string</span>() ;			<span class="comment">//值初始化为空string</span></span><br><span class="line"><span class="keyword">int</span> *pil = <span class="keyword">new</span> <span class="keyword">int</span>;					<span class="comment">//默认初始化; *pi1 的值未定义</span></span><br><span class="line"><span class="keyword">int</span> *pi2 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>();					<span class="comment">//值初始化为0; *pi2为0</span></span><br></pre></td></tr></table></figure>

<p>建议对动态分配的对象进行初始化操作。</p>
<p>如果提供了一个括号包围的初始化器，可以使用auto自动接管动态内存，但括号内必须仅有单一初始化器才可以使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> p1 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">auto</span></span> (obj) ;				<span class="comment">// p指向一个与obj类型相同的对象</span></span><br><span class="line"><span class="comment">//该对象用obj进行初始化</span></span><br><span class="line"><span class="keyword">auto</span> p2 = <span class="keyword">new</span> <span class="keyword">auto</span>&#123;a,b,c&#125; ;				<span class="comment">// 错误:括号中只能有单个初始化器</span></span><br></pre></td></tr></table></figure>

<h4 id="动态分配const对象"><a href="#动态分配const对象" class="headerlink" title="动态分配const对象"></a>动态分配const对象</h4><p>一个动态内存的const对象必须进行初始化，对于一个定义了默认构造函数的类类型，其const动态对象可以隐式初始化，而其他类型的对象就必须显示初始化。new返回的也是一个const指针。</p>
<h4 id="内存耗尽"><a href="#内存耗尽" class="headerlink" title="内存耗尽"></a>内存耗尽</h4><p>当程序用光了所有可用内存，new就会失败，会抛出一个bad_alloc的异常，可以改变new的方式来阻止异常：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果分配失败，new返回一个空指针</span></span><br><span class="line"><span class="keyword">int</span> *p1 = <span class="keyword">new</span> <span class="keyword">int</span>; <span class="comment">//如果分配失败，new抛出std::bad_alloc</span></span><br><span class="line"><span class="keyword">int</span> *p2 = <span class="built_in"><span class="keyword">new</span></span> (nothrow) <span class="keyword">int</span>; <span class="comment">//如果分配失败，new返回一个空指针</span></span><br></pre></td></tr></table></figure>

<p>这种new为<strong>定位new</strong>，这种形式允许我们传递额外参数，nothow就是告诉它不能抛出异常。以上类型都在头文件new中。</p>
<h4 id="释放动态内存"><a href="#释放动态内存" class="headerlink" title="释放动态内存"></a>释放动态内存</h4><p>我们使用delete来释放内存：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> p; <span class="comment">// p必须指向一个动态分配的对象或是一个空指针</span></span><br></pre></td></tr></table></figure>

<p>但传递给delete的指针必须是指向动态分配的内存或空指针，其他行为是未定义的。</p>
<p>const对象的值不能被改变，但是本身可以销毁，同样delete指向它的指针。</p>
<h4 id="动态对象的生存期直到被释放时为止"><a href="#动态对象的生存期直到被释放时为止" class="headerlink" title="动态对象的生存期直到被释放时为止"></a>动态对象的生存期直到被释放时为止</h4><p>如果不使用智能指针，那么必须显示的释放它。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// factory 返回一个指针，指向一个动态分配的对象</span></span><br><span class="line"><span class="function">Foo* <span class="title">factory</span><span class="params">(T arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//视情况处理arg</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Foo</span>(arg);	 <span class="comment">// 调用者负责释放此内存</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">use_factory</span><span class="params">(T arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Foo *p = <span class="built_in">factory</span>(arg) ;	<span class="comment">//使用p但不delete它</span></span><br><span class="line">&#125;<span class="comment">//p离开了它的作用域，但它所指向的内存没有被释放!</span></span><br></pre></td></tr></table></figure>

<p>所以必须在use_factory中delete掉这个p，或者return出去让外部释放。</p>
<p><em>坚持使用智能指针，避免所有这些问题。</em></p>
<h4 id="delete之后重置指针"><a href="#delete之后重置指针" class="headerlink" title="delete之后重置指针"></a>delete之后重置指针</h4><p>delete指针之后，指针值就无效了，虽然指针已经无效，但有些仍保存着地址，为<strong>空悬指针</strong>：即指向一块曾经保存数据对象但现在已经无效的内存指针。</p>
<p>它和未初始化指针很像，解决办法是，在指针即将离开其作用域之前释放它所关联的内存，这样没有机会继续使用，也可以在delete之后给其赋值为nullptr。</p>
<h3 id="shared-ptr和new结合使用"><a href="#shared-ptr和new结合使用" class="headerlink" title="shared_ptr和new结合使用"></a>shared_ptr和new结合使用</h3><p>我们可以用new返回的指针来初始化智能指针：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;<span class="keyword">double</span>&gt; p1; 			<span class="comment">//shared_ ptr可以指向一个double</span></span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>))</span></span>; 	<span class="comment">//p2指向一个值为42的int</span></span><br></pre></td></tr></table></figure>

<p>接受参数的智能指针是explicit的，因此我们不能将一个内置指针隐式转换为智能指针，必须使用直接初始化形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;<span class="keyword">int</span>&gt; p1 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">1024</span>);		<span class="comment">// 错误:必须使用直接初始化形式</span></span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1024</span>))</span></span>;			<span class="comment">// 正确:使用了直接初始化形式</span></span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">clone</span> <span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(p) ; <span class="comment">// 错误:隐式转换为shared ptr&lt;int&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">shared_ ptr&lt;<span class="keyword">int</span>&gt; <span class="title">clone</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> shared_ ptr&lt;<span class="keyword">int</span>&gt; (<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(p)) ;<span class="comment">//正确:显式地用int*创建shared_ ptr&lt;int&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不可混用普通与智能指针"><a href="#不可混用普通与智能指针" class="headerlink" title="不可混用普通与智能指针"></a>不可混用普通与智能指针</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">x</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span> (<span class="number">1024</span>))</span> </span>;</span><br><span class="line"><span class="comment">//危险: x是一个普通指针，不是一个智能指针</span></span><br><span class="line"><span class="built_in">process</span>(x); <span class="comment">//错误:不能将int*转换为一个shared_ ptr&lt;int&gt;</span></span><br><span class="line"><span class="built_in">process</span>(shared_ptr&lt;<span class="keyword">int</span>&gt;(x)); <span class="comment">// 合法的，但内存会被释放!</span></span><br><span class="line"><span class="keyword">int</span> j = *x;<span class="comment">//未定义的:x是一个空悬指针!</span></span><br></pre></td></tr></table></figure>

<p>将临时的shared_ptr传递给函数，在调用结束后就会被销毁，则x变为空悬指针。</p>
<p>当将一个shared_ptr绑定到一个 普通指针时，我们就将内存的管理责任交给了这个shared_ptr.-旦这样做了 ，我们就不应该再使用内置指针来访问shared__ptr所指向的内存了。</p>
<h4 id="也不要使用get初始化另一个智能指针或者为智能指针赋值"><a href="#也不要使用get初始化另一个智能指针或者为智能指针赋值" class="headerlink" title="也不要使用get初始化另一个智能指针或者为智能指针赋值"></a>也不要使用get初始化另一个智能指针或者为智能指针赋值</h4><p>智能指针定义了名为get的函数，返回一个内置指针，指向智能指针管理的对象。此函数是为了这样一种情况二设计的：是为了不能使用智能指针的代码使用，但此指针不能delete。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>))</span></span>; <span class="comment">//引用计数为1</span></span><br><span class="line"><span class="keyword">int</span> *q = p.<span class="built_in">get</span>(); <span class="comment">//正确:但使用q时要注意，不要让它管理的指针被释放</span></span><br><span class="line">&#123; <span class="comment">//新程序块</span></span><br><span class="line"><span class="comment">//未定义:两个独立的shared_ptr指向相同的内存</span></span><br><span class="line">shared_ptr&lt;<span class="keyword">int</span>&gt; (q) ;</span><br><span class="line">&#125; <span class="comment">//程序块结束，q被销毁，它指向的内存被释放</span></span><br><span class="line"><span class="keyword">int</span> foo = *p; <span class="comment">//未定义: p指向的内存已经被释放了</span></span><br></pre></td></tr></table></figure>

<h4 id="其他shared-ptr操作"><a href="#其他shared-ptr操作" class="headerlink" title="其他shared_ptr操作"></a>其他shared_ptr操作</h4><p>使用reset将一个新指针赋予它：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">1024</span>) ;		<span class="comment">//错误:不能将一个指针赋予shared_ ptr</span></span><br><span class="line">p.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">1024</span>)) ;	<span class="comment">//正确: p指向一个新对象</span></span><br></pre></td></tr></table></figure>

<p>通常与unique一起使用，控制多个shared_ptr共享的对象，检查自己是当前对象仅有的用户，如果不是，在改变之前要做一次新的拷贝：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!p.<span class="built_in">unique</span>())</span><br><span class="line">	p.<span class="built_in">reset</span> (<span class="keyword">new</span> <span class="built_in">string</span>(*p)); <span class="comment">// 我们不是唯一用户;分配新的拷贝</span></span><br><span class="line">*p += newVal; <span class="comment">//现在我们知道自己是唯一的用户，可以改变对象的值</span></span><br></pre></td></tr></table></figure>

<h3 id="智能指针和异常"><a href="#智能指针和异常" class="headerlink" title="智能指针和异常"></a>智能指针和异常</h3><p>在函数中使用智能指针，即使函数发生了异常，局部对象也会被销毁，而如果使用new，则在delete之前出现异常不会自动释放。</p>
<h4 id="智能指针指针和哑类"><a href="#智能指针指针和哑类" class="headerlink" title="智能指针指针和哑类"></a>智能指针指针和哑类</h4><p>有一些为C和C++两种语言设计的类，通常要求用户显示的释放所使用的任何资源。我们可以使用管理动态内存类似的技术管理不具有良好定义的析构函数，例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">destination</span>;</span>						<span class="comment">//表示我们正在连接什么</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">connection</span>;</span>						<span class="comment">//使用连接所需的信息</span></span><br><span class="line"><span class="function">connection <span class="title">connect</span> <span class="params">(destination*)</span> </span>;		<span class="comment">//打开连接</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(connection)</span> </span>;			<span class="comment">//关闭给定的连接</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(destination &amp;d <span class="comment">/*其他参数*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//获得一个连接;记住使用完后要关闭它</span></span><br><span class="line">	connection C = <span class="built_in">connect</span>(&amp;d) ;</span><br><span class="line">	<span class="comment">//使用连接</span></span><br><span class="line">	<span class="comment">//如果我们在f退出前忘记调用disconnect,就无法关闭c了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果connection没有析构函数，就会造成内存泄漏，可以使用shared_ptr保证connection被正确关闭。</p>
<h4 id="使用自己的释放操作"><a href="#使用自己的释放操作" class="headerlink" title="使用自己的释放操作"></a>使用自己的释放操作</h4><p>首先定义一个函数来代替delete，这个<strong>删除器</strong>函数必须能够完成对shared_ptr保存的指针进行释放的操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">end_connection</span> <span class="params">(connection *p)</span> </span>&#123; <span class="built_in">disconnect</span>(*p); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span> <span class="params">(destination &amp;d <span class="comment">/*其他参数*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	connection C = <span class="built_in">connect</span> (&amp;d) ;</span><br><span class="line">	<span class="function">shared_ptr&lt;connection&gt; <span class="title">P</span><span class="params">(&amp;C, end_connection)</span> </span>;</span><br><span class="line">	<span class="comment">//使用连接</span></span><br><span class="line">	<span class="comment">//当f退出时(即使是由于异常而退出), connection会被正确关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当p被销毁时，他会使用end_connection来代替delste，从而确保链接关闭。</p>
<p>智能指针可以提供对动态分配的内存安全而又方便的管理，但这建立在正确使用的<br>前提下。为了正确使用智能指针，我们必须坚持一些基本规范:</p>
<ul>
<li>不使用相同的内置指针值初始化(或reset)多个智能指针。</li>
<li>不delete get()返回的指针。</li>
<li>不使用get()初始化或reset另一个智能指针。</li>
<li>如果你使用get()返回的指针，记住当最后一个对应的智能指针销毁后，你的指针就变为无效了。</li>
<li>如果你使用智能指针管理的资源不是new分配的内存，记住传递给它一个删除器。</li>
</ul>
<h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><p>一个unique_ptr“拥有”它所指的对象，且只能有一个unique_ptr指向给定对象，指针被销毁时对象也会被销毁。定义它时，没有make_shared类似的函数，需要绑定一个new返回的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unique_ ptr &lt;<span class="keyword">double</span>&gt; p1; <span class="comment">//可以指向一个double的unique_ ptr</span></span><br><span class="line"><span class="function">unique_ ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>))</span></span>; <span class="comment">// p2指向一个值为42的int</span></span><br></pre></td></tr></table></figure>

<p>且不支持拷贝或赋值操作</p>
<p><img src="https://s2.loli.net/2022/02/04/UGd3SAoe1xhXtra.png" alt="image.png"></p>
<p>但可以通过调用release或reset将指针转移所有权：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将所有权从p1 (指向string Stegosaurus)转移给p2</span></span><br><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p2</span><span class="params">(p1.release())</span></span>; <span class="comment">// release 将p1置为空</span></span><br><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> string (<span class="string">&quot;Trex&quot;</span>))</span></span>;</span><br><span class="line"><span class="comment">//将所有权从p3转移给p2</span></span><br><span class="line">p2.<span class="built_in">reset</span> (p3.<span class="built_in">release</span>()); <span class="comment">// reset 释放了p2原来指向的内存</span></span><br></pre></td></tr></table></figure>

<p>release成员返回unique_ptr当前保存的指针并置空，并且切断了它和原指针的联系，如果不移交给智能指针，一定要delete。</p>
<p>reset成员接受可选指针，然后重新指向给定指针。</p>
<h4 id="函数中的unique-ptr"><a href="#函数中的unique-ptr" class="headerlink" title="函数中的unique_ptr"></a>函数中的unique_ptr</h4><p>我们可以拷贝或赋值一个精要呗销毁的unique_ptr，如函数返回它。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">clone</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="comment">//正确:从int*创建一个unique_ ptr&lt;int&gt;</span></span><br><span class="line"><span class="keyword">return</span> unique_ ptr&lt;<span class="keyword">int</span>&gt; (<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(p) ) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还可以返回一个局部对象的拷贝:</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">clone</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ret</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span> (p) )</span> </span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一种特殊的拷贝，将在之后介绍它。</p>
<h4 id="传递删除器"><a href="#传递删除器" class="headerlink" title="传递删除器"></a>传递删除器</h4><p>与shared_ptr类似，可以重载删除器，一样需要提供删除器类型，在创建或reset时提供指定类型的可调用的删除器。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// P指向一个类型为objT的对象，并使用一个类型为delT的对象释放objT对象</span></span><br><span class="line"><span class="comment">//它会调用一个名为fcn的delT类型对象</span></span><br><span class="line"><span class="function">unique_ptr&lt;objT, delT&gt; <span class="title">P</span> <span class="params">(<span class="keyword">new</span> objT, fcn)</span> </span>;</span><br></pre></td></tr></table></figure>

<p>用unique_ptr代替shared_ptr：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(destination &amp;d <span class="comment">/*其他需要的参数*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	connection c = <span class="built_in">connect</span> (&amp;d); <span class="comment">//打开连接</span></span><br><span class="line">	<span class="comment">//当p被销毁时，连接将会关闭</span></span><br><span class="line">	<span class="function">unique_ptr&lt;connection, <span class="title">decltype</span><span class="params">(end_connection)</span>*&gt; <span class="title">P</span><span class="params">(&amp;C， end_connection)</span> </span>;</span><br><span class="line">	<span class="comment">//使用连接</span></span><br><span class="line">	<span class="comment">//当f退出时(即使是由于异常而退出), connection会被正确关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在本例中我们使用了decltype来指明函数指针类型。由于decltype (end_ connection) 返回一个函数类型，所以我们必须添加一个*来指出我们正在使用该类型的一个指针。</p>
<h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><p>它是一种不控制所指向对象生存期的智能指针，它指向由一个shared（后面都简写）管理的对象将weak绑定到shared不会增加shared的引用计数，计数归0，即使有weak对象也会被释放。weak名字意为这种指针“弱”共享对象。</p>
<p><img src="https://s2.loli.net/2022/02/04/H8pSNcUh6Z9yQzO.png" alt="image.png"></p>
<p>创建weak时需要用shared初始化它：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> P = make_shared&lt;<span class="keyword">int</span>&gt; (<span class="number">42</span>) ;</span><br><span class="line"><span class="function">weak_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">wp</span><span class="params">(p)</span></span>; <span class="comment">// wp弱共享p; p的引用计数未改变</span></span><br></pre></td></tr></table></figure>

<p>因为weak若共享特性，它指向的对象可能不存在，所以在访问时必须调用lock判断，它返回一个指向共享对象的shared：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (shared_ptr&lt;<span class="keyword">int</span>&gt; np = wp.<span class="built_in">lock</span>()) &#123; <span class="comment">//如果np不为空则条件成立</span></span><br><span class="line"><span class="comment">//在if中，np与p共享对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="核查指针类"><a href="#核查指针类" class="headerlink" title="核查指针类"></a>核查指针类</h4><p>如果将StrBolb类定义一个伴随指针，保存一个weak_ptr，指向StrBolob的data成员，使用weak不会影响StrBlob指向vector的生存期，但可以阻止用户访问不存在的vector。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于访问一个不存在元素的尝试，StrBlobPtr抛出一个异常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">StrBlobPtr</span>():<span class="built_in">curr</span> (<span class="number">0</span>) &#123; &#125;</span><br><span class="line">	<span class="built_in">StrBlobPtr</span>(StrB1ob &amp;a， <span class="keyword">size_t</span> sz = <span class="number">0</span>) :</span><br><span class="line">	<span class="built_in">wptr</span>(a.data)，<span class="built_in">curr</span>(sz) &#123; &#125;</span><br><span class="line">	<span class="function">std::string&amp; <span class="title">deref</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function">StrBlobPtr&amp; <span class="title">incr</span><span class="params">()</span></span>; <span class="comment">// 前缀递增</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">//若检查成功，check返回一个指向vector的shared_ptr</span></span><br><span class="line">	std::shared_ptr&lt;std::vector&lt;std::string&gt;&gt;</span><br><span class="line">	<span class="built_in">check</span>(std::<span class="keyword">size_t</span>，<span class="keyword">const</span> std::string&amp;) <span class="keyword">const</span> ;</span><br><span class="line">	<span class="comment">//保存一个weak_ptr,意味着底层vector可能会被销毁</span></span><br><span class="line">	std::weak_ptr&lt;std::vector&lt;std::string&gt;&gt; wptr;</span><br><span class="line">	std::<span class="keyword">size_t</span> curr; <span class="comment">// 在数组中的当前位置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>此类需要注意不能将StrBlobPtr绑定到一个const StrBlob对象是因为构造函数只接受非const对象的引用</p>
<p>check函数也与之前不同需要检查指向的vector是否还存在：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::shared_ptr&lt;std: :vector&lt;std: :string&gt;&gt;</span><br><span class="line">StrBlobPtr::<span class="built_in">check</span>(std::<span class="keyword">size_t</span> i, <span class="keyword">const</span> std::string &amp;msg) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">auto</span> ret = wptr.<span class="built_in">lock</span>(); <span class="comment">// vector还存在吗?</span></span><br><span class="line">	<span class="keyword">if</span> (!ret)</span><br><span class="line">		<span class="keyword">throw</span> std::<span class="built_in">runtime_error</span> (<span class="string">&quot;unbound StrBlobPtr&quot;</span>) ;</span><br><span class="line">	<span class="keyword">if</span> (i &gt;= ret-&gt;<span class="built_in">size</span>())</span><br><span class="line">		<span class="keyword">throw</span> std::<span class="built_in">out_of_range</span> (msg) ;</span><br><span class="line">	<span class="keyword">return</span> ret; <span class="comment">// 否则，返回指向vector的shared_ptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指针操作"><a href="#指针操作" class="headerlink" title="指针操作"></a>指针操作</h4><p>现在我们将定义deref和incr的函数来解引用和递增StrBlobPtr</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::string&amp; <span class="title">StrBlobPtr::deref</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> p = <span class="built_in">check</span>(curr, <span class="string">&quot;dereference past end&quot;</span>) ;</span><br><span class="line">	<span class="keyword">return</span> (*p)[curr]; <span class="comment">// (*p) 是对象所指向的vector</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前缀递增:返回递增后的对象的引用</span></span><br><span class="line"><span class="function">StrBlobPtr&amp; <span class="title">StrBlobPtr::incr</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 如果curr已经指向容器的尾后位置，就不能递增它</span></span><br><span class="line">	<span class="built_in">check</span>(curr, <span class="string">&quot; increment past end of StrBlobPtr&quot;</span>) ;</span><br><span class="line">	++curr; <span class="comment">//推进当前位置</span></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此外为了访问data成员需要声明StrBlob的friend</span></span><br><span class="line"><span class="comment">//对于StrBlob 中的友元声明来说， 此前置声明是必要的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlob</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span>;</span></span><br><span class="line">	<span class="comment">//其他成员与12.1.1节(第405页)中声明相同</span></span><br><span class="line">	<span class="comment">//返回指向首元素和尾后元素的StrBlobPtr</span></span><br><span class="line">	<span class="function">StrBlobPtr <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">StrBlobPtr</span>(*<span class="keyword">this</span>) ; &#125;</span><br><span class="line">	<span class="function">StrBlobPtr <span class="title">end</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123; <span class="keyword">auto</span> ret = <span class="built_in">StrBlobPtr</span>(*<span class="keyword">this</span>， data-&gt;<span class="built_in">size</span>()); <span class="keyword">return</span> ret;&#125;</span><br><span class="line">    <span class="comment">//这里就是</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><p>如果需要可变数量的对象时，可以使用在StraBlob中采取的方法。</p>
<h3 id="new和数组"><a href="#new和数组" class="headerlink" title="new和数组"></a>new和数组</h3><p>定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用get_size确定分配多少个int</span></span><br><span class="line"><span class="keyword">int</span> *pia = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">get_size</span>()]; <span class="comment">// pia指向第一个int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以用一个表示数组类型的类型别名分配：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> arrT[<span class="number">42</span>];	<span class="comment">// arrT表示42个int的数组类型</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> arrT;		<span class="comment">//分配一个42个int的数组; p指向第一个int</span></span><br></pre></td></tr></table></figure>

<p>最后的代码等于<code>int *P new int[42];</code></p>
<p>在分配后得到元素类型的指针，所以不能使用begin或end，不可以用范围for来处理动态数组的元素</p>
<p><strong>要记住我们所说的动态数组并不是数组类型，这是很重要的。</strong></p>
<h4 id="初始化动态分配的数组"><a href="#初始化动态分配的数组" class="headerlink" title="初始化动态分配的数组"></a>初始化动态分配的数组</h4><p>可以使用默认初始化或者值初始化（跟一对空括号）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *pia = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];				<span class="comment">// 10 个未初始化的int</span></span><br><span class="line"><span class="keyword">int</span> *pia2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]() ;		<span class="comment">// 10个值初始化为0的int</span></span><br><span class="line">string *psa = <span class="keyword">new</span> string[<span class="number">10</span>] ;		<span class="comment">// 10个空string .</span></span><br><span class="line">string *psa2 = <span class="keyword">new</span> string[<span class="number">10</span>](); 	<span class="comment">// 10 个空string</span></span><br></pre></td></tr></table></figure>

<p>还可以提供初始化器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10个int分别用列表中对应的初始化器初始化</span></span><br><span class="line"><span class="keyword">int</span> *pia3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//10个string,前4个用给定的初始化器初始化，剩余的进行值初始化</span></span><br><span class="line">string *psa3 = <span class="keyword">new</span> string[<span class="number">10</span>]&#123;<span class="string">&quot;a&quot;</span>， <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span>, <span class="built_in">string</span>(<span class="number">3</span>,<span class="string">&#x27;x&#x27;</span>) &#125;;</span><br></pre></td></tr></table></figure>

<p>与内置初始化一样，初始化器会初始化开始部分的元素，剩余执行值初始化。</p>
<p>我们不可以在括号内给出初始化器，且不能用auto分配数组。</p>
<h4 id="动态分配空数组"><a href="#动态分配空数组" class="headerlink" title="动态分配空数组"></a>动态分配空数组</h4><p>可以用任意表达式唉确定分配相对数目</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">size_t</span> n = <span class="built_in">get_size</span>(); 	<span class="comment">//get_size 返回需要的元素的数目</span></span><br><span class="line"><span class="keyword">int</span>* P = <span class="keyword">new</span> <span class="keyword">int</span>[n];		<span class="comment">//分配数组保存元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>* q = p; q != p + n; ++q) .</span><br><span class="line">	<span class="comment">/*处理数组*/</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//即使为0，也能够正常运作</span></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">0</span>] ;			<span class="comment">//错误:不能定义长度为0的数组.</span></span><br><span class="line"><span class="keyword">char</span> *cp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span>]; <span class="comment">// 正确:但cp不能解引用</span></span><br></pre></td></tr></table></figure>

<p>cp可以就像尾后迭代器一样使用</p>
<h4 id="释放动态数组"><a href="#释放动态数组" class="headerlink" title="释放动态数组"></a>释放动态数组</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> P;		<span class="comment">// p必须指向一个动态分配的对象或为空</span></span><br><span class="line"><span class="keyword">delete</span> [] pa; 	<span class="comment">//pa必须指向一个动态分配的数组或为空</span></span><br></pre></td></tr></table></figure>

<p>释放元素是按逆序销毁，且方括号是必须的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> arrT[<span class="number">42</span>] ;		<span class="comment">// arrT是42个int的数组的类型别名</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> arrT;			<span class="comment">//分配一个42个int的数组; p指向第一个元素</span></span><br><span class="line"><span class="keyword">delete</span> [] p;				<span class="comment">//方括号是必需的，因为我们当初分配的是一个数组</span></span><br></pre></td></tr></table></figure>

<h4 id="智能指针和动态数组"><a href="#智能指针和动态数组" class="headerlink" title="智能指针和动态数组"></a>智能指针和动态数组</h4><p>标准库提供了一个可以管理new分配的数组的unique版本。但必须在对象后跟一对空方括号</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//up指向一个包含10个未初始化int的数组</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>[]&gt; <span class="title">up</span> <span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>])</span> </span>;</span><br><span class="line">up.<span class="built_in">release</span>(); <span class="comment">//自动用delete[]销毁其指针</span></span><br></pre></td></tr></table></figure>

<p>当一个unique指向一个数组时，我们可以使用下标运算来访问数组中的元素：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>;i != <span class="number">10</span>; ++i)</span><br><span class="line">	up[i] = i; <span class="comment">//为每个元素赋予一个新值</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/02/04/Swc3g5LlOX2bQsx.png" alt="image.png"></p>
<p>与unique不同的是shared不支持管理动态数组。如果希望使用shared管理动态数组需要自定义删除器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为了使用shared_ptr，必须提供一个删除器</span></span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]， [](<span class="keyword">int</span> *p) &#123; <span class="keyword">delete</span>[] P; &#125;)</span> </span>;</span><br><span class="line">sp.<span class="built_in">reset</span>(); <span class="comment">//使用我们提供的lambda释放数组，它使用delete []</span></span><br></pre></td></tr></table></figure>

<p>这里直接传递一个lambda表达式作为删除器。如果不提供删除器，则后果与delete不加[]一样。此外他也不支持下标运算：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// shared_ ptr未定义下标运算符，并且不支持指针的算术运算</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>;i != <span class="number">10</span>; ++i)</span><br><span class="line">	* (sp.<span class="built_in">get</span>() + i) = i; <span class="comment">//使用get获取一个内置指针</span></span><br></pre></td></tr></table></figure>

<p>所以只能使用get获取内置指针来访问数组元素</p>
<h3 id="allocator类"><a href="#allocator类" class="headerlink" title="allocator类"></a>allocator类</h3><p>new有一些缺陷：因为它将内存分配与对象构造组合在一起，所以会导致不必要的浪费：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string *<span class="keyword">const</span> P = <span class="keyword">new</span> string[n]; <span class="comment">// 构造n个空string</span></span><br><span class="line">string s;</span><br><span class="line">string *q = P;		<span class="comment">// q指向第一个string</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; s &amp;&amp; q != P + n)</span><br><span class="line">	*q++ = s;			<span class="comment">//赋予*q一个新值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> size = q - P;		<span class="comment">//记住我们读取了多少个string</span></span><br><span class="line"><span class="comment">//使用数组</span></span><br><span class="line"><span class="keyword">delete</span>[] p; <span class="comment">// P指向一个数组;记得用delete[]来释放</span></span><br></pre></td></tr></table></figure>

<p>这里创建了n个string，但可能并不需要这么多，所以造成了浪费。</p>
<h4 id="新的方法allocalltor"><a href="#新的方法allocalltor" class="headerlink" title="新的方法allocalltor"></a>新的方法allocalltor</h4><p>它定义在头文件memory中，帮助我们将内存分配和对象构造分开。分配时需要给出类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">allocator&lt;string&gt; alloc;				<span class="comment">//可以分配string的allocator对象</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">const</span> P = alloc.<span class="built_in">allocate</span> (n) ;		<span class="comment">// 分配n个未初始化的string</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/02/04/CaKVzphwGWYIXc4.png" alt="image.png"></p>
<h4 id="分配未构造的内存"><a href="#分配未构造的内存" class="headerlink" title="分配未构造的内存"></a>分配未构造的内存</h4><p>使用alloc.construct构造对象，额外的参数用于调用对象的构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> q = p; 						<span class="comment">//q指向最后构造的元素之后的位置</span></span><br><span class="line">alloc.<span class="built_in">construct</span>(q++);				<span class="comment">//*q为空字符串</span></span><br><span class="line">alloc.<span class="built_in">construct</span>(q++，<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>);		<span class="comment">//*q为cccccccccc  </span></span><br><span class="line">alloc.<span class="built_in">construct</span>(q++, <span class="string">&quot;hi&quot;</span>);			 <span class="comment">//*q为hi !</span></span><br></pre></td></tr></table></figure>

<p>在没有构造的情况下访问内存试错误的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; *p &lt;&lt;endl; <span class="comment">//正确:使用string的输出运算符</span></span><br><span class="line">cout &lt;&lt; *q &lt;&lt;endl; <span class="comment">//灾难:q指向未构造的内存!</span></span><br></pre></td></tr></table></figure>

<p>当用完对象后，必须对每个构造元素调用destroy来销毁它们。接受一个指针对指向对象执行析构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (q != p)</span><br><span class="line">	alloc.<span class="built_in">destroy</span>(--q);<span class="comment">//释放我们真正构造的string</span></span><br></pre></td></tr></table></figure>

<p>销毁元素后可以重新使用内存，也可以归还系统</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">alloc.<span class="built_in">deallocate</span>(p, n) ;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，第二个大小参数必须与调用allocate时一样。</p>
<h4 id="拷贝和填充未初始化内存"><a href="#拷贝和填充未初始化内存" class="headerlink" title="拷贝和填充未初始化内存"></a>拷贝和填充未初始化内存</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分配比vi中元素所占用空间大一倍的动态内存</span></span><br><span class="line"><span class="keyword">auto</span> p = alloc.<span class="built_in">allocate</span>(vi.<span class="built_in">size</span> () * <span class="number">2</span>);</span><br><span class="line"><span class="comment">//通过拷贝vi中的元素来构造从p开始的元素</span></span><br><span class="line"><span class="keyword">auto</span> q = <span class="built_in">uninitialized_copy</span> (vi.<span class="built_in">begin</span>(), vi.<span class="built_in">end</span>(), p);</span><br><span class="line"><span class="comment">//将剩余元素初始化为42</span></span><br><span class="line"><span class="built_in">uninitialized_fill_n</span>(g, vi.<span class="built_in">size</span>() , <span class="number">42</span>);</span><br></pre></td></tr></table></figure>

<h2 id="使用标准库：文本查询程序"><a href="#使用标准库：文本查询程序" class="headerlink" title="使用标准库：文本查询程序"></a>使用标准库：文本查询程序</h2><p>此部分将单独作为一章。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第十一章</title>
    <url>/2022/01/10/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h1><h2 id="使用关联容器"><a href="#使用关联容器" class="headerlink" title="使用关联容器"></a>使用关联容器</h2><p>关联容器</p>
<p><img src="https://i.bmp.ovh/imgs/2022/01/f8ba18e3b76e063e.png"></p>
<h2 id="使用关联容器-1"><a href="#使用关联容器-1" class="headerlink" title="使用关联容器"></a>使用关联容器</h2><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计每个单词在输入中出现的次数</span></span><br><span class="line">map&lt;string，<span class="keyword">size_t</span> &gt; word_count; <span class="comment">// string到size_t 的空map</span></span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word)</span><br><span class="line">	++word_count[word] ;				<span class="comment">//提取word的计数器并将其加1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;w : word_ count) <span class="comment">// 对map中的每个元素</span></span><br><span class="line">	<span class="comment">//打印结果</span></span><br><span class="line">	cout &lt;&lt; w.first &lt;&lt; <span class="string">&quot; occurs”&lt;&lt; w.second &lt;&lt; ((w.second&gt;1)?”times&quot;</span>:”time<span class="string">&quot;) &lt;&lt; endl;</span></span><br></pre></td></tr></table></figure>

<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计输入中每个单词出现的次数</span></span><br><span class="line">map&lt;string，<span class="keyword">size_t</span> &gt; word_count; 	<span class="comment">// string 到size_ t的空map .</span></span><br><span class="line">set&lt;string&gt; exclude = &#123; <span class="string">&quot;The&quot;</span>, <span class="string">&quot;But&quot;</span>, <span class="string">&quot;And&quot;</span>， <span class="string">&quot;Or&quot;</span>， <span class="string">&quot;An&quot;</span>, <span class="string">&quot;A&quot;</span>,</span><br><span class="line">						<span class="string">&quot;the&quot;</span>，<span class="string">&quot;but&quot;</span>, <span class="string">&quot;and&quot;</span>， <span class="string">&quot;or&quot;</span>， <span class="string">&quot;an&quot;</span>， <span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word)</span><br><span class="line">	<span class="comment">//只统计不在exclude中的单词</span></span><br><span class="line">	<span class="keyword">if</span> (exclude. <span class="built_in">find</span> (word) == exclude.<span class="built_in">end</span>() )</span><br><span class="line">	++word_ count [word]; 			<span class="comment">// 获取并递增word的计数器</span></span><br></pre></td></tr></table></figure>

<h2 id="关联容器概述"><a href="#关联容器概述" class="headerlink" title="关联容器概述"></a>关联容器概述</h2><h3 id="定义关联容器"><a href="#定义关联容器" class="headerlink" title="定义关联容器"></a>定义关联容器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map&lt;string，size_ t&gt; word_ count; <span class="comment">//空容器</span></span><br><span class="line"><span class="comment">//列表初始化</span></span><br><span class="line">set&lt;string&gt; exclude = &#123; <span class="string">&quot;the&quot;</span>, <span class="string">&quot;but&quot;</span>, <span class="string">&quot;and&quot;</span>, <span class="string">&quot;or&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;a&quot;</span>,</span><br><span class="line">						<span class="string">&quot;The&quot;</span>, <span class="string">&quot;But&quot;</span>， <span class="string">&quot;And&quot;</span>， <span class="string">&quot;Or&quot;</span>, <span class="string">&quot;An&quot;</span>， <span class="string">&quot;A&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//三个元素; authors将姓映射为名</span></span><br><span class="line">map&lt;string，string&gt; authors = &#123; &#123;<span class="string">&quot;Joyce&quot;</span>, <span class="string">&quot;James&quot;</span>&#125;,</span><br><span class="line">								&#123; <span class="string">&quot;Austen&quot;</span>, <span class="string">&quot;Jane&quot;</span>&#125;,</span><br><span class="line">								&#123;<span class="string">&quot;Dickens&quot;</span>, <span class="string">&quot;Charles&quot;</span>&#125; &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="初始化multimap或multiset"><a href="#初始化multimap或multiset" class="headerlink" title="初始化multimap或multiset"></a>初始化multimap或multiset</h4><p>multi容器允许多个元素具有相同的关键字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个有20个元素的vector,保存0到9每个整数的两个拷贝</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ivec;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i != <span class="number">10</span>; ++i) &#123;</span><br><span class="line">	ivec.<span class="function">push_ <span class="title">back</span><span class="params">(i)</span> </span>;</span><br><span class="line">	ivec.<span class="function">push_ <span class="title">back</span><span class="params">(i)</span></span>; 		<span class="comment">// 每个数重复保存一次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// iset包含来自ivec的不重复的元素; miset包含所有20个元素</span></span><br><span class="line"><span class="function">set&lt;<span class="keyword">int</span>&gt; <span class="title">iset</span> <span class="params">(ivec. cbegin()，ivec.cend())</span> </span>;</span><br><span class="line"><span class="function">multiset&lt;<span class="keyword">int</span>&gt; <span class="title">miset</span> <span class="params">(ivec.cbegin()，ivec.cend())</span> </span>;</span><br><span class="line">cout &lt;&lt; ivec.<span class="built_in">size</span>() &lt;&lt; endl;	<span class="comment">//打印出20</span></span><br><span class="line">cout &lt;&lt; iset.<span class="built_in">size</span>() &lt;&lt; endl;	<span class="comment">//打印出10</span></span><br><span class="line">cout &lt;&lt; miset.<span class="built_in">size</span>() &lt;&lt; endl;	<span class="comment">// 打印出 20</span></span><br></pre></td></tr></table></figure>

<h3 id="关键字类型的要求"><a href="#关键字类型的要求" class="headerlink" title="关键字类型的要求"></a>关键字类型的要求</h3><p>对于有序容器中的关键字类型必须定义比较元素的方法。</p>
<h4 id="使用关键字类型比较函数"><a href="#使用关键字类型比较函数" class="headerlink" title="使用关键字类型比较函数"></a>使用关键字类型比较函数</h4><p>可以指定一个比较函数来进行比较，需要在容器定义时紧跟着关键字类型给出。</p>
<p>当使用Sales_data类时因为没有&lt;运算符，所以我们需要自己定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compareIsbn</span> <span class="params">(<span class="keyword">const</span> Sales_data &amp;<span class="number">1</span>hs， <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> lhs.<span class="built_in">isbn</span>() &lt; rhs.<span class="built_in">isbn</span>() ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后定义容器时传入该函数,需要提供想要使用的操作的指针：</span></span><br><span class="line"><span class="comment">//bookstore中多条记录可以有相同的ISBN</span></span><br><span class="line"><span class="comment">// bookstore中的元素以ISBN的顺序进行排列</span></span><br><span class="line"><span class="function">multiset&lt;Sales_data, <span class="title">dec1type</span><span class="params">(compareIsbn)</span>*&gt;</span></span><br><span class="line"><span class="function">	<span class="title">bookstore</span> <span class="params">(compareIsbn)</span></span>;</span><br></pre></td></tr></table></figure>

<p>使用decltype指出自定义操作的类型，必须加上*指出给定的函数指针。</p>
<h3 id="pair类型"><a href="#pair类型" class="headerlink" title="pair类型"></a>pair类型</h3><p>在头文件utility中，一个pair保存两个数据成员：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pair&lt;string, string&gt; anon;				<span class="comment">//保存两个string</span></span><br><span class="line">pair&lt;string, size_ t&gt; word_ count;		<span class="comment">//保存一个string和一个size_ t</span></span><br><span class="line">pair&lt;string, vector&lt;<span class="keyword">int</span>&gt;&gt; line;			<span class="comment">//保存string和vector&lt;int&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用列表初始化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pair&lt;string, string&gt; author&#123;<span class="string">&quot;James&quot;</span>, <span class="string">&quot;Joyce&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>成员均为public使用first和second进行访问</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印结果</span></span><br><span class="line">cout &lt;&lt; w.first &lt;&lt; <span class="string">&quot;occurs&quot;</span> &lt;&lt; w.second&lt;&lt; ( (w.second &gt; <span class="number">1</span>)? ”time s: ”time<span class="string">&quot; ) &lt;&lt; endl ;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.bmp.ovh/imgs/2022/01/7b5d5c1283d78be6.png"></p>
<h4 id="返回pair的函数"><a href="#返回pair的函数" class="headerlink" title="返回pair的函数"></a>返回pair的函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">pair&lt;string，<span class="keyword">int</span>&gt; <span class="title">process</span> <span class="params">(vector&lt;string&gt; &amp;V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//处理v</span></span><br><span class="line">	<span class="keyword">if</span> (!v.<span class="built_in">empty</span>())</span><br><span class="line">		<span class="keyword">return</span> &#123;v. <span class="built_in">back</span>(), v.<span class="built_in">back</span>().<span class="built_in">size</span>()&#125;; <span class="comment">// 列表初始化</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> pair&lt;string， <span class="keyword">int</span>&gt;();			 <span class="comment">//隐式构造返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>else中返回的是一个空pair</p>
<p>早期版本中不可以列表初始化返回则必须显示构造或使用make_pair来生成：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!v.<span class="built_in">empty</span>())</span><br><span class="line">	<span class="keyword">return</span> pair&lt;string，<span class="keyword">int</span>&gt; (v.<span class="built_in">back</span>()，v.<span class="built_in">back</span>().<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">if</span> (!v.<span class="built_in">empty</span>())</span><br><span class="line">	<span class="keyword">return</span> make_ <span class="built_in">pair</span> (V.<span class="built_in">back</span>()，v.<span class="built_in">back</span>().<span class="built_in">size</span>());</span><br></pre></td></tr></table></figure>

<h2 id="关联容器的操作"><a href="#关联容器的操作" class="headerlink" title="关联容器的操作"></a>关联容器的操作</h2><p><img src="https://i.bmp.ovh/imgs/2022/01/9a7c9a3c2375955d.png"></p>
<h3 id="关联容器迭代器"><a href="#关联容器迭代器" class="headerlink" title="关联容器迭代器"></a>关联容器迭代器</h3><p>解引用关联容器得到迭代器得到一个value_type，对于map得到一个pair，first成员中保存的是const关键字，它是不可以更改的，second保存值。而set中value_type与value_type是一样的。</p>
<h4 id="遍历关联容器"><a href="#遍历关联容器" class="headerlink" title="遍历关联容器"></a>遍历关联容器</h4><p>使用迭代器遍历容器</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得一个指向首元素的迭代器</span></span><br><span class="line"><span class="keyword">auto</span> map_it = word_count.<span class="built_in">cbegin</span>() ;</span><br><span class="line"><span class="comment">//比较当前迭代器和尾后迭代器.</span></span><br><span class="line"><span class="keyword">while</span> (map_it != word_count.<span class="built_in">cend</span>() ) &#123;</span><br><span class="line">	<span class="comment">//解引用迭代器，打印关键字-值对</span></span><br><span class="line">	cout &lt;&lt; map_it-&gt;first &lt;&lt; ”occurs” &lt;&lt; map_it-&gt;second &lt;&lt; <span class="string">&quot; times&quot;</span> &lt;&lt; endl;</span><br><span class="line">	++map_it; <span class="comment">// 递增迭代器，移动到下一个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印出来的函数为升序排列。</p>
<h4 id="关联容器和算法"><a href="#关联容器和算法" class="headerlink" title="关联容器和算法"></a>关联容器和算法</h4><p>通常不对关联容器使用泛型算法，关键字的const特性意味着不可以重排或修改元素，set中的元素时const的，所以只可以使用只读的算法，推荐使用容器内部的find，它会比泛型算法快得多，泛型find使用的是顺序搜索。</p>
<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>使用insert添加一个元素或元素范围，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//set容器</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ivec = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;				<span class="comment">// ivec有8个元素</span></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; set2										<span class="comment">//空集合</span></span><br><span class="line">set2.<span class="built_in">insert</span>(ivec.<span class="built_in">cbegin</span>()，ivec.<span class="built_in">cend</span>());				<span class="comment">//set2有4个元素</span></span><br><span class="line">set2.<span class="built_in">insert</span>(&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;);						<span class="comment">// set2现在有8个元素</span></span><br><span class="line"><span class="comment">//insert可以接受一对迭代器，也可以接受一个初始化列表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map容器</span></span><br><span class="line"><span class="comment">//向word_count插入word的4种方法</span></span><br><span class="line">word_count.<span class="built_in">insert</span> (&#123;word, <span class="number">1</span>&#125;) ;</span><br><span class="line">word_count.<span class="built_in">insert</span> (<span class="built_in">make_pair</span>(word, <span class="number">1</span>)) ;</span><br><span class="line">word_count.<span class="built_in">insert</span> (pair&lt;string, <span class="keyword">size_t</span>&gt;(word, <span class="number">1</span>)) ;</span><br><span class="line">word_count.<span class="built_in">insert</span> (map&lt;string，<span class="keyword">size_t</span>&gt;::<span class="built_in">value_type</span> (word, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://i.bmp.ovh/imgs/2022/01/a8fe3a59d436ac0b.png"></p>
<h4 id="检测insert返回值"><a href="#检测insert返回值" class="headerlink" title="检测insert返回值"></a>检测insert返回值</h4><p>insert返回值依赖容器类型和参数，对于map和set，添加单一元素返回的是一个pair，first指向给定的关键字元素，second是bool值，指出插入成功还是失败（已存在）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计每个单词在输入中出现次数的一种更烦琐的方法</span></span><br><span class="line">map&lt;string，<span class="keyword">size_t</span>&gt; word_count; <span class="comment">// 从string到size_t的空map.</span></span><br><span class="line">string word;</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word) &#123;</span><br><span class="line">	<span class="comment">//插入一个元素，关键字等于word, 值为1;</span></span><br><span class="line">	<span class="comment">//若word已在word_ count中，insert什么也不做</span></span><br><span class="line">	<span class="keyword">auto</span> ret = word_count.<span class="built_in">insert</span> (&#123;word, <span class="number">1</span>&#125;) ;</span><br><span class="line">	<span class="keyword">if</span> (!ret.second)				<span class="comment">// word已在word_ count中</span></span><br><span class="line">		++ret.first-&gt;second; 		<span class="comment">//递增计数器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="展开递增语句"><a href="#展开递增语句" class="headerlink" title="展开递增语句"></a>展开递增语句</h4><p><code>++ret.first-&gt;second;</code>这句话就代表增加插入的那个元素中的second++。</p>
<h4 id="multi容器添加元素"><a href="#multi容器添加元素" class="headerlink" title="multi容器添加元素"></a>multi容器添加元素</h4><p>这种容器可以包含多个相同的关键字</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mul timap&lt;string, string&gt; authors;</span><br><span class="line"><span class="comment">//插入第一个元素，关键字为Barth， John</span></span><br><span class="line">authors.<span class="built_in">insert</span> (&#123;<span class="string">&quot;Barth，John&quot;</span>, <span class="string">&quot;Sot-Weed Factor&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//正确:添加第二个元素，关键字也是Barth， John</span></span><br><span class="line">authors.<span class="built_in">insert</span>(&#123;<span class="string">&quot;Barth, John&quot;</span>, <span class="string">&quot;Lost in the Funhouse&quot;</span>&#125;) ;</span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><img src="https://s2.loli.net/2022/01/22/QuvPl6JZYehS3fg.png" alt="image.png"></p>
<p>erase可以接受一个迭代器或者是一对迭代器来删除一个或一个范围的元素。还可以接受一个key_type，删除所匹配的关键字元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除一个关键字，返回删除的元素数量</span></span><br><span class="line"><span class="keyword">if</span> (word_count.<span class="built_in">erase</span> (removal_word) )</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ok:”&lt;&lt; removal_word &lt;&lt; ”removed\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;oops: ”&lt;&lt; removal_ word &lt;&lt; ”not found! \n&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>如果是multi容器，可能删除多个元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> cnt = authors.<span class="built_in">erase</span> (<span class="string">&quot;Barth，John&quot;</span>) ;</span><br></pre></td></tr></table></figure>

<p>上面authors中添加了两个相同的元素，则cnt等于2。</p>
<h3 id="map的下标操作"><a href="#map的下标操作" class="headerlink" title="map的下标操作"></a>map的下标操作</h3><p>map和unordered_map具有下标运算和at函数，set中不可以使用。</p>
<p>map通过下标运算，接受一个索引（即关键字）获取与之关联的值，但不同的是，如果没有此关键字，会创建一个关键字，并将对应的值初始化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map &lt;string， <span class="keyword">size_t</span>&gt; word_count; / / empty map</span><br><span class="line"><span class="comment">//插入一个关键字为Anna的元素，关联值进行值初始化;然后将1赋予它</span></span><br><span class="line">word_count [<span class="string">&quot;Anna&quot;</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>在word_ _count中搜索关键字为Anna的元素，未找到。</li>
<li><em>将一个新的关键字-值对插入到word</em> _count中。关键字是-一个const string，保存Anna。值进行值初始化，在本例中意味着值为0。</li>
<li>提取出新插入的元素，并将值1赋予它。</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/22/7R2B1iaJbqvftP4.png" alt="image.png"></p>
<h4 id="使用下标操作的返回值"><a href="#使用下标操作的返回值" class="headerlink" title="使用下标操作的返回值"></a>使用下标操作的返回值</h4><p>通常解引用的一个迭代器的类型与下标运算返回的类型是一样的，但map不同，会得到有个mappped_type对象，且为左值。</p>
<h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><p>count可以统计元素个数，对于不允许重复元素存在的容器，推荐使用find。</p>
<h4 id="map使用find代替下标操作"><a href="#map使用find代替下标操作" class="headerlink" title="map使用find代替下标操作"></a>map使用find代替下标操作</h4><p>map容器的下标操作如果关键字不存在，则会插入这个新的关键字，所以在只是想知道有没有这个关键字时可以用find代替。</p>
<h4 id="multi容器查找元素"><a href="#multi容器查找元素" class="headerlink" title="multi容器查找元素"></a>multi容器查找元素</h4><p><strong>方法一：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string search_ <span class="title">item</span><span class="params">(<span class="string">&quot;Alain de Botton&quot;</span>)</span> </span>;		<span class="comment">//要查找的作者</span></span><br><span class="line"><span class="keyword">auto</span> entries = authors. <span class="built_in">count</span> (search_ item) ;	<span class="comment">//元素的数量</span></span><br><span class="line"><span class="keyword">auto</span> iter = authors. <span class="built_in">find</span> (search_ item) ;		<span class="comment">//此作者的第一本书</span></span><br><span class="line"><span class="comment">//用一个循环查找此作者的所有著作</span></span><br><span class="line"><span class="keyword">while</span> (entries) &#123;</span><br><span class="line">	cout &lt;&lt; iter-&gt;second &lt;&lt; endl ;				<span class="comment">//打印每个题目</span></span><br><span class="line">	++iter;										<span class="comment">//前进到下一本书</span></span><br><span class="line">	--entries;									<span class="comment">//记录已经打印了多少本书</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法二</strong></p>
<p>lower_bound和up_bound分别返回匹配的第一个位置和最后一个位置的后一个位置。不存在则返回可插入位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// authors 和search_ item 的定义，与前面的程序一样</span></span><br><span class="line"><span class="comment">//beg和end表示对应此作者的元素的范围.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg = authors. <span class="built_in">lower_bound</span> (search_item) ,</span><br><span class="line">		  end = authors.<span class="built_in">upper_bound</span> (search_item) ;</span><br><span class="line">		  beg != end; ++beg)</span><br><span class="line">	cout &lt;&lt; beg-&gt;second &lt;&lt; endl; <span class="comment">//打印每个题目</span></span><br></pre></td></tr></table></figure>

<p><strong>方法三</strong></p>
<p>equal_range函数接受关键字，返回pair。若关键字存在则第一个指向第一个与之匹配的位置，第二个是最后一个与之匹配位置的后一个位置。若不存在则返回可插入位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// authors 和search_item的定义， 与前面的程序一样</span></span><br><span class="line"><span class="comment">// pos保存迭代器对，表示与关键字匹配的元素范围</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> pos = authors.<span class="built_in">equal_range</span> (search_item) ;</span><br><span class="line">	 pos.first != pos.second; ++pos.first)</span><br><span class="line">	cout &lt;&lt; pos.first-&gt;second &lt;&lt; endl; <span class="comment">//打印每个题目</span></span><br></pre></td></tr></table></figure>

<h3 id="单词转换map（跳）"><a href="#单词转换map（跳）" class="headerlink" title="单词转换map（跳）"></a>单词转换map（跳）</h3><h2 id="无序容器"><a href="#无序容器" class="headerlink" title="无序容器"></a>无序容器</h2><h4 id="使用无序容器"><a href="#使用无序容器" class="headerlink" title="使用无序容器"></a>使用无序容器</h4><p>unordered_map或者unordered_set，他们都有与前面类似的操作，通常可以用一个无序容器替换对应的有序容器，但顺序会与有序容器不同。</p>
<h4 id="管理桶"><a href="#管理桶" class="headerlink" title="管理桶"></a>管理桶</h4><p>无序容器在储存上为一组桶，无序容器使用一个哈希函数将所有元素映射到桶中，容器将具有一个特定的哈希值的所有元素保存在相同的桶中，访问时先按照哈希值找到对应的桶，再在桶中找对应的元素。因此容器性能依赖哈希函数的质量和桶的数量和大小。</p>
<p>最理想的情况应该是哈希函数将所有元素尽可能的均匀的分配到每个桶中。</p>
<p><img src="https://s2.loli.net/2022/01/27/eTFbRU5lHPOVKfp.png" alt="image.png"></p>
<h4 id="无序容器对关键字类型的要求"><a href="#无序容器对关键字类型的要求" class="headerlink" title="无序容器对关键字类型的要求"></a>无序容器对关键字类型的要求</h4><p>默认情况下，无序容器使用关键字类型的==运算符来比较元素，还使用一个hash<key_ type> 类型的对象来生成每个元素的哈希值。例如当我们想要将一个int值使用哈希函数，就是hash<int>,</p>
<p>但是我们不能直接定义关键字类型为自定义类类型的无序容器。可以不直接使用哈希模板而是使用自己的hash版本。例如Sale_data用作关键字，我们需要提供函数来代替==运算符和哈希计算函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">hasher</span><span class="params">(<span class="keyword">const</span> Sales_ data &amp;sd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> hash&lt;string&gt;() (sd. <span class="built_in">isbn</span>()) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">eqOp</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs， <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> lhs.<span class="built_in">isbn</span>() == rhs.<span class="built_in">isbn</span>() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> SD_multiset = unordered multiset&lt;Sales_data,</span><br><span class="line">					<span class="keyword">decltype</span>(hasher)*, <span class="keyword">decltype</span>(eqOp)*&gt;;</span><br><span class="line"><span class="comment">//参数是桶大小、哈希函数指针和相等性判断运算符指针</span></span><br><span class="line"><span class="function">SD_multiset <span class="title">bookstore</span><span class="params">(<span class="number">42</span>, hasher, eqOp)</span> </span>;</span><br></pre></td></tr></table></figure>

<p>如果类内具有==运算符，可以只重载哈希函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用FooHash生成哈希值; Foo必须有==运算符</span></span><br><span class="line"><span class="function">unordered_set&lt;Foo, <span class="title">decltype</span> <span class="params">(FooHash)</span>*&gt; <span class="title">fooSet</span> <span class="params">(<span class="number">10</span>，FooHash)</span></span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第十章</title>
    <url>/2021/12/17/%E7%AC%AC%E5%8D%81%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>大多数算法定义在头文件algorithm，标准库还在numeric中定义了一些。且一般情况不直接操作容器而是需要一个迭代器指定的范围。</p>
<p>如find：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string val = <span class="string">&quot;a value&quot;</span>; <span class="comment">//我们要查找的值</span></span><br><span class="line"><span class="comment">//此调用在list中查找string元素</span></span><br><span class="line"><span class="keyword">auto</span> result = <span class="built_in">find</span>(lst. <span class="built_in">cbegin</span>()，lst.<span class="built_in">cend</span>()， val) ;</span><br><span class="line"><span class="comment">//类似的，由于指针就像内置数组上的迭代器一样， 我们可以用find在数组中查找值,这里使用到了begin和end:</span></span><br><span class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">27</span>， <span class="number">210</span>，<span class="number">12</span>, <span class="number">47</span>， <span class="number">109</span>， <span class="number">83</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">83</span>;</span><br><span class="line"><span class="keyword">int</span>* result = <span class="built_in">find</span> (<span class="built_in">begin</span>(ia), <span class="built_in">end</span>(ia), val);</span><br><span class="line"><span class="comment">//还可以在子序列中查找，如从ia[1]开始，直至(但不包含) ia[4]的范围内查找元素</span></span><br><span class="line"><span class="keyword">auto</span> result = <span class="built_in">find</span>(ia + <span class="number">1</span>，ia+<span class="number">4</span>，val);</span><br></pre></td></tr></table></figure>

<h4 id="迭代器算法不依赖容器但依赖元素类型"><a href="#迭代器算法不依赖容器但依赖元素类型" class="headerlink" title="迭代器算法不依赖容器但依赖元素类型"></a>迭代器算法不依赖容器但依赖元素类型</h4><p>例如find用元素类型==运算符，例如还会使用到&lt;运算符等，所以需要在使用时确保元素类型定义了该操作，或者自定义操作。</p>
<p><em>算法永远不会改变容器大小（即不会添加或删除元素）</em></p>
<h2 id="初识泛型算法"><a href="#初识泛型算法" class="headerlink" title="初识泛型算法"></a>初识泛型算法</h2><h3 id="只读算法"><a href="#只读算法" class="headerlink" title="只读算法"></a>只读算法</h3><p>意思是：只会读取输入范围不会改变元素。如：find、count、accumulate：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对vec中的元素求和，和的初值是0</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="built_in">accumulate</span> (vec. <span class="built_in">cbegin</span>()，vec.<span class="built_in">cend</span>() ，<span class="number">0</span>);</span><br><span class="line"><span class="comment">//第三个参数类型决定了函数使用的加法运算符及返回值类型</span></span><br></pre></td></tr></table></figure>

<h4 id="算法和元素类型"><a href="#算法和元素类型" class="headerlink" title="算法和元素类型"></a>算法和元素类型</h4><p>accumulate将给定的元素范围加到第三个参数上。所以必须保证容器元素类型能够转换成和的元素类型，且和的类型定义了+操作：<code>string sum = accumulate (v.cbegin()，v.cend() ，string(&quot;&quot;)) ;</code></p>
<p>注意这里必须显示的创建一个string，不可以使用字符串字面值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误: const char*.上没有定义+运算符</span></span><br><span class="line">string sum = <span class="built_in">accumulate</span> (v.<span class="built_in">cbegin</span>()，v.<span class="built_in">cend</span>(), <span class="string">&quot;&quot;</span>) ;</span><br></pre></td></tr></table></figure>

<p><em>对于只读算法，最好只采用cbegin和cend</em></p>
<h4 id="操作两个序列的算法"><a href="#操作两个序列的算法" class="headerlink" title="操作两个序列的算法"></a>操作两个序列的算法</h4><p>equal用于确定是否保存相同的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// roster2中的元素数目应该至少与rosterl一样多</span></span><br><span class="line"><span class="built_in">equal</span> (roster1 .<span class="built_in">cbegin</span>()，rosterl.<span class="built_in">cend</span>() ，roster2. <span class="built_in">cbegin</span>() ) ;</span><br></pre></td></tr></table></figure>

<p>由于使用的是迭代器，所以不同类型的容器可以比较。而且，元素类型也不必一一样，只要我们能用=来比较两个元素类型即可。例如，在此例中，rosterl 可以是vector<string>，而roster2 是list&lt;const char*&gt;。</p>
<p><em>那些只接受一个单一迭代器来表示第二个序列的算法，都假定第二个序列至少与第一个序列一样长。</em></p>
<h3 id="写容器元素的算法"><a href="#写容器元素的算法" class="headerlink" title="写容器元素的算法"></a>写容器元素的算法</h3><p>-些算法将新值赋予序列中的元素。当我们使用这类算法时，必须注意确保序列原大小至少不小于我们要求算法写入的元素数目。记住，算法不会执行容器操作，因此它们自身不可能改变容器的大小。一些算法会自己向输入范围写入元素。这些算法本质上并不危险，它们最多写入与给定序列一样多的元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fill</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span> ( ),<span class="number">0</span>);<span class="comment">//将每个元素重置为0</span></span><br><span class="line"><span class="comment">//将容器的一个子序列设置为10</span></span><br><span class="line"><span class="built_in">fill</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">begin</span> () + vec.<span class="built_in">size</span> ()/<span class="number">2</span>，<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><strong>关键概念：迭代器参数</strong><br>        一些算法从两个序列中读取元素。构成这两个序列的元素可以来自于不同类型的容器。例如,第一个序列可能保存于一个vector中,而第二个序列可能保存于一个list.deque、内置数组或其他容器中。而且，两个序列中元素的类型也不要求严格匹配。算法要求的只是能够比较两个序列中的元素。例如，对equal算法，元素类型不要求相同,但是我们必须能使用一来比较来自两个序列中的元素。<br>        操作两个序列的算法之间的区别在于我们如何传递第二个序列。一些算法，例如equal，接受三个迭代器:前两个表示第一个序列的范围，第三个表示第二个序列中的首元素。其他算法接受四个迭代器:前两个表示第一个序列的元素范围，后两个表示第二个序列的范围。<br>        用一个单一迭代器表示第二个序列的算法都假定第二个序列至少与第一个一样长。确保算法不会试图访问第二个序列中不存在的元素是程序员的责任。例如,算法 equal会将其第一个序列中的每个元素与第二个序列中的对应元素进行比较。如果第二个序列是第一个序列的一个子集,则程序会产生一个严重错误———equal会试图访问第二个序列中末尾之后（不存在）的元素。</p>
<h4 id="算法不检查写操作"><a href="#算法不检查写操作" class="headerlink" title="算法不检查写操作"></a>算法不检查写操作</h4><p>一些算法接受一个迭代器来指出一个单独的目的位置。这些算法将新值赋予一个序列中的元素，该序列从目的位置迭代器指向的元素开始。例如，函数fill_n：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec; <span class="comment">//空vector</span></span><br><span class="line"><span class="comment">//使用vec，赋予它不同值</span></span><br><span class="line"><span class="built_in">fill_n</span>(vec.<span class="built_in">begin</span> (), vec.<span class="built_in">size</span> ( ),<span class="number">0</span>);<span class="comment">//将所有元素重置为0</span></span><br><span class="line"><span class="comment">//函数fill_n假定写入指定个元素是安全的。即，如下形式的调用</span></span><br><span class="line"><span class="built_in">fill_n</span>(dest, n, val);</span><br><span class="line"><span class="comment">//一定要保证写入后大小不能超过容器大小，因为它不会重新开辟空间</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec; <span class="comment">//空向量</span></span><br><span class="line"><span class="comment">//灾难:修改vec中的10个（不存在）元素fill_n (vec.begin (),10,0);</span></span><br></pre></td></tr></table></figure>

<h4 id="back-inserter"><a href="#back-inserter" class="headerlink" title="back_inserter"></a>back_inserter</h4><p>头文件为iterator，它接受一个引用，返回一个与容器绑定的插入迭代器，当通过此迭代器赋值会调用push_back插入给定元素：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec; <span class="comment">// 空向量</span></span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">back_inserter</span>(vec);<span class="comment">//通过它赋值会将元素添加到vec中</span></span><br><span class="line">*it = <span class="number">42</span>; <span class="comment">// vec中现在有一个元素，值为42</span></span><br><span class="line"><span class="comment">//我们常常使用back_inserter来创建一个迭代器，作为算法的目的位置来使用。例如:</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec; <span class="comment">//空向量</span></span><br><span class="line"><span class="comment">//正确:back_inserter创建一个插入迭代器，可用来向vec添加元素</span></span><br><span class="line"><span class="built_in">fill_n</span>(<span class="built_in">back_inserter</span>(vec)，<span class="number">10</span>，<span class="number">0</span>); <span class="comment">//添加10个元素到vec</span></span><br></pre></td></tr></table></figure>

<p>由于每次赋值都会使用push_back，所以可以添加元素。</p>
<h3 id="重排容器元素"><a href="#重排容器元素" class="headerlink" title="重排容器元素"></a>重排容器元素</h3><p>先看一段代码，用于消除重复的元素：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimDups</span> <span class="params">(vector&lt;string&gt; &amp;words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//按字典序排序words，以便查找重复单词</span></span><br><span class="line">	<span class="built_in">sort</span> (words .<span class="built_in">begin</span>()，words.<span class="built_in">end</span>() ) ;</span><br><span class="line">	<span class="comment">//unique 重排输入范围，使得每个单词只出现一次</span></span><br><span class="line">	<span class="comment">//排列在范围的前部，返回指向不重复区域之后一个位置的迭代器</span></span><br><span class="line">	<span class="keyword">auto</span> end_ _unique = <span class="built_in">unique</span> (words .<span class="built_in">begin</span>()，words.<span class="built_in">end</span>()) ;</span><br><span class="line">	<span class="comment">//使用向量操作erase删除重复单词</span></span><br><span class="line">	words. <span class="built_in">erase</span> (end_ _unique, words.<span class="built_in">end</span>()) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里首先使用sort进行排序，这里使用的是string中的&lt;成员，这样相同的元素就会相邻，然后使用unique算法“删除”重复元素，还记得其实我们并不能真的删除容器中的元素，它只是将将重复元素覆盖，然后返回一个“删除”后容器的end位置，所以最后一句代码用erase真正的删除掉它们。</p>
<p><img src="https://s2.loli.net/2022/01/07/vhb7z2WRIF15B4K.png" alt="image.png"></p>
<p><lable style = "color : red">标准库算法对迭代器而不是容器进行操作。因此，算法不能(直接)添加或删除元素。</lable></p>
<h2 id="定制操作"><a href="#定制操作" class="headerlink" title="定制操作"></a>定制操作</h2><p>很多算法允许我们自定义元素的运算符，如sort中的&lt;。</p>
<h3 id="向算法传递函数"><a href="#向算法传递函数" class="headerlink" title="向算法传递函数"></a>向算法传递函数</h3><p>如果希望排序是按照单词长度排序，可添加一个参数，称<strong>谓词</strong></p>
<h4 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h4><p>谓词是一个可调用的表达式，其返回结果是一个能用作条件的值。标准库算法所使用的谓词分为两类: 一元谓词(unary predicate， 意味着它们只接受单一参数)和二元谓词( binary predicate， 意味着它们有两个参数)。接受谓词参数的算法对输入序列中的元素调用谓词。因此，元素类型必须能转换为谓词的参数类型，这里就是用它来代替&lt;来比较参数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较函数，用来按长度排序单词</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isShorter</span> <span class="params">(<span class="keyword">const</span> string &amp;s1， <span class="keyword">const</span> string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sl.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>() ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按长度由短至长排序words</span></span><br><span class="line"><span class="built_in">sort</span> (words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), isShorter);</span><br></pre></td></tr></table></figure>

<p>如果还希望当长度相等时，按字典排序：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">elimDups</span> (words); <span class="comment">// 将words按字典序重排，并消除重复单词</span></span><br><span class="line"><span class="comment">//按长度重新排序，长度相同的单词维持字典序</span></span><br><span class="line"><span class="function">stable_ <span class="title">sort</span> <span class="params">(words .begin()，words.end() ，isShorter)</span> </span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;s : words) <span class="comment">// 无须拷贝字符串</span></span><br><span class="line">	cout &lt;&lt; s &lt;&lt;”<span class="string">&quot;; //打印每个元素，以空格分隔</span></span><br><span class="line"><span class="string">cout &lt;&lt; endl;</span></span><br></pre></td></tr></table></figure>

<h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>求大于等于一个给定长度的单词有多少，框架如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies</span> <span class="params">(vector&lt;string&gt; &amp;words, vector&lt;string&gt;::size_ type sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">elimDups</span> (words); <span class="comment">// 将words按字典序排序，删除重复单词.</span></span><br><span class="line">	<span class="comment">//按长度排序， 长度相同的单词维持字 典序</span></span><br><span class="line">	<span class="function">stable_ <span class="title">sort</span> <span class="params">(words .begin(), words.end(), isShorter)</span> </span>;</span><br><span class="line">	<span class="comment">//获取一个迭代器，指向第一个满足size()&gt;= sz的元素</span></span><br><span class="line">	<span class="comment">//计算满足size &gt;= sz的元素的数目</span></span><br><span class="line">	<span class="comment">//打印长度大于等于给定值的单词，每个单词后面接一个空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用find_if算法来查找特定大小的元素，第三个参数为谓词，它将对每个元素使用谓词，返回第一个使谓词返回非0值的元素。不存在返回尾迭代器。</p>
<p>我们的想法是编写一个接受string和长度两个参数返回bool值， 表示string长度是否大于给定长度，但find_if值接受一元谓词，所以使用lambda表达式</p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>与任何函数类似，一个 lambda具有一个返回类型、一个参数列表和一个函数体。但与函数不同，lambda可能定义在函数内部。一个lambda表达式具有如下形式：<br><code>[ capture list ] (parameter list) -&gt; return type &#123; function body &#125;</code><br>其中，capture list（捕获列表）是一个lambda所在函数中定义的局部变量的列表（通常为空);return type、parameter list和 function body与任何普通函数一样，分别表示返回类型、参数列表和函数体。但是，与普通函数不同，lambda必须使用尾置返回来指定返回类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> f = []&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">f</span>() &lt;&lt; endl; 		<span class="comment">//打印42</span></span><br></pre></td></tr></table></figure>

<p>如果 lambda的函数体包含任何单一return语句之外的内容，且未指定返回类型,则返回void。</p>
<h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><p>lambda不能有默认参数，所以实参形参数目必须相等且匹配，编写一个isShorter类型的lambda：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[](<span class="keyword">const</span> string &amp;a, <span class="keyword">const</span> string &amp;b)</span><br><span class="line">&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>()&lt;b.<span class="built_in">size</span> ();&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按长度排序，长度相同的单词维持字典序</span></span><br><span class="line"><span class="built_in">stable_sort</span> (words.<span class="built_in">begin</span> ( ), words.<span class="built_in">end</span> () , </span><br><span class="line">             	[](<span class="keyword">const</span> string &amp;a,<span class="keyword">const</span> string &amp;b)</span><br><span class="line">					&#123; <span class="keyword">return</span> a.<span class="built_in">size</span> () &lt; b.<span class="built_in">size</span>();&#125;);</span><br></pre></td></tr></table></figure>

<p>当比较元素长度，就会使用lambda。</p>
<h4 id="使用捕获列表"><a href="#使用捕获列表" class="headerlink" title="使用捕获列表"></a>使用捕获列表</h4><p>在例子中，我们需要捕获用户传进来的边界长度用来查找：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[sz] (<span class="keyword">const</span> string &amp;a) &#123; <span class="keyword">return</span> a.<span class="built_in">size</span>() &gt;= SZ; &#125;</span><br></pre></td></tr></table></figure>

<p>捕获了sz，所以我们才可以使用它，没有捕获的不可以使用。</p>
<p><em>一个lambda只有在其捕获列表中捕获一个它所在函数中的局部变量,才能在函数体中使用该变量。</em></p>
<h4 id="调用find-if"><a href="#调用find-if" class="headerlink" title="调用find_if"></a>调用find_if</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取一个迭代器，指向第一个满足size () &gt;= sz的元素</span></span><br><span class="line"><span class="keyword">auto</span> wc = <span class="built_in">find_if</span>(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span> () ,</span><br><span class="line">					[sz] (<span class="keyword">const</span> string &amp;a)</span><br><span class="line">						&#123; <span class="keyword">return</span> a.<span class="built_in">size</span>() &gt;=sz; &#125;);</span><br><span class="line"><span class="keyword">auto</span> count = words.<span class="built_in">end</span>() - wc;  <span class="comment">//它表示size &gt;= sz 元素的数目</span></span><br></pre></td></tr></table></figure>

<h4 id="for-each算法"><a href="#for-each算法" class="headerlink" title="for_each算法"></a>for_each算法</h4><p>我们还可以打印出&gt;给定长度的单词：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印长度大于等于给定值的单词，每个单词后面接一个空格</span></span><br><span class="line">for_each(wc, words.<span class="built_in">end</span> (), [] (<span class="keyword">const</span> string &amp;s ) &#123; cout &lt;&lt; s &lt;&lt;<span class="string">&quot; &quot;</span>; &#125;);</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p><em>捕获列表只用于局部非static变量，lambda可以直接使用局部static变量和在它所在函数之外声明的名字</em>，所以可以使用cout。</p>
<h4 id="完成程序"><a href="#完成程序" class="headerlink" title="完成程序"></a>完成程序</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies</span><span class="params">(vector&lt;string&gt; &amp;words, vector&lt;string&gt;::size_type sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">elimDups</span> (words);<span class="comment">// 将words按字典序排序，删除重复单词</span></span><br><span class="line">	<span class="comment">//按长度排序，长度相同的单词维持字典序</span></span><br><span class="line">	<span class="built_in">stable_sort</span> (words.<span class="built_in">begin</span> (), words.<span class="built_in">end</span>(), [](<span class="keyword">const</span> string &amp;a, <span class="keyword">const</span> string &amp;b)</span><br><span class="line">												&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>();&#125;);</span><br><span class="line">	<span class="comment">//获取一个迭代器，指向第一个满足size () &gt;= sz的元素</span></span><br><span class="line">	<span class="keyword">auto</span> wc = <span class="built_in">find_if</span> (words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span> (), [sz] (<span class="keyword">const</span> string &amp;a)</span><br><span class="line">													&#123; <span class="keyword">return</span> a.<span class="built_in">size</span> () &gt;=sz; &#125;);</span><br><span class="line">	<span class="comment">//计算满足size &gt;= sz的元素的数目</span></span><br><span class="line">	<span class="keyword">auto</span> count = words.<span class="built_in">end</span>() - wc;</span><br><span class="line">	cout &lt;&lt; count &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">make_plural</span>(count, <span class="string">&quot;word&quot;</span>, <span class="string">&quot;s&quot;</span>)</span><br><span class="line">		 &lt;&lt;<span class="string">&quot; of length &quot;</span> &lt;&lt;sz&lt;&lt;<span class="string">&quot; or longer&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//打印长度大于等于给定值的单词，每个单词后面接一个空格</span></span><br><span class="line">	for_each (wc, words.<span class="built_in">end</span>(), [] (<span class="keyword">const</span> string &amp;s) &#123;cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;&#125;);</span><br><span class="line">	cout &lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="lambda捕获和返回"><a href="#lambda捕获和返回" class="headerlink" title="lambda捕获和返回"></a>lambda捕获和返回</h3><p>当定义一个lambda时，编译器生成一个与lambda对应的新的（未命名的）类类型。目前，可以这样理解，它就是一个未命名的类类型的对象，捕获列表里是他的数据成员，使用auto定义一个lambda初始值变量时，就定义了一个从lambda生成的类型的对象。</p>
<h4 id="值捕获与引用捕获"><a href="#值捕获与引用捕获" class="headerlink" title="值捕获与引用捕获"></a>值捕获与引用捕获</h4><p>类似参数传递，变量的捕获方式也可以是值或引用。到目前为止，我们的 lambda采用值捕获的方式。与传值参数类似，采用值捕获的前提是变量可以拷贝。与参数不同，被捕获的变量的值是在 lambda创建时拷贝，而不是调用时拷贝:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcn1</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> v1 </span>=<span class="number">42</span>;		<span class="comment">//局部变量</span></span><br><span class="line"><span class="comment">//将v1拷贝到名为f的可调用对象</span></span><br><span class="line"><span class="keyword">auto</span> f =[v1] &#123; <span class="keyword">return</span> vl; &#125;;</span><br><span class="line">v1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> j = <span class="built_in">f</span>(); 		<span class="comment">//j为42;f保存了我们创建它时v1的拷贝</span></span><br></pre></td></tr></table></figure>

<p>采用引用则改变该值会同时改变：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcn2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> v1 = <span class="number">42</span>; 	<span class="comment">//局部变量</span></span><br><span class="line"><span class="comment">//对象2包含v1的引用</span></span><br><span class="line"><span class="keyword">auto</span> f2 =[ &amp;v1] &#123; <span class="keyword">return</span> vl; &#125;;</span><br><span class="line">v1 = <span class="number">0</span>;</span><br><span class="line">autoj = <span class="built_in">f2</span>();		<span class="comment">//j为0;f2保存v1的引用，而非拷贝</span></span><br></pre></td></tr></table></figure>

<p><strong>但捕获引用返回引用有一个问题是，必须保证使用lambda时该引用对象存在</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies</span><span class="params">(vector&lt;string&gt; &amp;words, vector&lt;string&gt;::size_type sz, </span></span></span><br><span class="line"><span class="params"><span class="function">             ostream &amp;os= cout,<span class="keyword">char</span> c = <span class="string">&#x27; &#x27;</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//与之前例子一样的重排words的代码</span></span><br><span class="line"><span class="comment">//打印count的语句改为打印到os</span></span><br><span class="line">	for_each (words.<span class="built_in">begin</span> (), words.<span class="built_in">end</span> ( ), [ &amp;os,c] (<span class="keyword">const</span> string &amp;s)&#123; os &lt;&lt; s&lt;&lt; c; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于我们不能拷贝ostream对象，所以拷贝os的唯一方式就时捕获引用（或指向os的指针）</p>
<p>我们可以从函数返回lambda，但该lambda不能捕获引用，因为局部变量消失会使lambda数据成员不可用。</p>
<p><strong>我们应尽量减少引用或指针捕获</strong></p>
<h4 id="隐式捕获"><a href="#隐式捕获" class="headerlink" title="隐式捕获"></a>隐式捕获</h4><p>使用=（值捕获）&amp;（引用捕获）告诉编译器接下来我要使用的变量都采用该捕获方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sz为隐式捕获，值捕获方式</span></span><br><span class="line">wc = <span class="built_in">find_if</span> (words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), </span><br><span class="line">				[=](<span class="keyword">const</span> string &amp;s) &#123;<span class="keyword">return</span> s.<span class="built_in">size</span>() &gt;= sz; &#125;);</span><br></pre></td></tr></table></figure>

<p>也可以一部分值捕获，一部分引用捕获：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// os隐式捕获，引用捕获方式;c显式捕获，值捕获方式</span></span><br><span class="line">for_each ( words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), [&amp;, c](<span class="keyword">const</span> string &amp;s)&#123; os&lt;&lt; s&lt;&lt; c; &#125;);</span><br><span class="line"><span class="comment">// os显式捕获，引用捕获方式;c隐式捕获，值捕获方式</span></span><br><span class="line">for_each (words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), [=, &amp;os](<span class="keyword">const</span> string &amp;s)&#123; os &lt;&lt; s &lt;&lt; c; &#125;);</span><br></pre></td></tr></table></figure>

<p>混合捕获必须把默认捕获方式写在前面（只能是=或者&amp;），且显示捕获方式必须与默认不同。</p>
<p><img src="https://s2.loli.net/2022/01/08/7BAaoqwuH65Lks4.png" alt="image.png"></p>
<h4 id="可变lambda"><a href="#可变lambda" class="headerlink" title="可变lambda"></a>可变lambda</h4><p>默认情况是如果一个lambda包含除return以外的任何语句，则假定此lambda返回void，则不能返回值，这里使用位置返回类型来返回：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">transform</span> (vi.<span class="built_in">begin</span>(), vi.<span class="built_in">end</span>(), vi.<span class="built_in">begin</span>(), </span><br><span class="line">			[](<span class="keyword">int</span> i)-&gt;<span class="keyword">int</span> &#123; <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> -i; <span class="keyword">else</span> <span class="keyword">return</span> i; &#125;);</span><br></pre></td></tr></table></figure>

<p>transform接受一对迭代器范围，和一个目的地，将由第四个参数调用后放入目的地。</p>
<h3 id="参数绑定bind（跳过）"><a href="#参数绑定bind（跳过）" class="headerlink" title="参数绑定bind（跳过）"></a>参数绑定bind（跳过）</h3><p>对于只在一两个地方用到的简单操作可以使用lambda，而很多地方，且操作更多，我们应该使用函数。</p>
<h2 id="再探迭代器"><a href="#再探迭代器" class="headerlink" title="再探迭代器"></a>再探迭代器</h2><ul>
<li>插入迭代器（insert iterator):这些迭代器被绑定到一个容器上，可用来向容器插入元素。</li>
<li>流迭代器(stream iterator):这些迭代器被绑定到输入或输出流上，可用来遍历所关联的IO流。</li>
<li>反向迭代器( reverse iterator ):这些迭代器向后而不是向前移动。除了forward_list之外的标准库容器都有反向迭代器。</li>
<li>移动迭代器（move iterator):这些专用的迭代器不是拷贝其中的元素，而是移动它们。</li>
</ul>
<h3 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h3><p>it=t                                在it指定的当前位置插入值t。假定c是it绑定的容器，依赖于插入迭代器的不同种类，此赋值会分别调用c.push_back(t) 、c.push_front(t)或c.insert (t,p)，其中p 为传递给inserter的迭代器位置</p>
<p>*it,++it,it++                  这些操作虽然存在，但不会对it做任何事情。每个操作都返回it插入器有三种类型。</p>
<p>差异在于元素插入的位置:</p>
<ul>
<li><strong>back_inserter</strong>创建一个使用push_back的迭代器。</li>
<li><strong>front inserter</strong>创建一个使用push_front的迭代器。</li>
<li><strong>inserter</strong>创建一个使用insert的迭代器。此函数接受第二个参数，这个参数必须是一个指向给定容器的迭代器。元素将被插入到给定迭代器所表示的元素之前。</li>
</ul>
<p><strong>插入迭代器还是基于容器自身的push操作，所以必须确保有该操作才可以使用对应的插入迭代器。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">*it = val;</span><br><span class="line"><span class="comment">//其效果与下面代码一样</span></span><br><span class="line">it = c.<span class="built_in">insert</span>(it, val) ; <span class="comment">// it指向新加入的元素</span></span><br><span class="line">++it; <span class="comment">//递增it使它指向原来的元素</span></span><br></pre></td></tr></table></figure>

<p>front_inserter生成的迭代器的行为与inserter生成的迭代器完全不一样。当我们使用front_inserter时，元素总是插入到容器第一个元素之前。即使我们传递给inserter的位置原来指向第一个元素，只要我们在此元素之前插入一个新元素，此元素就不再是容器的首元素了:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="keyword">int</span>&gt; lst = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line">list&lt;<span class="keyword">int</span>&gt; lst2,lst3; 		<span class="comment">//空list</span></span><br><span class="line"><span class="comment">//拷贝完成之后，lst2包含4 3 2 1</span></span><br><span class="line"><span class="built_in">copy</span>(lst.<span class="built_in">cbegin</span> (), lst.<span class="built_in">cend</span>(), <span class="built_in">front_inserter</span> (lst2 ) ) ;</span><br><span class="line"><span class="comment">//拷贝完成之后，lst3包含1 2 3 4</span></span><br><span class="line"><span class="built_in">copy</span> (lst.<span class="built_in">cbegin</span>(), lst.<span class="built_in">cend</span>( ), <span class="built_in">inserter</span>(lst3,lst3.<span class="built_in">begin</span> () ) );</span><br></pre></td></tr></table></figure>

<h3 id="iostream迭代器（跳过）"><a href="#iostream迭代器（跳过）" class="headerlink" title="iostream迭代器（跳过）"></a>iostream迭代器（跳过）</h3><h3 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a>反向迭代器</h3><p>反向迭代器就是在容器中从尾元素向首元素反向移动的迭代器。对于反向迭代器，递增（以及递减）操作的含义会颠倒过来。递增一个反向迭代器（++it）会移动到前一个元素;递减一个迭代器（–it）会移动到下一个元素。</p>
<p>除了forward_list之外,其他容器都支持反向迭代器。我们可以通过调用rbegin、rend、crbegin 和 crend 成员函数来获得反向迭代器。这些成员函数返回指向容器尾元素和首元素之前一个位置的迭代器。与普通迭代器一样，反向迭代器也有 const和非const版本。</p>
<p><img src="https://s2.loli.net/2022/01/08/bPTIpokLXinHvE7.png" alt="image.png"></p>
<p>一些应用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> (vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()); <span class="comment">//按“正常序”排序vec</span></span><br><span class="line"><span class="comment">//按逆序排序:将最小元素放在vec的末尾</span></span><br><span class="line"><span class="built_in">sort</span> (vec.<span class="built_in">rbegin</span> () , vec.<span class="built_in">rend</span> () );</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在一个逗号分隔的列表中查找第一个元素</span></span><br><span class="line"><span class="keyword">auto</span> comma = <span class="built_in">find</span> (line.<span class="built_in">cbegin</span>(), line.<span class="built_in">cend</span>(), <span class="string">&#x27;,&#x27;</span> );</span><br><span class="line">cout &lt;&lt; <span class="built_in">string</span> (line.<span class="built_in">cbegin</span>() , comma) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//在一个逗号分隔的列表中查找最后一个元素</span></span><br><span class="line"><span class="keyword">auto</span> rcomma = <span class="built_in">find</span>(line.<span class="built_in">crbegin</span>(), line.<span class="built_in">crend</span>(), <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"><span class="comment">//错误:将逆序输出单词的字符</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">string</span>(line.<span class="built_in">crbegin</span>() , rcomma) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//正确:得到一个正向迭代器，从逗号开始读取字符直到line末尾</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">string</span>(rcomma.<span class="built_in">base</span>(), line.<span class="built_in">cend</span>()) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p>base函数将反向迭代器转换为正向迭代器。</p>
<h2 id="泛型算法结构"><a href="#泛型算法结构" class="headerlink" title="泛型算法结构"></a>泛型算法结构</h2><p>算法所要求的迭代器可分为五类：</p>
<p><img src="https://s2.loli.net/2022/01/08/GiylQKPXBUwf1kH.png" alt="image.png"></p>
<h3 id="5类迭代器"><a href="#5类迭代器" class="headerlink" title="5类迭代器"></a>5类迭代器</h3><p>输出迭代器之外，一个高层类别的迭代器支持底层类别迭代器的所有操作。</p>
<h4 id="输入迭代器"><a href="#输入迭代器" class="headerlink" title="输入迭代器"></a>输入迭代器</h4><p>他可以读取序列中的元素，必须支持：</p>
<ul>
<li>用于比较两个迭代器的相等和不相等运算符（ =一、!=)</li>
<li>用于推进迭代器的前置和后置递增运算(++)</li>
<li>用于读取元素的解引用运算符（<code>*</code>);解引用只会出现在赋值运算符的右侧</li>
<li>箭头运算符(-&gt;)，等价于(*it) .member，即，解引用迭代器，并提取对象的成员</li>
</ul>
<p>输入迭代器只用于顺序访问。对于一个输入迭代器，<code>*it++</code>保证是有效的，但递增它可能导致所有其他指向流的迭代器失效。其结果就是，不能保证输入迭代器的状态可以保存下来并用来访问元素。因此,输入迭代器只能用于单遍扫描算法。算法find和 accumulate要求输入迭代器;而istream_iterator是一种输入迭代器。</p>
<h4 id="输出迭代器"><a href="#输出迭代器" class="headerlink" title="输出迭代器"></a>输出迭代器</h4><p>可以看作输入迭代器功能上的补集——只写而不读元素。输出迭代器必须支持</p>
<ul>
<li>用于推进迭代器的前置和后置递增运算（++)</li>
<li>解引用运算符(*)，只出现在赋值运算符的左侧(向一个已经解引用的输出迭代器赋值，就是将值写入它所指向的元素)</li>
</ul>
<p>我们只能向一个输出迭代器赋值一次。类似输入迭代器，输出迭代器只能用于单遍扫描算法。用作目的位置的迭代器通常都是输出迭代器。例如，copy函数的第三个参数就是输出迭代器。ostream_iterator类型也是输出迭代器。</p>
<h4 id="前向迭代器"><a href="#前向迭代器" class="headerlink" title="前向迭代器"></a>前向迭代器</h4><p>可以读写元素。这类迭代器只能在序列中沿一个方向移动。前向迭代器支持所有输入和输出迭代器的操作，而且可以多次读写同一个元素。因此，我们可以保存前向迭代器的状态，使用前向迭代器的算法可以对序列进行多遍扫描。算法replace要求前向迭代器，forward_list上的迭代器是前向迭代器。</p>
<h4 id="双向迭代器"><a href="#双向迭代器" class="headerlink" title="双向迭代器"></a>双向迭代器</h4><p>可以正向/反向读写序列中的元素。除了支持所有前向迭代器的操作之外，双向迭代器还支持前置和后置递减运算符(–)。算法 reverse要求双向迭代器，除了forward_list之外，其他标准库都提供符合双向迭代器要求的迭代器。</p>
<h4 id="随机访问迭代器"><a href="#随机访问迭代器" class="headerlink" title="随机访问迭代器"></a>随机访问迭代器</h4><p>提供在常量时间内访问序列中任意元素的能力。此类迭代器支持双向迭代器的所有功能</p>
<ul>
<li>用于比较两个迭代器相对位置的关系运算符(&lt;、&lt;=、&gt;和&gt;=)</li>
<li>迭代器和一个整数值的加减运算(+、+=、-和-=)，计算结果是迭代器在序列中前进（或后退）给定整数个元素后的位置</li>
<li>用于两个迭代器上的减法运算符(-)，得到两个迭代器的距离</li>
<li>下标运算符(iter[n] )，与* (iter [n])等价</li>
</ul>
<p>算法sort要求随机访问迭代器。array、deque、string和 vector的迭代器都是随机访问迭代器，用于访问内置数组元素的指针也是。</p>
<h3 id="算法形参模式"><a href="#算法形参模式" class="headerlink" title="算法形参模式"></a>算法形参模式</h3><p>alg ( beg, end, other args) ;</p>
<p>alg ( beg, end, dest, other args ) ;</p>
<p>alg (beg, end, beg2, other args) ;</p>
<p>alg(beg, end, beg2, end2, other args) ;</p>
<p>alg为算法名字，beg和end表示范围，dest为目的地，arg为算法。此外还有一些算法接受额外非迭代器参数。</p>
<h4 id="接受单个目标迭代器的算法·"><a href="#接受单个目标迭代器的算法·" class="headerlink" title="接受单个目标迭代器的算法·"></a>接受单个目标迭代器的算法·</h4><p>dest参数是一个表示算法可以写入的目的位置的迭代器。算法假定( assume):按其需要写入数据，不管写入多少个元素都是安全的。</p>
<p><strong>向输出迭代器写入数据的算法都假定目标空间足够容纳写入的数据。</strong></p>
<p>常见情况是dest被绑定到一个插入迭代器或ostream_iterator。插入迭代器会将新元素添加到容器中，因而保证空间足够的，ostream_iterator会将数据写入到一个输出流，同样不管要写入多少个元素都没有问题。</p>
<h4 id="接受第二个输入序列的算法"><a href="#接受第二个输入序列的算法" class="headerlink" title="接受第二个输入序列的算法"></a>接受第二个输入序列的算法</h4><p>接受单独的 beg2或是接受beg2和 end2的算法用这些迭代器表示第二个输入范围。这些算法通常使用第二个范围中的元素与第一个输入范围结合来进行一些运算。</p>
<p>如果一个算法接受beg2和 end2，这两个迭代器表示第二个范围。这类算法接受两个完整指定的范围:[beg,end)表示的范围和[ beg2 end2)表示的第二个范围。</p>
<p>只接受单独的 beg2(不接受end2)的算法将beg2作为第二个输入范围中的首元素。此范围的结束位置未指定，这些算法假定从beg2开始的范围与 beg和 end所表示的范围至少一样大。</p>
<h3 id="算法命名规范"><a href="#算法命名规范" class="headerlink" title="算法命名规范"></a>算法命名规范</h3><h4 id="一些算法使用重载形式传递一个谓词"><a href="#一些算法使用重载形式传递一个谓词" class="headerlink" title="一些算法使用重载形式传递一个谓词"></a>一些算法使用重载形式传递一个谓词</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unique</span> (beg, end);					<span class="comment">//使用==运算符比较元素</span></span><br><span class="line"><span class="built_in">unique</span> (beg, end,comp) ;			<span class="comment">//使用comp比较元素</span></span><br></pre></td></tr></table></figure>

<h4 id="if版本算法"><a href="#if版本算法" class="headerlink" title="_if版本算法"></a>_if版本算法</h4><p>接受元素值的算法有一个不同名的版本，使用谓词代替元素值，接受谓词参数版本需要加_if:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> (beg, end,val) ;					<span class="comment">//查找输入范围中val第一次出现的位置</span></span><br><span class="line"><span class="built_in">find_if</span> (beg, end,pred);				<span class="comment">//查找第一个令pred为真的元素</span></span><br></pre></td></tr></table></figure>

<p>他们狗接受三个参数，因此不是重载。</p>
<h4 id="拷贝与非拷贝版本"><a href="#拷贝与非拷贝版本" class="headerlink" title="拷贝与非拷贝版本"></a>拷贝与非拷贝版本</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(beg, end);					<span class="comment">//反转输入范围中元素的顺序</span></span><br><span class="line"><span class="built_in">reverse_copy</span>(beg, end, dest);		<span class="comment">//将元素按逆序拷贝到dest</span></span><br><span class="line"><span class="comment">//一些算法同时提供_copy和_if版本。这些版本接受一个目的位置迭代器和一个谓词;</span></span><br><span class="line"><span class="comment">//从v1中删除奇数元素</span></span><br><span class="line"><span class="built_in">remove_if</span>(v1.<span class="built_in">begin</span> (), v1.<span class="built_in">end</span>(), [](<span class="keyword">int</span> i)&#123; <span class="keyword">return</span> i % <span class="number">2</span>;&#125;);</span><br><span class="line"><span class="comment">//将偶数元素从v1拷贝到v2;v1不变</span></span><br><span class="line"><span class="built_in">remove_copy_if</span>(vl.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), <span class="built_in">back_inserter</span>(v2), [](<span class="keyword">int</span> i)&#123; <span class="keyword">return</span> i % <span class="number">2</span>;&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="特定容器算法"><a href="#特定容器算法" class="headerlink" title="特定容器算法"></a>特定容器算法</h2><p>因为如sort等一些通用算法要求随机访问迭代器，而list和forward_list提供的是前向和双向迭代器，所以只能使用他们自己的成员函数算法</p>
<p><img src="https://s2.loli.net/2022/01/10/nyAfgr754sZDp6z.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/01/10/OkMS3sjpB4qulDQ.png" alt="image.png"></p>
<p>链表还有一些splice算法，这些是链表独有的：</p>
<p><img src="https://s2.loli.net/2022/01/10/T5Bien73wkgCNlG.png" alt="image.png"></p>
<h4 id="特有的操作会改变容器"><a href="#特有的操作会改变容器" class="headerlink" title="特有的操作会改变容器"></a>特有的操作会改变容器</h4><p>多数链表特有的算法都与其通用版本很相似，但不完全相同。链表特有版本与通用版本间的一个至关重要的区别是链表版本会改变底层的容器。例如，remove的链表版本会删除指定的元素，非链表版本并不会真正删除，而是覆盖，unique的链表版本会删除第二个和后继的重复元素，非链表也是覆盖。</p>
<p>类似的，merge和splice会销毁其参数。例如，通用版本的merge将合并的序列写到一个给定的目的迭代器;两个输入序列是不变的。而链表版本的merge函数会销毁给定的链表——元素从参数指定的链表中删除，被合并到调用merge的链表对象中。在merge之后，来自两个链表中的元素仍然存在，但它们都已在同一个链表中。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/15/%E6%96%B0%E5%BB%BA%20Markdown/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>C++ Primer 第九章</title>
    <url>/2021/12/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h1><h2 id="顺序容器概述"><a href="#顺序容器概述" class="headerlink" title="顺序容器概述"></a>顺序容器概述</h2><p>vector                    可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢<br>deque                    双端队列。支持快速随机访问。在头尾位置插入/删除速度很快<br>list                            双向链表。只支持双向顺序访问。在list中任何位置进行插入/删除操作速度都很快<br>forward_list            单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快<br>array                        固定大小数组。支持快速随机访问。不能添加或删除元素<br>string                    与vector相似的容器，但专门用于保存字符。随机访问快。在尾部插入/删除速度快</p>
<h4 id="确定使用那种容器"><a href="#确定使用那种容器" class="headerlink" title="确定使用那种容器"></a>确定使用那种容器</h4><ul>
<li>除非你有很好的理由选择其他容器，否则应使用vector。</li>
<li>如果你的程序有很多小的元素，且空间的额外开销很重要，则不要使用list或forward_list。</li>
<li>如果程序要求随机访问元素，应使用vector或deque。</li>
<li>如果程序要求在容器的中间插入或删除元素，应使用list或forward_list。如果程序需要在头尾位置插入或删除元素，但不会在中间位置进行插入或删除操作，则使用deque。</li>
<li>如果程序只有在读取输入时才需要在容器中间位置插入元素，随后需要随机访问元素，则<ul>
<li>首先，确定是否真的需要在容器中间位置添加元素。当处理输入数据时，通常可以很容易地向vector追加数据，然后再调用标准库的sort函数来重排容器中的元素，从而避免在中间位置添加元素。</li>
<li>如果必须在中间位置插入元素，考虑在输入阶段使用list，一旦输入完成，将list中的内容拷贝到一个vector 中。</li>
</ul>
</li>
</ul>
<p>如果程序兼具插入和访问，那么取决于哪一种操作更多。</p>
<h2 id="容器库概览"><a href="#容器库概览" class="headerlink" title="容器库概览"></a>容器库概览</h2><p>首先定义时需要确定容器中的元素类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">list&lt;sales_data&gt;					<span class="comment">//保存Sales_data对象的list</span></span><br><span class="line">deque&lt;<span class="keyword">double</span>&gt;						<span class="comment">//保存double的deque</span></span><br></pre></td></tr></table></figure>

<h4 id="对容器可以保存的元素类型的限制"><a href="#对容器可以保存的元素类型的限制" class="headerlink" title="对容器可以保存的元素类型的限制"></a>对容器可以保存的元素类型的限制</h4><p>顺序几乎可以保存任意类型的元素，但若类型没有默认构造函数，虚特殊处理：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假定noDefault是一个没有默认构造函数的类型</span></span><br><span class="line"><span class="function">vector&lt;noDefault&gt; <span class="title">v1</span> <span class="params">(<span class="number">10</span>, init)</span></span>;				<span class="comment">//正确:提供了元素初始化器</span></span><br><span class="line"><span class="function">vector&lt;noDefault&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span> </span>;						<span class="comment">//错误:必须提供一个元素初始化器</span></span><br></pre></td></tr></table></figure>

<p><strong>类型别名</strong></p>
<p>iterator                              此容器类型的迭代器类型<br>const_iterator                   可以读取元素，但不能修改元素的迭代器类型<br>size_type                            无符号整数类型，足够保存此种容器类型最大可能容器的大小<br>difference_type                 带符号整数类型，足够保存两个迭代器之间的距离<br>value_type                          元素类型<br>reference                            元素的左值类型;与value_type&amp;含义相同<br>const_reference                 元素的const左值类型(即，const value_type&amp;)</p>
<p><strong>构造函数</strong></p>
<p>c c;                                        默认构造函数，构造空容器（array，参见第301页)<br>c c1(c2);                                构造c2的拷贝c1<br>cc(b,e);                                 构造c，将迭代器b 和e指定的范围内的元素拷贝到c(array不支持）<br>c c{a，b,c…};                        列表初始化c</p>
<p><strong>赋值与swap</strong></p>
<p>c1= c2                                    将c1中的元素替换为c2中元素<br>c1= {a,b,c… }                         将c1中的元素替换为列表中元素（不适用于array)<br>a.swap(b)                              交换a和 b的元素<br>swap(a，b)                           与a.swap(b)等价</p>
<p>**大小 **</p>
<p>c.size ()                                c中元素的数目（不支持forward_list)<br>c.max_size ()                        c可保存的最大元素数目<br>c.empty()                             若c中存储了元素，返回false，否则返回true</p>
<p><strong>添加/删除元素（不适用于array)</strong><br>注:在不同容器中，这些操作的接口都不同</p>
<p>c.insert(args)                        将args 中的元素拷贝进c<br>c.emplace (inits)                使用inits构造c中的一个元素<br>c.erase (args)                        删除args指定的元素<br>c.clear ()                                删除c中的所有元素，返回void</p>
<p><strong>关系运算符</strong></p>
<p>==，!=                                        所有容器都支持相等（不等)运算符<br>&lt;，&lt;=，&gt;，&gt;=                        关系运算符（无序关联容器不支持)</p>
<p><strong>获取迭代器</strong></p>
<p>c.begin () , c.end ()                    返回指向c的首元素和尾元素之后位置的迭代器<br>c.cbegin(), c.cend ()                    返回const iterator</p>
<p><strong>反向容器的额外成员（不支持forward_list)</strong></p>
<p>reverse_iterator                        按逆序寻址元素的迭代器<br>const_reverse_iterator            不能修改元素的逆序迭代器<br>c.rbegin () , c.rend ()                    返回指向c的尾元素和首元素之前位置的迭代器<br>c.crbegin (), c.crend ()                返回const_reverse_iterator</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>一个迭代器范围有一对迭代器表示，通常是begin和end，[begin, end)。</p>
<p>他们应指向同一个容器中的元素或这最后一个容器的下一个位置，且begin&lt;=end</p>
<h4 id="左闭右合的范围"><a href="#左闭右合的范围" class="headerlink" title="左闭右合的范围"></a>左闭右合的范围</h4><ul>
<li>如果begin 与 end相等，则范围为空</li>
<li>如果begin与 end不等，则范围至少包含一个元素，且begin指向该范围中的第一个元素</li>
<li>我们可以对 begin递增若干次，使得begin==end</li>
</ul>
<p>使用方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (begin != end)&#123;</span><br><span class="line">	*begin = val; 	<span class="comment">//正确:范围非空，因此begin指向一个元素</span></span><br><span class="line">	++begin;		<span class="comment">//移动迭代器，获取下一个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="容器类型成员"><a href="#容器类型成员" class="headerlink" title="容器类型成员"></a>容器类型成员</h3><p>如果需要元素类型，可以使用容器的value_type。如果需要元素类型的一个引用，可以使用reference或const_reference。这些元素相关的类型别名在泛型编程中非常有用。为了使用这些类型，我们必须显式使用其类名:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iter是通过list&lt;string&gt;定义的一个迭代器类型</span></span><br><span class="line">list&lt;string&gt;::iterator iter;</span><br><span class="line"><span class="comment">// count是通过vector&lt;int&gt;定义的一个difference_type类型</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::difference_type count;</span><br></pre></td></tr></table></figure>

<h3 id="begin和end成员"><a href="#begin和end成员" class="headerlink" title="begin和end成员"></a>begin和end成员</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">list&lt;string&gt; a =&#123; <span class="string">&quot;Milton&quot;</span>,<span class="string">&quot;Shakespeare&quot;</span>,<span class="string">&quot;Austen&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">auto</span> it1 = a.<span class="built_in">begin</span> (); 	<span class="comment">//list&lt;string&gt;::iterator</span></span><br><span class="line"><span class="keyword">auto</span> it2 = a.<span class="built_in">rbegin</span> (); <span class="comment">//list&lt;string&gt;::reverse_iterator</span></span><br><span class="line"><span class="keyword">auto</span> it3 = a.<span class="built_in">cbegin</span> (); <span class="comment">//list&lt;string&gt;::const_iterator</span></span><br><span class="line"><span class="keyword">auto</span> it4 = a.<span class="built_in">crbegin</span>(); <span class="comment">//list&lt;string&gt;::const_reverse_iterator</span></span><br></pre></td></tr></table></figure>

<p>C++新版本可以使用auto来定义类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显式指定类型</span></span><br><span class="line">list&lt;string&gt; : :iterator it5 = a.<span class="built_in">begin</span> () ;</span><br><span class="line">list&lt;string&gt; : :const_iterator it6 = a.<span class="built_in">begin</span> ();</span><br><span class="line"><span class="comment">//是iterator还是const_iterator依赖于a的类型</span></span><br><span class="line"><span class="keyword">auto</span> it7 = a.<span class="built_in">begin</span>();			<span class="comment">//仅当a是const时， it7是const_iterator</span></span><br><span class="line"><span class="keyword">auto</span> it8 = a.<span class="built_in">cbegin</span> (); 		<span class="comment">//it8是const_iterator</span></span><br></pre></td></tr></table></figure>

<p>当auto与begin或end结合使用时，获得的迭代器类型依赖于容器类型，与我们想要如何使用迭代器毫不相干。但以c开头的版本还是可以获得const_iterator的，而不管容器的类型是什么。</p>
<h3 id="容器的定义和初始化"><a href="#容器的定义和初始化" class="headerlink" title="容器的定义和初始化"></a>容器的定义和初始化</h3><p><img src="https://s2.loli.net/2022/01/03/KFyuMGDPxfva76W.png" alt="image.png"></p>
<h3 id="将一个容器初始化为另一个容器的拷贝"><a href="#将一个容器初始化为另一个容器的拷贝" class="headerlink" title="将一个容器初始化为另一个容器的拷贝"></a>将一个容器初始化为另一个容器的拷贝</h3><p>拷贝时容器类型及元素类型必须匹配。使用迭代器拷贝不需要容器类型相同，且元素类型只需要可以类型转换。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每个容器有三个元素，用给定的初始化器进行初始化</span></span><br><span class="line">list&lt;string&gt; authors = ( <span class="string">&quot;Milton&quot;</span>，<span class="string">&quot;Shakespeare&quot;</span>， <span class="string">&quot;Austen&quot;</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt; articles = &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">list&lt;string&gt; <span class="built_in">list2</span>(authors) ;							<span class="comment">//正确:类型匹配</span></span><br><span class="line">deque&lt;string&gt; <span class="built_in">authList</span> (authors); 						<span class="comment">//错误:容器类型不匹配</span></span><br><span class="line">vector&lt;string&gt; <span class="built_in">words</span>(articles); 						<span class="comment">//错误:容器类型必须匹配</span></span><br><span class="line"><span class="comment">//正确:可以将const char*元素转换为string</span></span><br><span class="line">forward_list&lt;string&gt; <span class="built_in">words</span> (articles.<span class="built_in">begin</span> ( ), articles.<span class="built_in">end</span> ( ) );</span><br></pre></td></tr></table></figure>

<p>初始化拷贝容器类型和元素类型都必须相同。</p>
<p>由于两个迭代器表示一个范围，因此可以使用这种构造函数来拷贝一个容器中的子序列。例如，假定迭代器it表示authors中的一个元素:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拷贝元素，直到(但不包括)it指向的元素</span></span><br><span class="line"><span class="function">deque&lt;string&gt; <span class="title">authList</span> <span class="params">(authors.begin () , it)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每个容器有三个元素，用给定的初始化器进行初始化</span></span><br><span class="line">list&lt;string&gt; authors = &#123;<span class="string">&quot;Milton&quot;</span>,<span class="string">&quot;Shakespeare&quot;</span>，<span class="string">&quot;Austen&quot;</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt; articles = &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>接受一个容器大小，及初始值来创建容器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">ivec</span> <span class="params">( <span class="number">10</span>,<span class="number">-1</span>)</span></span>;				<span class="comment">// 10个int元素，每个都初始化为-1</span></span><br><span class="line"><span class="function">list&lt;string&gt; <span class="title">svec</span> <span class="params">(<span class="number">10</span>，<span class="string">&quot;hi! &quot;</span>)</span></span>;			<span class="comment">// 10个strings;每个都初始化为&quot;hi !&quot;</span></span><br><span class="line"><span class="function">forward_list&lt;<span class="keyword">int</span>&gt; <span class="title">ivec</span> <span class="params">(<span class="number">10</span>)</span> </span>;			<span class="comment">// 10个元素，每个都初始化为0</span></span><br><span class="line"><span class="function">deque&lt;string&gt; <span class="title">svec</span> <span class="params">(<span class="number">10</span>)</span> </span>;				<span class="comment">// 10个元素，每个都是空string</span></span><br></pre></td></tr></table></figure>

<p>如果元素类型具有没有默认构造函数，则必须提供初始值。</p>
<h4 id="标准库array具有固定的大小"><a href="#标准库array具有固定的大小" class="headerlink" title="标准库array具有固定的大小"></a>标准库array具有固定的大小</h4><p>定义array，必须指定类型和容器大小：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">array&lt;<span class="keyword">int</span>, 42&gt;						<span class="comment">//类型为:保存42个int的数组</span></span><br><span class="line">array&lt;string,10&gt;					<span class="comment">//类型为:保存10个string的数组</span></span><br><span class="line">array&lt;<span class="keyword">int</span>, 10&gt;: :size_type i;		<span class="comment">//数组类型包括元素类型和大小</span></span><br><span class="line">array&lt;<span class="keyword">int</span>&gt; : :size_type j;			<span class="comment">//错误:array&lt;int&gt;不是一个类型</span></span><br></pre></td></tr></table></figure>

<p>与其他容器不同点在于，默认构造的array是非空的，因为指定大小后，其中的元素都被默认初始化了。其次使用列表初始化元素数目必须小于等于容器大小，剩余部分用0填充：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">array&lt;<span class="keyword">int</span>, 10&gt; ia1;									<span class="comment">//10个默认初始化的int</span></span><br><span class="line">array&lt;<span class="keyword">int</span>,10&gt; ia2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;			<span class="comment">//列表初始化</span></span><br><span class="line">array&lt;<span class="keyword">int</span>,10&gt; ia3 = &#123;<span class="number">42</span>&#125;;							<span class="comment">// ia3[0]为42，剩余元素为О</span></span><br></pre></td></tr></table></figure>

<p>与内置数组不同，array可以进行拷贝赋值操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> digs [<span class="number">10</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cpy [<span class="number">10</span>] = digs;								<span class="comment">//错误:内置数组不支持拷贝或赋值</span></span><br><span class="line">array&lt;<span class="keyword">int</span>,10&gt; digits = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">array&lt;<span class="keyword">int</span>，10&gt; copy = digits; 						<span class="comment">//正确:只要数组类型匹配即合法</span></span><br></pre></td></tr></table></figure>

<p>但初始值类型，元素类型，大小都必须相同。</p>
<h3 id="赋值和swap"><a href="#赋值和swap" class="headerlink" title="赋值和swap"></a>赋值和swap</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">c1 =c2;						<span class="comment">//将c1的内容替换为c2中元素的拷贝</span></span><br><span class="line">c1 =&#123; a,b,c&#125;; 				<span class="comment">//赋值后，c1大小为3</span></span><br></pre></td></tr></table></figure>

<p>与内置数组不同，array类型允许赋值，但对象类型需要相等：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">array&lt;<span class="keyword">int</span>,10&gt; al = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">array&lt;<span class="keyword">int</span>,10&gt; a2 = &#123; <span class="number">0</span> &#125;; 			<span class="comment">//所有元素值均为0</span></span><br><span class="line">al = a2;							<span class="comment">//替换a1中的元素</span></span><br><span class="line">a2 = &#123;<span class="number">0</span>&#125;;							<span class="comment">//错误:不能将一个花括号列表赋予数组</span></span><br></pre></td></tr></table></figure>

<p>c1=c2                                    将c1中的元素替换为c2中元素的拷贝。c1和c2必须具有相同的类型<br>c={a,b,c…}                            将cl中元素替换为初始化列表中元素的拷贝（array不适用)<br>swap（c1,c2）                    交换c1和 c2中的元素。c1和 c2必须具有相同的类型。swap通常<br>c1.swap （c2）                    比从c2向c1拷贝元素快得多<br>assign                                    操作不适用于关联容器和array<br>seq.assign (b,e)                    将seq中的元素替换为迭代器b和e所表示的范围中的元素。迭代器b和e不能指向seq中的元素<br>seq.assign (il)                        将seq中的元素替换为初始化列表i1中的元素<br>seq.assign （n,t）                将seq中的元素替换为n个值为t的元素</p>
<p><em>注意：赋值相关运算会导致指向左边容器内部的迭代器、引用和指针失效。而swap操作将容器内容交换不会导致指向容器的迭代器、引用和指针失效(容器类型为array和string的情况除外)。</em></p>
<h4 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h4><p>在顺序容器（除array外）中可以assign成员赋值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">list&lt;string&gt; names;</span><br><span class="line">vector&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;oldstyle;</span><br><span class="line">names = oldstyle; 							<span class="comment">//错误:容器类型不匹配</span></span><br><span class="line"><span class="comment">//正确:可以将const char*转换为string</span></span><br><span class="line">names.<span class="built_in">assign</span> (oldstyle.<span class="built_in">cbegin</span>(), oldstyle.<span class="built_in">cend</span>() );</span><br></pre></td></tr></table></figure>

<p>由于其旧元素被替换,因此传递给assign的迭代器不能指向调用assign的容器。</p>
<p>第二种用法接受整型值和一个元素值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于slist1.clear ();</span></span><br><span class="line"><span class="comment">//后跟slist1.insert(slist1.begin (),10，&quot;Hiya ! &quot;);</span></span><br><span class="line"><span class="function">list&lt;string&gt; <span class="title">slist1</span> <span class="params">(<span class="number">1</span>)</span></span>;				<span class="comment">// 1个元素，为空string</span></span><br><span class="line">slist1.<span class="built_in">assign</span> (<span class="number">10</span>,<span class="string">&quot;Hiya ! &quot;</span>);			<span class="comment">// 10个元素，每个都是“Hiya !”</span></span><br></pre></td></tr></table></figure>

<h4 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">svec1</span> <span class="params">(<span class="number">10</span>)</span></span>; 		<span class="comment">// 10个元素的vector</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">svec2</span> <span class="params">(<span class="number">24</span>)</span></span>; 		<span class="comment">// 24个元素的vector</span></span><br><span class="line"><span class="built_in">swap</span> (svec1, svec2 );</span><br></pre></td></tr></table></figure>

<p>除arraay，swap操作不对任何元素进行拷贝、删除、和插入，所以可以在常熟时间内完成，它只是交换了容器内部的数据结构（人话就是交换了头指针）。所以迭代器、引用、指针并不会失效，且所指向的元素也不会变，原本指向s1[1]的迭代器与s2交换后会指向s2[1]。但string调用swap会使迭代器、引用、指针失效。</p>
<p>array容器中使用swap会真正交换元素，所以时间会取决于元素数量，此外指针、引用、迭代器绑定的s1[1]现在还使s1[1]，</p>
<h3 id="容器大小操作"><a href="#容器大小操作" class="headerlink" title="容器大小操作"></a>容器大小操作</h3><p>与大小相关的操作，size、empty、和max_size：返回容器所能容纳的最大元素数目。</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>除了无需关联容器外都支持关系运算符，但容器中的元素类型必须一样。比较容器实际上是逐对比较：</p>
<ul>
<li>如果两个容器具有相同大小且所有元素都两两对应相等，则这两个容器相等;否则两个容器不等。</li>
<li>如果两个容器大小不同，但较小容器中每个元素都等于较大容器中的对应元素，则较小容器小于较大容器。</li>
<li>如果两个容器都不是另一个容器的前缀子序列，则它们的比较结果取决于第一个不相等的元素的比较结果。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1 = &#123; <span class="number">1</span>，<span class="number">3</span>，<span class="number">5</span>，<span class="number">7</span>,<span class="number">9</span>，<span class="number">12</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v2 = &#123; <span class="number">1</span>,<span class="number">3</span>，<span class="number">9</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v3 = &#123; <span class="number">1</span>,<span class="number">3</span>，<span class="number">5</span>,<span class="number">7</span> &#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v4 = &#123; <span class="number">1</span>,<span class="number">3</span>，<span class="number">5</span>，<span class="number">7</span>，<span class="number">9</span>，<span class="number">12</span> &#125;;</span><br><span class="line">vl &lt; v2 			<span class="comment">// true; v1和v2在元素[2]处不同: v1[2]小于等于v2[2]</span></span><br><span class="line">vl &lt; v3				<span class="comment">// false;所有元素都相等，但v3中元素数目更少</span></span><br><span class="line">vl == v4 			<span class="comment">// true;每个元素都相等，且v1和v4大小相同</span></span><br><span class="line">vl == v2 			<span class="comment">// false; v2元素数目比v1少</span></span><br></pre></td></tr></table></figure>

<h4 id="容器的关系运算符使用元素的关系运算符"><a href="#容器的关系运算符使用元素的关系运算符" class="headerlink" title="容器的关系运算符使用元素的关系运算符"></a>容器的关系运算符使用元素的关系运算符</h4><p>容器的相等运算符实际上是使用元素的==运算符实现比较的,而其他关系运算符是使用元素的&lt;运算符。如果元素类型不支持所需运算符，那么保存这种元素的容器就不能使用相应的关系运算。例如,我们在第7章中定义sales_data类型并未定义==-和&lt;运算。</p>
<h2 id="顺序容器操作"><a href="#顺序容器操作" class="headerlink" title="顺序容器操作"></a>顺序容器操作</h2><p>接下来介绍顺序容器的特有操作：</p>
<h3 id="向顺序容器添加元素"><a href="#向顺序容器添加元素" class="headerlink" title="向顺序容器添加元素"></a>向顺序容器添加元素</h3><p><img src="https://s2.loli.net/2022/01/04/qDcn1vAxsJ7LuCM.png" alt="image.png"></p>
<p>当我们使用这些操作时，必须记得不同容器使用不同的策略来分配元素空间，而这些策略直接影响性能。在一个vector或string 的尾部之外的任何位置,或是一个deque的首尾之外的任何位置添加元素，都需要移动元素。而且，向一个vector或string添加元素可能引起整个对象存储空间的重新分配。重新分配一个对象的存储空间需要分配新的内存，并将元素从旧的空间移动到新的空间中。</p>
<h4 id="使用push-back"><a href="#使用push-back" class="headerlink" title="使用push_back"></a>使用push_back</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从标准输入读取数据，将每个单词放到容器末尾string word;</span></span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word)</span><br><span class="line">	container.<span class="function">push <span class="title">back</span> <span class="params">(word)</span></span>;</span><br></pre></td></tr></table></figure>

<p>tip：当我们用对象初始化、或插入到容器时，实际上会先拷贝这个对象生成临时对象，再初始化或插入它。</p>
<h4 id="在特定的位置添加元素"><a href="#在特定的位置添加元素" class="headerlink" title="在特定的位置添加元素"></a>在特定的位置添加元素</h4><p>insert成员提供了更一般的添加功能，它允许我们在容器中任意位置插入0个或多个元素。vector.deque、list和string都支持insert成员。forward_list提供了特殊版本的insert成员。</p>
<p><code>slist.insert(iter，&quot;Hello! &quot;);//将&quot;Hello ! &quot;添加到iter之前的位置</code></p>
<p>有些容器（如vector）不支持push_front但可以使用insert来插入到开始的位置。</p>
<p><code>svec.insert (svec.end(), 10,&quot;Anna&quot; ); //将10个Anna插入到尾部 </code></p>
<p>同时还有接受迭代器的版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; v = &#123; <span class="string">&quot;quasi&quot;</span>,<span class="string">&quot;simba&quot;</span>,<span class="string">&quot;frollo&quot;</span>, <span class="string">&quot;scar&quot;</span>&#125;;		</span><br><span class="line"><span class="comment">//将v的最后两个元素添加到slist的开始位置</span></span><br><span class="line">slist.<span class="built_in">insert</span>(slist.<span class="built_in">begin</span> (), v.<span class="built_in">end</span> () - <span class="number">2</span>, v.<span class="built_in">end</span>() ) ;</span><br><span class="line">slist.<span class="built_in">insert</span> (slist.<span class="built_in">end</span>(),&#123; <span class="string">&quot;these&quot;</span>，<span class="string">&quot;words&quot;</span>,<span class="string">&quot;will&quot;</span>，<span class="string">&quot;go&quot;</span>, <span class="string">&quot;at&quot;</span> , <span class="string">&quot;the&quot;</span>, <span class="string">&quot;end&quot;</span> ) );</span><br><span class="line"><span class="comment">//运行时错误:迭代器表示要拷贝的范围，不能指向与目的位置相同的容器</span></span><br><span class="line">slist.<span class="built_in">insert</span>(slist.<span class="built_in">begin</span> (), slist.<span class="built_in">begin</span> (), slist.<span class="built_in">end</span> () ) ;</span><br></pre></td></tr></table></figure>

<p>不可以将一对指向自己的迭代器传入insert。</p>
<h4 id="insert返回值"><a href="#insert返回值" class="headerlink" title="insert返回值"></a>insert返回值</h4><p>通过使用insert的返回值，可以在容器中一个特定位置反复插入元素:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">list&lt;string&gt; lst;</span><br><span class="line"><span class="keyword">auto</span> iter = lst.<span class="built_in">begin</span> ();</span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; word)</span><br><span class="line">	iter = lst.<span class="built_in">insert</span> (iter, word);			 <span class="comment">//等价于调用push_front</span></span><br></pre></td></tr></table></figure>

<p>insert返回的是第一个新加入元素的迭代器，如果不插入（即只有第一个参数），就返回传入的第一个参数。</p>
<h4 id="使用emplace"><a href="#使用emplace" class="headerlink" title="使用emplace"></a>使用emplace</h4><p>新标准引入了三个新成员——emplace_front、emplace和 emplace_back，这些操作构造而不是拷贝元素。这些操作分别对应push_front、insert和push_back,允许我们将元素放置在容器头部、一个指定位置之前或容器尾部。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在c的末尾构造一个sales_data对象</span></span><br><span class="line"><span class="comment">//使用三个参数的sales_data构造函数</span></span><br><span class="line">c.<span class="built_in">emplace_back</span> ( <span class="string">&quot;978-0590353403&quot;</span>,<span class="number">25</span>,<span class="number">15.99</span>);</span><br><span class="line"><span class="comment">//错误:没有接受三个参数的push_back 版本</span></span><br><span class="line">c.<span class="built_in">push_back</span> (<span class="string">&quot;978-0590353403&quot;</span>,<span class="number">25</span>,<span class="number">15.99</span>);	</span><br><span class="line"><span class="comment">//正确:创建一个临时的Sales_data对象传递给push back</span></span><br><span class="line">c.<span class="built_in">push_back</span>(<span class="built_in">Sales_data</span>(<span class="string">&quot;978-0590353403&quot;</span>，<span class="number">25</span>,<span class="number">15.99</span>));</span><br></pre></td></tr></table></figure>

<p>它与push或insert的区别在于它可以直接调用元素类型的构造函数在容器中直接创建，而push需要创建临时的对象，然后压入容器，但传入参数必须匹配。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// iter指向c中一个元素，其中保存了sales data元素</span></span><br><span class="line">c.<span class="built_in">emplace_back</span>(); <span class="comment">//使用Sales_data的默认构造函数</span></span><br><span class="line">c.<span class="built_in">emplace</span>(iter,<span class="string">&quot;999-999999999&quot;</span>);<span class="comment">//使用sales_data (string)</span></span><br><span class="line"><span class="comment">//使用sales_data的接受一个ISBN、一个 count和一个price的构造函数</span></span><br><span class="line">c.<span class="built_in">emplace_front</span> ( <span class="string">&quot;978-0590353403&quot;</span>，<span class="number">25</span>，<span class="number">15.99</span>) ;</span><br></pre></td></tr></table></figure>

<h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><p>包括array在内的每个顺序容器都有一个front成员函数，而除forward_list之外的所有顺序容器都有一个back成员函数。这两个操作分别返回首元素和尾元素的引用:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在解引用一个迭代器或调用front或back之前检查是否有元素</span></span><br><span class="line"><span class="keyword">if</span> ( !c.<span class="built_in">empty</span>())&#123;</span><br><span class="line">	<span class="comment">// val和val2是c中第一个元素值的拷贝</span></span><br><span class="line">	<span class="keyword">auto</span> val = *c.<span class="built_in">begin</span> () , val2 =c.<span class="built_in">front</span> ();</span><br><span class="line">	<span class="comment">// val3和val4是c中最后一个元素值的拷贝</span></span><br><span class="line">	<span class="keyword">auto</span> last = c.<span class="built_in">end</span> () ;</span><br><span class="line">	<span class="keyword">auto</span> val3 = *(--last); 				<span class="comment">//不能递减forward_ list迭代器</span></span><br><span class="line">	<span class="keyword">auto</span> val4 = c.<span class="built_in">back</span> ();				<span class="comment">//forward_list不支持</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.bmp.ovh/imgs/2022/01/9dab196d3337ea4c.png"></p>
<h4 id="访问成员函数返回引用"><a href="#访问成员函数返回引用" class="headerlink" title="访问成员函数返回引用"></a>访问成员函数返回引用</h4><p>const容器返回const引用，如果使用auto保存返回值，并希望改变元素的值，必须定义为引用类型：</p>
<p><code>auto &amp;v = c.back();</code></p>
<h4 id="下标操作和安全的随机访问"><a href="#下标操作和安全的随机访问" class="headerlink" title="下标操作和安全的随机访问"></a>下标操作和安全的随机访问</h4><p>为保证使用下标访问不会越界，可以使用at，它会在下标越界时抛出异常：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; svec;					<span class="comment">//空vector</span></span><br><span class="line">cout &lt;&lt; svec[<span class="number">0</span>] ;						<span class="comment">//运行时错误: svec中没有元素!</span></span><br><span class="line">cout &lt;&lt; svec.<span class="built_in">at</span>(<span class="number">0</span>) ;					<span class="comment">//抛出一个out_ of_ range异常</span></span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><img src="https://s2.loli.net/2022/01/05/zESjes4XYWbaGAU.png" alt="image.png"></p>
<h4 id="pop函数"><a href="#pop函数" class="headerlink" title="pop函数"></a>pop函数</h4><p>这些操作返回void，如果需要弹出元素的值，就必须在执行弹出前保存它：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (!ilist. <span class="built_in">empty</span>()) &#123;</span><br><span class="line">	<span class="built_in">process</span> (ilist. <span class="built_in">front</span>()) ; 		<span class="comment">//对ilist的首元素进行一些处理</span></span><br><span class="line">	ilist.<span class="function">pop_ <span class="title">front</span><span class="params">()</span> </span>;			<span class="comment">//完成处理后删除首元素.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="特殊的forward-list"><a href="#特殊的forward-list" class="headerlink" title="特殊的forward_list"></a>特殊的forward_list</h3><p>因为单向链表删除或者添加一个元素会改变前一个元素，但单向链表没办法访问前驱，所以我们可以添加或者删除给定元素之后的元素，</p>
<p><img src="https://s2.loli.net/2022/01/05/seFWG3P6RDQacIH.png" alt="image.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">forward_ list&lt;<span class="keyword">int</span>&gt; flst = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> prev = flst.before_ <span class="built_in">begin</span>() ;				<span class="comment">//表示flst的“首前元素’</span></span><br><span class="line"><span class="keyword">auto</span> curr = flst.<span class="built_in">begin</span>() ;						<span class="comment">//表示flst中的第一个元素</span></span><br><span class="line"><span class="keyword">while</span> (curr != flst.<span class="built_in">end</span>()) &#123;					<span class="comment">//仍有元素要处理</span></span><br><span class="line"><span class="keyword">if</span>(*curr % <span class="number">2</span>)									<span class="comment">//若元素为奇数</span></span><br><span class="line">	curr = flst.erase_ <span class="built_in">after</span> (prev) ;			<span class="comment">//删除它并移动curr</span></span><br><span class="line"><span class="keyword">else</span> &#123;		</span><br><span class="line">	prev = curr;								<span class="comment">//移动迭代器curr,指向下	一个元素，prev指向</span></span><br><span class="line">	++curr ;									<span class="comment">// curr 之前的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="改变容器大小"><a href="#改变容器大小" class="headerlink" title="改变容器大小"></a>改变容器大小</h3><p><img src="https://s2.loli.net/2022/01/05/JM9wUthlFSPW2Dd.png" alt="image.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">list&lt;<span class="keyword">int</span>&gt; <span class="title">ilist</span><span class="params">(<span class="number">10</span>， <span class="number">42</span>)</span> </span>;					<span class="comment">// 10个int:每个的值都是42</span></span><br><span class="line">ilist. <span class="built_in">resize</span>(<span class="number">15</span>) ;							<span class="comment">//将5个值为0的元素添加到ilist的末尾.</span></span><br><span class="line">ilist. <span class="built_in">resize</span>(<span class="number">25</span>，<span class="number">-1</span>) ;						<span class="comment">//将10个值为-1的元素添加到ilist的末尾</span></span><br><span class="line">ilist. <span class="built_in">resize</span>(<span class="number">5</span>) ;							<span class="comment">//从ilist末尾删除20个元素</span></span><br></pre></td></tr></table></figure>

<h3 id="容器操作可能使迭代器失效"><a href="#容器操作可能使迭代器失效" class="headerlink" title="容器操作可能使迭代器失效"></a>容器操作可能使迭代器失效</h3><p>由于向迭代器添加元素和从迭代器删除元素的代码可能会使迭代器失效，因此必须保证每次改变容器的操作之后都正确地重新定位迭代器。这个建议对vector、string和deque尤为重要。</p>
<h4 id="编写改变容器的循环程序"><a href="#编写改变容器的循环程序" class="headerlink" title="编写改变容器的循环程序"></a>编写改变容器的循环程序</h4><p>添加/删除vector、string 或deque元素的循环程序必须考虑迭代器、引用和指针可能失效的问题。程序必须保证每个循环步中都更新迭代器、引用或指针。如果循环中调用的是insert或erase，那么更新迭代器很容易。这些操作都返回迭代器，我们可以用来更新: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//傻瓜循环，删除偶数元素，复制每个奇数元素</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vi = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> iter = vi.<span class="built_in">begin</span>(); <span class="comment">//调用begin而不是cbegin,因为我们要改变vi</span></span><br><span class="line"><span class="keyword">while</span> (iter != vi.<span class="built_in">end</span>()) &#123;</span><br><span class="line">	<span class="keyword">if</span> (*iter % <span class="number">2</span>) &#123;</span><br><span class="line">		iter = vi.<span class="built_in">insert</span>(iter, *iter);	 		<span class="comment">//复制当前元素</span></span><br><span class="line">		iter += <span class="number">2</span>; <span class="comment">//向前移动迭代器，跳过当前元素以及插入到它之前的元素</span></span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">		iter = vi.<span class="built_in">erase</span> (iter) ;				<span class="comment">//删除偶数元素</span></span><br><span class="line">		<span class="comment">//不应向前移动迭代器，iter 指向我们删除的元素之后的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="不要保存end返回的迭代器"><a href="#不要保存end返回的迭代器" class="headerlink" title="不要保存end返回的迭代器"></a>不要保存end返回的迭代器</h4><p>因为插入删除操作会使end迭代器失效。</p>
<h2 id="vector对象如何增长"><a href="#vector对象如何增长" class="headerlink" title="vector对象如何增长"></a>vector对象如何增长</h2><p>vector和string在添加元素时如果大小其容量，会开辟一块比预定容量更大的地方。</p>
<h4 id="管理容量的成员函数"><a href="#管理容量的成员函数" class="headerlink" title="管理容量的成员函数"></a>管理容量的成员函数</h4><p><img src="https://s2.loli.net/2022/01/05/WVmEnM7oGTHrAFh.png" alt="image.png"></p>
<p>reserve并不改变容器中元素的数量，它仅影响vector预先分配多大的内存空间，不过只有当需要的内存超过当前容量时，才会改变容量。一旦调用，会至少分配与需求一样大或更大的空间。</p>
<h4 id="capacity和size"><a href="#capacity和size" class="headerlink" title="capacity和size"></a>capacity和size</h4><p><img src="https://s2.loli.net/2022/01/05/Dztf3cgMVAWZoHY.png" alt="image.png"></p>
<p>每个 vector实现都可以选择自己的内存分配策略。但是必须遵守的一条原则是:只有当迫不得已时才可以分配新的内存空间。</p>
<h2 id="额外的string操作"><a href="#额外的string操作" class="headerlink" title="额外的string操作"></a>额外的string操作</h2><h3 id="构造string的其他方法"><a href="#构造string的其他方法" class="headerlink" title="构造string的其他方法"></a>构造string的其他方法</h3><p><img src="https://s2.loli.net/2022/01/05/oGYKtCiTkrZdh23.png" alt="image.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *cp = <span class="string">&quot;Hello world!!! &quot;</span>;		<span class="comment">//以空字符结束的数组</span></span><br><span class="line"><span class="keyword">char</span> noNull[]=&#123;<span class="string">&#x27;H’, &#x27;</span>i<span class="number">&#x27;</span>&#125;;				<span class="comment">//不是以空字符结束</span></span><br><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(cp)</span></span>;							<span class="comment">// 拷贝cp中的字符直到遇到空字符;s1 == &quot;Helloworld!!!&quot;</span></span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(noNull,<span class="number">2</span>)</span></span>;					<span class="comment">//从noNull拷贝两个字符;s2 == &quot;Hi&quot;</span></span><br><span class="line"><span class="function">string <span class="title">s3</span> <span class="params">(noNull)</span></span>;						<span class="comment">//未定义:noNull不是以空字符结束</span></span><br><span class="line"><span class="function">string <span class="title">s4</span><span class="params">(cp + <span class="number">6</span>，<span class="number">5</span>)</span></span>;					<span class="comment">//从cp [ 6]开始拷贝5个字符;s4 ==&quot;world&quot;</span></span><br><span class="line"><span class="function">string <span class="title">s5</span><span class="params">(s1,<span class="number">6</span>，<span class="number">5</span>)</span> </span>;						<span class="comment">//从s1 [ 6]开始拷贝5个字符;s5 == &quot;world&quot;</span></span><br><span class="line"><span class="function">string <span class="title">s6</span><span class="params">(s1,<span class="number">6</span>)</span></span>;						<span class="comment">//从s1[ 6]开始拷贝，直至s1末尾;s6== &quot;world! ! !&quot;</span></span><br><span class="line"><span class="function">string <span class="title">s7</span><span class="params">(s1,<span class="number">6</span>,<span class="number">20</span>)</span></span>;						<span class="comment">//正确，只拷贝到s1末尾;s7 == &quot;world! ! ! &quot;</span></span><br><span class="line"><span class="function">string <span class="title">s8</span><span class="params">(s1,<span class="number">16</span>)</span></span>;						<span class="comment">//抛出一个out_of_range异常</span></span><br></pre></td></tr></table></figure>

<h4 id="substr操作"><a href="#substr操作" class="headerlink" title="substr操作"></a>substr操作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">string s2 = s.<span class="built_in">substr</span> (<span class="number">0</span>,<span class="number">5</span>);			<span class="comment">// s2 = hello</span></span><br><span class="line">string s3 = s.<span class="built_in">substr</span> (<span class="number">6</span>);			<span class="comment">// s3 = world</span></span><br><span class="line">string s4 = s.<span class="built_in">substr</span> (<span class="number">6</span>,<span class="number">11</span>);		<span class="comment">// s3 = world</span></span><br><span class="line">string s5 = s.<span class="built_in">substr</span> (<span class="number">12</span>);			<span class="comment">//抛出一个out_of_range异常</span></span><br></pre></td></tr></table></figure>

<p>返回一个string，包含s中从pos 开始的n个字符的拷贝。pos的默认值为0。n的默认值为s.size () - pos，即拷贝从pos开始的所有字符，开始位置超过大小，会抛出一个异常，结束位置超出大小，会默认拷贝string的末尾。</p>
<h3 id="改变string的其他方法"><a href="#改变string的其他方法" class="headerlink" title="改变string的其他方法"></a>改变string的其他方法</h3><p>除了接受迭代器的insert和 erase版本外，string还提供了接受下标的版本。下标指出了开始删除的位置，或是insert到给定值之前的位置：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">insert</span>(s.<span class="built_in">size</span>(), <span class="number">5</span>，<span class="string">&#x27;!&#x27;</span>);				<span class="comment">//在s末尾插入5个感叹号</span></span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">size</span>()- <span class="number">5</span>，<span class="number">5</span>);					<span class="comment">//从s删除最后5个字符</span></span><br></pre></td></tr></table></figure>

<p>标准库string类型还提供了接受C风格字符数组的insert和 assign版本。例如，我们可以将以空字符结尾的字符数组insert 到或assign给一个string：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *cp = <span class="string">&quot;stately, plump Buck&quot;</span>;</span><br><span class="line">s.<span class="built_in">assign</span>(cp,<span class="number">7</span>);						<span class="comment">// s == &quot;Stately&quot;</span></span><br><span class="line">s.<span class="built_in">insert</span> (s.<span class="built_in">size</span>(), cp + <span class="number">7</span>); 		<span class="comment">// s == &quot;Stately, plump Buck&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们也可以指定将来自其他string或子字符串的字符插入到当前string中或赋予当前string:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s = <span class="string">&quot;some string&quot;</span>, s2 = <span class="string">&quot;some other string&quot;</span>;</span><br><span class="line">s.<span class="built_in">insert</span> (<span class="number">0</span>, s2); 				<span class="comment">//在s中位置0之前插入s2的拷贝</span></span><br><span class="line"><span class="comment">//在s [0]之前插入s2中s2[0]开始的s2.size()个字符</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">0</span>,s2，<span class="number">0</span>, s2.<span class="built_in">size</span> ());</span><br></pre></td></tr></table></figure>

<h4 id="append和replace函数"><a href="#append和replace函数" class="headerlink" title="append和replace函数"></a>append和replace函数</h4><p>append操作是在string末尾进行插入操作的一种简写形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span> <span class="params">(<span class="string">&quot;C++ Primer&quot;</span>)</span>,s2 </span>= s;				<span class="comment">//将s 和s2初始化为&quot;C++ Primer&quot;</span></span><br><span class="line">s.<span class="built_in">insert</span> (s.<span class="built_in">size</span>(),<span class="string">&quot; 4th Ed.&quot;</span>);				<span class="comment">//s == &quot;C++ Primer 4th Ed.&quot;</span></span><br><span class="line">s2.<span class="built_in">append</span>(<span class="string">&quot; 4th Ed.&quot;</span> );						<span class="comment">//等价方法:将”4th Ed.&quot;追加到s2;s == s2</span></span><br></pre></td></tr></table></figure>

<p>replace操作是调用erase和insert的一种简写形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将&quot;4th&quot;替换为&quot;5th&quot;的等价方法</span></span><br><span class="line">s.<span class="built_in">erase</span> (<span class="number">11</span>，<span class="number">3</span>);								<span class="comment">// s == &quot;C++ Primer Ed . &quot;</span></span><br><span class="line">s.<span class="built_in">insert</span> (<span class="number">11</span>，<span class="string">&quot;5th&quot;</span> ) ;						<span class="comment">// s == &quot;C++ Primer 5th Ed . &quot;</span></span><br><span class="line"><span class="comment">//从位置11开始，删除3个字符并插入&quot;5th&quot;</span></span><br><span class="line">s2.<span class="built_in">replace</span>(<span class="number">11</span>,<span class="number">3</span>,<span class="string">&quot;5th&quot;</span>);						<span class="comment">//等价方法:s == s2</span></span><br></pre></td></tr></table></figure>

<p>此例中调用replace时，插入的文本恰好与删除的文本一样长。这不是必须的，可以插入一个更长或更短的string：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">replace</span>(<span class="number">11</span>,<span class="number">3</span>，<span class="string">&quot;Fifth&quot;</span>);					<span class="comment">// s == &quot;C++ Primer Fifth Ed.&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/01/05/qoMRSHQDpfwEIbx.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/01/05/9ptseuHrRPWhkQE.png" alt="image.png"></p>
<h4 id="改变string的多种重载函数"><a href="#改变string的多种重载函数" class="headerlink" title="改变string的多种重载函数"></a>改变string的多种重载函数</h4><p>assign和 append函数无须指定要替换string中哪个部分: assign总是替换string中的所有内容，append总是将新字符追加到string末尾。<br>replace函数提供了两种指定删除元素范围的方式。可以通过一个位置和一个长度来指定范围，也可以通过一个迭代器范围来指定。insert函数允许我们用两种方式指定插入点:用一个下标或一个迭代器。在两种情况下，新元素都会插入到给定下标（或迭代器）之前的位置。<br>可以用好几种方式来指定要添加到string 中的字符。新字符可以来自于另一个string，来自于一个字符指针（指向的字符数组)，来自于一个花括号包围的字符列表，或者是一个字符和一个计数值。当字符来自于一个string或一个字符指针时，我们可以传递一个额外的参数来控制是拷贝部分还是全部字符。</p>
<h3 id="string搜索操作"><a href="#string搜索操作" class="headerlink" title="string搜索操作"></a>string搜索操作</h3><p>搜索操作：成功返回一个无符号的string::size_type值，失败返回npos（cont string::size_type）的static成员（他们应该是同一种类型，但变量名字不同），因此不建议使用int储存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">name</span> <span class="params">(<span class="string">&quot;AnnaBelle&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> posl = name.<span class="built_in">find</span> ( <span class="string">&quot;Anna&quot;</span>); <span class="comment">// pos1 ==o</span></span><br><span class="line"><span class="function">string <span class="title">lowercase</span> <span class="params">( <span class="string">&quot;annabelle&quot;</span> )</span></span>;</span><br><span class="line">pos1 = lowercase.<span class="built_in">find</span> ( <span class="string">&quot;Anna&quot;</span>); <span class="comment">// posl ==npos</span></span><br></pre></td></tr></table></figure>

<p>find操作对大小写有区分A与a会区分开来</p>
<p><img src="https://s2.loli.net/2022/01/06/VsEzD1wLRlknOHC.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/01/06/lRdCGfg7n1Qtx5Z.png" alt="image.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">numbers</span> <span class="params">( <span class="string">&quot;0123456789&quot;</span>)</span>, <span class="title">name</span> <span class="params">( <span class="string">&quot;r2d2&quot;</span>)</span> </span>;</span><br><span class="line"><span class="comment">//返回1，即，name中第一个数字的下标</span></span><br><span class="line"><span class="keyword">auto</span> pos = name . <span class="built_in">find_first_of</span> (numbers) ;</span><br><span class="line"><span class="function">string <span class="title">dept</span> <span class="params">( <span class="string">&quot;03714p3&quot;</span>)</span></span>;				</span><br><span class="line"><span class="comment">//返回5——字符&#x27;p&#x27;的下标</span></span><br><span class="line"><span class="keyword">auto</span> pos = dept.find_ <span class="built_in">first_not_of</span> (numbers) ;</span><br></pre></td></tr></table></figure>

<h4 id="指定可选位置"><a href="#指定可选位置" class="headerlink" title="指定可选位置"></a>指定可选位置</h4><p>find函数第二个参数为从哪里开始，默认为0，使用它可以在字符串中循环搜索子字符串的所有位置：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string : : size_type pos = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//每步循环查找name中下一个数</span></span><br><span class="line"><span class="keyword">while</span> ((pos = name.<span class="built_in">find_first_of</span> (numbers, pos)) != string::npos) &#123;</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;found number at index : &quot;</span> &lt;&lt; pos &lt;&lt;<span class="string">&quot; element is &quot;</span> &lt;&lt;name [pos] &lt;&lt; endl;</span><br><span class="line">	++pos; <span class="comment">//移动到下一个字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逆向搜索"><a href="#逆向搜索" class="headerlink" title="逆向搜索"></a>逆向搜索</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">river</span> <span class="params">( <span class="string">&quot;Mississippi&quot;</span> )</span></span>;</span><br><span class="line"><span class="keyword">auto</span> first_pos = river.<span class="built_in">find</span> ( <span class="string">&quot;is&quot;</span>); <span class="comment">//返回1</span></span><br><span class="line"><span class="keyword">auto</span> last_pos - river.<span class="built_in">rfind</span> ( <span class="string">&quot;is&quot;</span>); <span class="comment">//返回4</span></span><br></pre></td></tr></table></figure>

<h3 id="compare函数"><a href="#compare函数" class="headerlink" title="compare函数"></a>compare函数</h3><p>string类型提供的与C标准库 的strcmp函数相似的函数，根据s等于、大小、小于返回0、整数、负数。</p>
<p><img src="https://s2.loli.net/2022/01/06/UOMwx7VGFYivyQZ.png" alt="image.png"></p>
<h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><p>一些函数以可实现string与数值的转换：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">string s = <span class="built_in">to_string</span>(i); 			<span class="comment">//将整数i转换为字符表示形式</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="built_in">stod</span> (s) ;				<span class="comment">//将字符串s转换为浮点数</span></span><br></pre></td></tr></table></figure>

<p>要转换为数值的string中第一个非空白符必须是数值中可能出现的字符:string s2 = “pi = 3.14” ;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转换s中以数字开始的第一个子串，结果d = 3.14</span></span><br><span class="line">d = <span class="built_in">stod</span>(s2.<span class="built_in">substr</span>(s2.<span class="built_in">find_first_of</span>(<span class="string">&quot;+-.0123456789&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>这里将字符串种第一个出现数字的地方的子串传入函数，直到遇到不可能是数值的字符，然后将其转换。参数中第一个非空白符号必须是+、0、数字或是是小数点，且可以包含e、E、x、X等其他进制需要的字母。</p>
<p>如果string不能转换为一个数值，这些函数抛出一个invalid_argument异常(参见5.6节,第173页)。如果转换得到的数值无法用任何类型来表示，则抛出一个 out_of range异常。</p>
<p><img src="https://s2.loli.net/2022/01/06/lV9SMO86bwkrU3t.png" alt="image.png"></p>
<h2 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h2><p>本质上，一个适配器是一种机制，能使某种事物的行为看起来像另外一种事物一样。一个容器适配器接受一种已有的容器类型，使其行为看起来像一种不同的类型。例如，stack适配器接受一个顺序容器（除array或forward_list外)，并使其操作起来像一个stack一样。</p>
<p><img src="https://s2.loli.net/2022/01/06/DGh3m28PF9JMHBo.png" alt="image.png"></p>
<h4 id="定义一个适配器"><a href="#定义一个适配器" class="headerlink" title="定义一个适配器"></a>定义一个适配器</h4><p>首先我们可以用一个容器初始化另一个容器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">deque&lt;<span class="keyword">int</span>&gt; deq = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="function">stack&lt;<span class="keyword">int</span>&gt; <span class="title">stk</span> <span class="params">(deq)</span></span>; <span class="comment">//从deq考贝元素到stk</span></span><br></pre></td></tr></table></figure>

<p>我们还可以尖括号内重载构造函数，就可以创建一个适配器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在vector上实现的空栈</span></span><br><span class="line">stack&lt;string, vector&lt;string&gt;&gt; str_stk;</span><br><span class="line"><span class="comment">//str_stk2在vector上实现，初始化时保存svec的拷贝</span></span><br><span class="line">stack&lt;string, vector&lt;string&gt;&gt; <span class="built_in">str_stk2</span> (svec) ;</span><br></pre></td></tr></table></figure>

<p>所有适配器都要求有添加和删除以及访问尾元素能力，所以不能用array、forward_list构造。</p>
<h4 id="栈适配器"><a href="#栈适配器" class="headerlink" title="栈适配器"></a>栈适配器</h4><p><img src="https://s2.loli.net/2022/01/06/Bcsm8PfhJG9RkeV.png" alt="image.png"></p>
<p>栈默认基于deque实现，所以可以省略第二个参数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stack&lt;<span class="keyword">int</span>&gt; intstack; <span class="comment">//空栈</span></span><br><span class="line"><span class="comment">//填满栈</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> ix = <span class="number">0</span>; ix != <span class="number">10</span>; ++ix)</span><br><span class="line">	intStack.<span class="built_in">push</span> (ix);				<span class="comment">// intStack保存0到9十个数</span></span><br><span class="line"><span class="keyword">while</span> ( !intstack.<span class="built_in">empty</span>()) &#123;		<span class="comment">// intStack中有值就继续循环</span></span><br><span class="line">	<span class="keyword">int</span> value = intStack.<span class="built_in">top</span> ( ) ;</span><br><span class="line">	<span class="comment">//使用栈顶值的代码</span></span><br><span class="line">	intStack.<span class="built_in">pop</span>() ;				 <span class="comment">//弹出栈顶元素，继续循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然是基于deque实现，但我们不能使用底层容器的操作，所以只可以用push，而不可以使用push_back。</p>
<h4 id="队列适配器"><a href="#队列适配器" class="headerlink" title="队列适配器"></a>队列适配器</h4><p><img src="https://s2.loli.net/2022/01/06/hUFVraqMufPLTQd.png" alt="image.png"></p>
<p><img src="https://s2.loli.net/2022/01/06/XtO2ciYCGe3zTFd.png" alt="image.png"></p>
<p>priority_queue 允许我们为队列中的元素建立优先级。新加入的元素会排在所有优先级比它低的已有元素之前。饭店按照客人预定时间而不是到来时间的早晚来为他们安排座位，就是一个优先队列的例子。默认情况下，标准库在元素类型上使用&lt;运算符来确定相对优先级。后面会学习如何重载这个默认设置。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>最全最详细的hexo博客搭建教程</title>
    <url>/2021/12/10/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><strong>因为网上很多叫教程都是缺一点东西，导致只能自己去看报错解决，花了一些时间，所以为了大家不继续踩坑，我将全部的过程都写了下来，如果还是不能成功欢迎在评论区留下你的问题。</strong></p>
<h2 id="下载环境"><a href="#下载环境" class="headerlink" title="下载环境"></a>下载环境</h2><p>下载下面两个软件，安装时直接一直跳过就好</p>
<ul>
<li><p>Node.js下载:<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p>
<p>选择长期维护版</p>
<p>安装教程: <a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">https://www.cnblogs.com/liuqiyun/p/8133904.html</a></p>
</li>
<li><p>Git下载:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<span id="more"></span>

<p><img src="https://s2.loli.net/2021/12/12/ysxOWvEPJ6GB9Qa.png" alt="image.png"></p>
<p>蛋装教程，<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p>
</li>
</ul>
<p>win+r打开运行窗口输入cmd</p>
<p>在窗口下载Hexo ：输入： npm install hexo-cli -g  </p>
<p>之后回车，每个空格都不能漏掉！</p>
<p><img src="https://s2.loli.net/2021/12/12/GhDAEYmnRQyrc8T.png" alt="image.png"></p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>接着在刚才的cmd窗口输入以下三个命令，一个一个的输入</p>
<p>node -v</p>
<p>npm -v</p>
<p>git –version</p>
<p>hexo -v</p>
<p>只要出来的是版本号就代表安装成功了</p>
<p><img src="https://s2.loli.net/2021/12/12/OkwVzTdurtLgWsi.png" alt="image.png"></p>
<h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><p>注册一个github账号，可以自行百度如何注册，因为账号名字就是以后的网址，所以起的好的一些</p>
<p>接着点new，建立一个仓库，</p>
<p><img src="https://s2.loli.net/2021/12/12/ASVpGWXZ6HFaTzB.png" alt="image.png"></p>
<p>仓库名= 用户名.github.io,公共，底下无所谓</p>
<p><img src="https://s2.loli.net/2021/12/12/OqJh6Z5tHnVzfx3.png" alt="image.png"></p>
<p>在任何一个文件夹内右键，点击GIit Bash Here</p>
<p>输入：ssh-keygen -t rsa -C “邮件地址”</p>
<p>注意这里粘贴不是ctrl+v，可以右键粘贴，之后连续敲四次回车，间隔一点时间。</p>
<p>成功之后大概是这样：</p>
<p><img src="https://s2.loli.net/2021/12/12/MtlkbuqE9BrvFpD.png" alt="image.png"></p>
<p>C:\ Users \ Administrator \ .ssh 在这个路径下找到.ssh,找不到就在c盘搜一下。</p>
<p>用记事本打开id_rsa.pub，复制全部内容。</p>
<p>打开github网站，点击右上角自己的头像旁边的小箭头，点击seting，之后如下</p>
<p><img src="https://s2.loli.net/2021/12/12/ArjYKODFPVh2exb.png" alt="image.png"></p>
<p>名称随便输一个，在下面粘贴刚才.ssh找到的内容。</p>
<p>在GIit Bash Here窗口中测试ssh是否绑定成功，输入：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>输入yes</p>
<p>出现hi  。。。就成功了。</p>
<h2 id="生成本地博客"><a href="#生成本地博客" class="headerlink" title="生成本地博客"></a>生成本地博客</h2><p>在电脑的任意一个自己喜欢的位置创建自己的bolg文件夹。</p>
<p>进入这个文件夹，在里面右键打开GIit Bash Here，安装hexo。输入：hexo init<br>出现 start blogging with Hexo!就代表成功了</p>
<p>接着要记住下面这两条命令，后面很常用。</p>
<p>hexo g #生成网站静态文件到默认设置的 public 文件夹。<br>hexo s#启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p>依次输入它们，接着就可以通过这个上面的网址访问本地的博客。</p>
<h2 id="发布博客到互联网"><a href="#发布博客到互联网" class="headerlink" title="发布博客到互联网"></a>发布博客到互联网</h2><p>在github找到自己的仓库打开，在左上角，依次点击复制你的SSH。</p>
<p><img src="https://s2.loli.net/2021/12/12/sezBMXH63wDpOPG.png" alt="image.png"></p>
<p>在自己的博客文件夹中找到_config.yml文件，打开。拉到最后找到deploy。删掉原来的deploy后面的东西输入下面的代码：</p>
<p>deploy:<br>  type: git<br>  repo: 这里是你刚刚复制的东西。<br>  branch: main</p>
<p><strong>注意：后有一个空格，且一定要是英文符号</strong></p>
<p>依然在自己的博客文件夹GIit Bash Here窗口安装hexo-deployer-git自动部署发布工具，输入：npm install hexo-deployer-git –save</p>
<p>之后绑定你的邮箱和账号，输入：git config user.name “username” 和 git config user.email “email”</p>
<p>用户名和邮箱都是注册github提到的。</p>
<h1 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h1><p>hexo -g </p>
<p>hexo -d</p>
<p>将你的仓库名复制粘贴到浏览器就可以啦！别忘了留下你的网站哦~</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第五章</title>
    <url>/2021/12/10/%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h2><p><strong>空语句</strong></p>
<p>当某个地方语法上需要，逻辑上不需要，则会使用，且应该加注释标明。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重复读入数据直至到达文件末尾或某次输入的值等于sought</span></span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s &amp;&amp;s != sought)</span><br><span class="line">	; <span class="comment">//空语句</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>复合语句</strong></p>
<p>指用花括号括起来的（可能为空的）语句和声明的序列，复合语句也被称作块(block)。一个块就是一个作用域，在块中引入的名字只能在块内部以及嵌套在块中的子块里访问。通常，名字在有限的区域内可见，该区域从名字定义处开始，到名字所在的（最内层）块的结尾为止，通常在语法上需要一条语句，但逻辑上需要多条语句的使用。</p>
<p><em>所谓空块，是指内部没有任何语句的一对花括号。空块的作用等价于空语句:</em></p>
<hr>
<h2 id="语句作用域"><a href="#语句作用域" class="headerlink" title="语句作用域"></a>语句作用域</h2><p>可以在if、switch、while和 for语句的控制结构内定义变量。定义在控制结构当中的变量只在相应语句的内部可见，一旦语句结束，变量也就超出其作用范围了。</p>
<hr>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if else语句的形式是</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">	statement</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	statement2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>悬垂else</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误:实际的执行过程并非像缩进格式显示的那样; else 分支匹配的是内层if语句</span></span><br><span class="line"><span class="keyword">if</span> (grade % <span class="number">10</span> &gt;= <span class="number">3</span>)</span><br><span class="line">	<span class="keyword">if</span>(grade % <span class="number">10</span> &gt;<span class="number">7</span>)</span><br><span class="line">		lettergrade += <span class="string">&#x27;+&#x27;</span>; <span class="comment">//末尾是8或者9的成绩添加一个加号</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	lettergrade += <span class="string">&#x27;-&#x27;</span>;<span class="number">1</span>/末尾是<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span>、<span class="number">6</span>或者<span class="number">7</span>的成绩添加一个减号!</span><br></pre></td></tr></table></figure>

<p>这里程序将else与内层if匹配，导致错误，加上花括号可避免此问题。</p>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (ch)&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">		++aCnt;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">		++eCnt;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>break 跳转出switch，case必须是整形常量表达式，一个switch内case不能相同。</p>
<p><strong>内部控制流</strong></p>
<p>有时候故意省略break语句，使得程序连续执行多个标签。如：也许我们想统计的是所有元音字母出现的总次数:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> voweICnt =o;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (ch)&#123;</span><br><span class="line">	<span class="comment">//出现了a、e、 i、o或u中的任意一个都会将vowelCnt的值加1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span> :</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span> :</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span> :</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span> :<span class="comment">//也可以不换行，写成case &#x27;a&#x27; : case &#x27;e&#x27; : case &#x27;i&#x27; : case &#x27;o&#x27; : case &#x27;u&#x27; :</span></span><br><span class="line">		++Vowelcnt;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><label stype = "color:red">一般情况不要漏写break，不写需加注释说明。</label></p>
<p><strong>default标签</strong></p>
<p>如果没有任何一个case 标签能匹配上 switch 表达式的值，程序将执行紧跟在default 标签(default label）后面的语句。例如，可以增加一个计数值来统计非元音字母的数量，只要在 default分支内不断递增名为otherCnt的变量就可以了。</p>
<p><strong>内部变量定义</strong></p>
<p>如果需要为某个case分支定义并初始化一个变量，我们应该把变量定义在块内，从而确保后面的所有case标签都在变量的作用域之外。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="literal">true</span>:&#123;</span><br><span class="line">	<span class="comment">//正确:声明语句位于语句块内部</span></span><br><span class="line">	string file_name = <span class="built_in">get_file_name</span> () ;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">	<span class="keyword">if</span> (file_name . <span class="built_in">empty</span>())<span class="comment">//错误:file_name不在作用域之内</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>当不确定循环多少次时或循环结束后访问循环控制变量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//重复读入数据，直至到达文件末尾或者遇到其他输入问题</span></span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; i)</span><br><span class="line">	v.<span class="built_in">push_back</span> (i);</span><br><span class="line"><span class="comment">//寻找第一个负值元素</span></span><br><span class="line"><span class="keyword">auto</span> beg = v.<span class="built_in">begin</span> ( );</span><br><span class="line"><span class="keyword">while</span> (beg != v.<span class="built_in">end</span> () &amp;&amp; *beg &gt;= <span class="number">0</span>)</span><br><span class="line">	++beg;</span><br><span class="line"><span class="keyword">if</span> (beg == v.<span class="built_in">end</span>( ))</span><br><span class="line">	<span class="comment">//此时我们知道v中的所有元素都大于等于0</span></span><br></pre></td></tr></table></figure>

<h3 id="传统for语句"><a href="#传统for语句" class="headerlink" title="传统for语句"></a>传统for语句</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (init-statemen; condition; expression)</span><br><span class="line">	statement</span><br></pre></td></tr></table></figure>

<p><label stype = "color:red">init-statemen指挥执行一次，牢记for语句头中定义的对象只在for循环体内可见。</label></p>
<p><strong>for语句头中的多重定义</strong></p>
<p>init-statemen可以定义多个变量，但只能定义一种类型。</p>
<p><strong>for语句头省略</strong></p>
<p>for语句头能省略掉init-statement、condition和 expression中的任何一个(或者全部)，但分号必须保留。</p>
<h3 id="范围for语句"><a href="#范围for语句" class="headerlink" title="范围for语句"></a>范围for语句</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (declaration : expression)</span><br><span class="line">	statement</span><br></pre></td></tr></table></figure>

<h3 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h3><p>do while语句( do while statement）和 while语句非常相似，唯一的区别是，do while语句先执行循环体后检查··条件。不管条件的值如何，我们都至少执行一次循环。do while语句的语法形式如下所示:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">do</span></span></span><br><span class="line"><span class="function">	statement</span></span><br><span class="line"><span class="function"><span class="title">while</span> <span class="params">(condition)</span> </span>;</span><br></pre></td></tr></table></figure>

<p>do while语句应该在括号包围起来的条件后面用一个分号表示语句结束。</p>
<p><label stype = "color:red">因为对于do while来说先执行语句或者块，后判断条件，所以不允许在条件部分定义变量。</label></p>
<hr>
<h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>break语句(break statement）负责终止离它最近的while、do while、for或switch语句，并从这些语句之后的第一条语句开始继续执行。</p>
<h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>continue语句（continue statement）终止最近的循环中的当前迭代并立即开始下一次迭代。continue语句只能出现在 for、while和 do while循环的内部，或者嵌套在此类循环里的语句或块的内部。和 break语句不同的是，只有当switch语句嵌套在迭代语句内部时，才能在 switch里使用continue，它会使程序直接跳出switch，并重新执行switch外的循环。</p>
<h3 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h3><p>不要在程序中使用goto语句，因为它使得程序既难理解又难修改。</p>
<hr>
<h2 id="try语句块和异常处理"><a href="#try语句块和异常处理" class="headerlink" title="try语句块和异常处理"></a>try语句块和异常处理</h2><h3 id="throw表达式"><a href="#throw表达式" class="headerlink" title="throw表达式"></a>throw表达式</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sales_item item1, item2;</span><br><span class="line">cin &gt;&gt; item1 &gt;&gt; item2;</span><br><span class="line"><span class="comment">//首先检查item1和item2是否表示同一种书籍</span></span><br><span class="line"><span class="keyword">if</span> (item1.<span class="built_in">isbn</span> () == item2 .<span class="built_in">isbn</span> () ) &#123;</span><br><span class="line">	cout &lt;&lt; item1 + item2 &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//表示成功</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	cerr &lt;&lt; <span class="string">&quot;Data must refer to same ISBN&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> -l; <span class="comment">//表示失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在真实的程序中，应该把对象相加的代码和用户交互的代码分离开来。此例中，我们改写程序使得检查完成后不再直接输出一条信息，而是抛出一个异常:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先检查两条数据是否是关于同一种书籍的</span></span><br><span class="line"><span class="keyword">if</span> (item1.<span class="built_in">isbn</span> () != item2 .<span class="built_in">isbn</span> ( ))</span><br><span class="line">	<span class="keyword">throw</span> <span class="built_in">runtime_error</span> ( <span class="string">&quot;Data must refer to same ISBN&quot;</span>);</span><br><span class="line">	<span class="comment">//如果程序执行到了这里，表示两个ISBN是相同的</span></span><br><span class="line">cout &lt;&lt; item1 + item2 &lt;&lt; endl ;</span><br></pre></td></tr></table></figure>

<p>在这段代码中，如果ISBN不一样就抛出一个异常，该异常是类型runtime_error的对象。抛出异常将终止当前的函数，并把控制权转移给能处理该异常的代码。</p>
<h3 id="try语句块"><a href="#try语句块" class="headerlink" title="try语句块"></a>try语句块</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	program-statements</span><br><span class="line">&#125; <span class="built_in"><span class="keyword">catch</span></span> (exception-declaration)&#123;</span><br><span class="line">	handler-statements</span><br><span class="line">&#125; <span class="built_in"><span class="keyword">catch</span></span> (exception-declaration) &#123;</span><br><span class="line">	handler-statements</span><br><span class="line">&#125; <span class="comment">//...</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>try语句块的一开始是关键字try，随后紧跟着一个块，跟在try 块之后的是一个或多个catch子句。catch子句包括三部分:关键字catch、括号内一个(可能未命名的）对象的声明（称作<strong>异常声明，exception declaration</strong>）以及一个块。当选中了某个catch子句处理异常之后，执行与之对应的块。catch 一旦完成，程序跳转到try语句块最后一个catch子句之后的那条语句继续执行。</p>
</li>
<li><p>try语句块中的program-statements组成程序的正常逻辑，像其他任何块一样，program-statements可以有包括声明在内的任意C++语句。一如往常，try语句块内声明的变量在块外部无法访问，特别是在catch子句内也无法访问。</p>
</li>
</ul>
<p><strong>编写处理的代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (cin &gt;&gt; item1 &gt;&gt; item2) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//执行添加两个Sales_item对象的代码	</span></span><br><span class="line">		<span class="comment">//如果添加失败，代码抛出一个runtime_error异常</span></span><br><span class="line">		&#125; <span class="built_in"><span class="keyword">catch</span></span> (runtime_error err) &#123;</span><br><span class="line">			<span class="comment">//提醒用户两个ISBN必须一致，询问是否重新输入</span></span><br><span class="line">			cout &lt;&lt; err.<span class="built_in">what</span> () </span><br><span class="line">				 &lt;&lt; <span class="string">&quot;\nTry Again? Enter y or n&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">char</span> c ;</span><br><span class="line">			cin &gt;&gt; c;</span><br><span class="line">        	<span class="keyword">if</span>(!cin || c== <span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么如果输入书籍不同，则会输出两句话：</p>
<p>Data must refer to same ISBN</p>
<p>Try Again? Enter y or n</p>
<p><strong>函数在寻找处理代码的过程中退出</strong>（*****）<br>在复杂系统中，程序在遇到抛出异常的代码前，其执行路径可能已经经过了多个try语句块。例如，一个try语句块可能调用了包含另一个try语句块的函数，新的try语句块可能调用了包含又一个try语句块的新函数，以此类推。</p>
<p>寻找处理代码的过程与函数调用链刚好相反。当异常被抛出时，首先搜索抛出该异常的函数。如果没找到匹配的 catch子句，终止该函数，并在调用该函数的函数中继续寻找。如果还是没有找到匹配的 catch子句，这个新的函数也被终止，继续搜索调用它的函数。以此类推，沿着程序的执行路径逐层回退，直到找到适当类型的catch子句为止。</p>
<p>如果最终还是没能找到任何匹配的 catch子句，程序转到名为terminate的标准库函数。该函数的行为与系统有关，一般情况下，执行该函数将导致程序非正常退出。</p>
<p>处理复杂异常超出了本书的范围。</p>
<hr>
<h3 id="标准异常（-）"><a href="#标准异常（-）" class="headerlink" title="标准异常（*）"></a>标准异常（*）</h3><p>表5.1:<stdexcept>定义的异常类</p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">问题</th>
</tr>
</thead>
<tbody><tr>
<td align="center">exception</td>
<td align="center">最常见的问题</td>
</tr>
<tr>
<td align="center">runtime_error</td>
<td align="center">只有在运行时才能检测出的问题</td>
</tr>
<tr>
<td align="center">range_error</td>
<td align="center">运行时错误:生成的结果超出了有意义的值域范围</td>
</tr>
<tr>
<td align="center">overflow_error</td>
<td align="center">运行时错误:计算上溢</td>
</tr>
<tr>
<td align="center">underflow_error</td>
<td align="center">运行时错误:计算下溢</td>
</tr>
<tr>
<td align="center">logic_error</td>
<td align="center">程序逻辑错误</td>
</tr>
<tr>
<td align="center">domain_error</td>
<td align="center">逻辑错误:参数对应的结果值不存在</td>
</tr>
<tr>
<td align="center">invalid_argument</td>
<td align="center">逻辑错误:无效参数</td>
</tr>
<tr>
<td align="center">length_error</td>
<td align="center">逻辑错误:试图创建一个超出该类型最大长度的对象</td>
</tr>
<tr>
<td align="center">out_of_range</td>
<td align="center">逻辑错误:使用一个超出有效范围的值</td>
</tr>
</tbody></table>
<p>我们只能以默认初始化的方式初始化 exception,bad_alloc和 bad _cast对象，不允许为这些对象提供初始值。</p>
<p>其他异常类型的行为则恰好相反:应该使用string对象或者C风格字符串初始化这些类型的对象，但是不允许使用默认初始化的方式。当创建此类对象时，必须提供初始值，该初始值含有错误相关的信息。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第六章</title>
    <url>/2021/12/10/%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><p>包括返回类型、函数名字、0到多个形参组成的列表及函数体。</p>
<p>调用运算符来执行函数。函数的调用完成两项工作:一是用实参初始化函数对应的形参，二是将控制权转移给被调用函数。此时，主调函数(calling function)的执行被暂时中断，被调函数（called function)开始执行。</p>
<p><strong>形参和实参</strong></p>
<p>形参和实参数量类型顺序必须一一对应。</p>
<span id="more"></span>

<h3 id="局部对象"><a href="#局部对象" class="headerlink" title="局部对象"></a>局部对象</h3><p>形参和函数内部定义变量统称<strong>局部变量</strong>。同时局部变量还会隐藏在外层作用域中。函数体之外的对象存在于程序的整个执行过程中。局部变量的生命周期依赖定义的方式。</p>
<p><strong>自动对象</strong></p>
<p>对于普通局部变量对应的对象来说，当函数的控制路径经过变量定义语句时创建该对象，当到达定义所在的块末尾时销毁它。</p>
<p><strong>局部静态对象</strong></p>
<p>可以将局部变量定义成static类型从而获得这样的对象。局部静态对象(local static object）在程序的执行路径第一次经过对象定义语句时初始化，并且直到程序终止才被销毁，在此期间即使对象所在的函数结束执行也不会对它有影响。</p>
<p>如果局部静态变量没有显式的初始值，它将执行值初始化，内置类型的局部静态变量初始化为0。</p>
<h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>函数的声明和函数的定义非常类似，唯一的区别是函数声明无须函数体，用一个分号替代即可。</p>
<p>因为函数的声明不包含函数体，所以也就无须形参的名字。在函数的声明中经常省略形参的名字。尽管如此，写上形参的名字可以帮助使用者更好地理解函数的功能。</p>
<p>函数的三要素（返回类型、函数名、形参类型）描述了函数的接口，说明了调用该函数所需的全部信息。函数声明也称作<strong>函数原型</strong>。通常把它放在头文件中。</p>
<h3 id="分离式编译"><a href="#分离式编译" class="headerlink" title="分离式编译"></a>分离式编译</h3><p>一个项目由若干个源文件共同实现，而每个源文件(<strong>.cpp</strong>)单独编译成目标文件(<strong>.obj</strong>)，最后将所有目标文件连接起来形成单一的可执行文件(<strong>.exe</strong>)的过程。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">---------------test.h-------------------</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;<span class="comment">//这里声明一个函数f</span></span><br><span class="line">---------------test.cpp--------------</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>”test.h”</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">…<span class="comment">//do something</span></span><br><span class="line">&#125;  <span class="comment">//这里实现出test.h中声明的f函数</span></span><br><span class="line">---------------main.cpp--------------</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>”test.h”</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">f</span>(); <span class="comment">//调用f，f具有外部连接类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面程序在编译器内部的过程为：</p>
<ul>
<li>在编译mian.cpp的时候，编译器并不知道f的实现，所以当碰到对f的调用时只是给出一个<strong>指示</strong>，指示连接器为它寻找f的实现体，所以main.obj中没有关于f实现的二进制代码。</li>
<li>在编译test.cpp的时候，编译器找到了f的实现，所以在test.obj里有f实现的二进制代码。</li>
<li>连接时，连接器在test.obj中找到f实现的<strong>二进制地址</strong>，然后将main.obj中未解决的f地址替换成该二进制地址。</li>
</ul>
<p>作者：凉拌姨妈好吃<br>链接：<a href="https://www.jianshu.com/p/9ca511da30f4">https://www.jianshu.com/p/9ca511da30f4</a><br>来源：简书</p>
<hr>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>形参初始化的机理与变量初始化一样。形参的类型决定了形参和实参交互的方式。如果形参是引用类型，它将绑定到对应的实参上;否则，将实参的值拷贝后赋给形参。</p>
<ul>
<li>当形参是引用类型时，我们说它对应的实参被引用传递或者函数被传引用调用。和其他引用一样，引用形参也是它绑定的对象的别名;也就是说，引用形参是它对应的实参的别名。</li>
<li>当实参的值被拷贝给形参时，形参和实参是两个相互独立的对象。我们说这样的实参被值传递或者函数被传值调用。</li>
</ul>
<h3 id="传值参数"><a href="#传值参数" class="headerlink" title="传值参数"></a>传值参数</h3><p><code>ret *= val--; //将val的值减1</code></p>
<p>尽管fact函数改变了val的值,但是这个改动不会影响传入fact的实参。调用fact (i)不会改变i的值。</p>
<p><strong>形参指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n= <span class="number">0</span>,i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;n, *q = &amp;i; 				<span class="comment">//p指向n;q指向i</span></span><br><span class="line">*p = <span class="number">42</span>;							<span class="comment">// n的值改变;p不变</span></span><br><span class="line">p =q;								<span class="comment">// p现在指向了i;但是i和n的值都不变</span></span><br></pre></td></tr></table></figure>

<p>指针的行为和其他非引用类型一样。当执行指针拷贝操作时，拷贝的是指针的值。拷贝之后，两个指针是不同的指针。因为指针使我们可以间接地访问它所指的对象，所以通过指针可以修改它所指对象的值:</p>
<p><em>C++中建议使用引用代替指针</em></p>
<h3 id="传引用参数"><a href="#传引用参数" class="headerlink" title="传引用参数"></a>传引用参数</h3><p>引用参数可以改变引用对象的值。</p>
<p><strong>使用引用避免拷贝</strong></p>
<p>拷贝大的类类型对象或者容器对象比较低效，甚全有的类类型（包括IO类型在内)根本就不支持拷贝操作。当某种类型不支持拷贝操作时，函数只能通过引用形参访问该类型的对象。如string类型。若想避免改动可以加上const</p>
<p><strong>使用引用形参返回额外的信息</strong></p>
<p>一个函数只能返回一个值，然而有时函数需要同时返回多个值，引用形参为我们一次返回多个结果提供了有效的途径。</p>
<p>举个例子，我们定义一个名为find_char的函数，它返回在string对象中某个指定字符第一次出现的位置。同时，我们也希望函数能返回该字符出现的总次数，该如何定义函数使得它能够既返回位置也返回出现次数呢?</p>
<ul>
<li>定义一个新的数据类型，让它包含位置和数量两个成员。</li>
<li>还有另一种更简单的方法，我们可以给函数传入一个额外的引用实参，令其保存字符出现的次数:</li>
</ul>
<h3 id="caonst形参和实参"><a href="#caonst形参和实参" class="headerlink" title="caonst形参和实参"></a>caonst形参和实参</h3><p>和其他初始化过程一样，当用实参初始化形参时会忽略掉顶层const。换句话说，形参的顶层const被忽略掉了。当形参有顶层const时，传给它常量对象或者非常量对象都是可以的。</p>
<p><code>void fcn ( const int i)&#123;/* fcn能够读取i，但是不能向i写值*/&#125;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcn</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i)</span></span>&#123;<span class="comment">/* fcn能够读取i，但是不能向i写值*/</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fcn</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="comment">/* ...*/</span> &#125;<span class="comment">//错误:重复定义了fcn(int)</span></span><br></pre></td></tr></table></figure>

<p>虽然函数可以重载，但是上面由于忽略了const，所以时一模一样的。</p>
<p><strong>指针或引用 形参与const</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该函数接受一个int对象的引用，然后将对象的值置为0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span> <span class="params">(<span class="keyword">int</span> &amp;i)</span><span class="comment">//i是传给reset函数的对象的另一个名字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">i =<span class="number">0</span>;								<span class="comment">//改变了i所引对象的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *cp = &amp;i;				<span class="comment">//正确:但是cp不能改变i（参见2.4.2节，第56页)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = i;				<span class="comment">//正确:但是r不能改变i（参见2.4.1节，第55 页)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">42</span>; 			<span class="comment">//正确:（参见2.4.1节，第55页)</span></span><br><span class="line"><span class="keyword">int</span> *p = cp;					<span class="comment">//错误:p的类型和cp 的类型不匹配（参见2.4.2节，第56页)</span></span><br><span class="line"><span class="keyword">int</span> &amp;r3 = r;					<span class="comment">//错误:r3的类型和r的类型不匹配（参见2.4.1节，第55页)</span></span><br><span class="line"><span class="keyword">int</span> &amp;r4 =<span class="number">42</span>;					<span class="comment">//错误:不能用字面值初始化一个非常量引用(参见2.3.1节，第45页)</span></span><br></pre></td></tr></table></figure>

<p>将同样的初始化规则应用到参数传递上可得如下形式:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = i;</span><br><span class="line">string : :size_type ctr =<span class="number">0</span> ;<span class="built_in">reset</span> (&amp;i) ;		<span class="comment">//调用形参类型是int*的reset函数</span></span><br><span class="line"><span class="built_in">reset</span> ( &amp;ci) ;									<span class="comment">//错误:不能用指向const int对象的指针初始化int*</span></span><br><span class="line"><span class="built_in">reset</span> (i);										<span class="comment">//调用形参类型是int&amp;的reset函数</span></span><br><span class="line"><span class="built_in">reset</span> (ci);										<span class="comment">//错误:不能把普通引用绑定到const对象ci上</span></span><br><span class="line"><span class="built_in">reset</span> (<span class="number">42</span>);										<span class="comment">//错误:不能把普通应用绑定到字面值上</span></span><br><span class="line"><span class="built_in">reset</span> (ctr) ;									<span class="comment">//错误:类型不匹配，ctr是无符号类型</span></span><br><span class="line"><span class="comment">//正确:find_char的第一个形参是对常量的引用</span></span><br><span class="line"><span class="built_in">find_char</span>( <span class="string">&quot;Hello world ! &quot;</span> , <span class="string">&#x27;o&#x27;</span>, ctr) ;</span><br></pre></td></tr></table></figure>

<p>调用reset只能使用int类型。不能使用字面值、结果为int的表达式。</p>
<p><strong>尽量使用常量引用</strong></p>
<p>则尽可能在不需要改变的形参前加const。</p>
<h3 id="数组形参"><a href="#数组形参" class="headerlink" title="数组形参"></a>数组形参</h3><p>尽管不能以值传递的方式传递数组，但是我们可以把形参写成类似数组的形式://尽管形式不同，但这三个 print函数是等价的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每个函数都有一个const int*类型的形参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* )</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> [] )</span></span>; <span class="comment">//可以看出来，函数的意图是作用于一个数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> [<span class="number">10</span>] )</span></span>;<span class="comment">//这里的维度表示我们期望数组含有多少元素，实际不一定</span></span><br></pre></td></tr></table></figure>

<p>因为被转化为指针所以需要一个额外参数记录数组长度。</p>
<p><strong>使用标准库规范</strong></p>
<p>也可以使用标准库里的begin指针</p>
<h3 id="main：处理命令行选项"><a href="#main：处理命令行选项" class="headerlink" title="main：处理命令行选项"></a>main：处理命令行选项</h3><p>main()函数的参数可以是不为空，main()函数中的参数有两个，一个是argc表示数组中元素的个数，一个是char *argv[],表示的是指向一个字符串数组的指针，所以也可以写成char **argv。有参的main()函数可写为main(int argc,char *argv[])。</p>
<p>当实参传给main()函数时，argv的第一个元素是指向程序的名字或者是一个空字符串，接下来就是将实参传递给形参。最后一个元素是保证是0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">argv[<span class="number">0</span>] = “test”;</span><br><span class="line">argv[<span class="number">1</span>]= ”-d”;</span><br><span class="line">argv[<span class="number">2</span>]= ”-o”;</span><br><span class="line">argv[<span class="number">3</span>]= ”ofile”;</span><br><span class="line">argv[<span class="number">4</span>]= ”data0”;</span><br><span class="line">argv[<span class="number">5</span>]= ”<span class="number">0</span>”;</span><br></pre></td></tr></table></figure>

<p>这个数组的长度是5，因为argv[]实参是从1开始，argv[0]元素是程序的名字，非用户输入。</p>
<h3 id="含有可变形参的函数"><a href="#含有可变形参的函数" class="headerlink" title="含有可变形参的函数"></a>含有可变形参的函数</h3><p><strong>initializer_list形参</strong></p>
<p>如果函数的实参数量未知但是全部实参的类型都相同，我们可以使用initializer_list类型的形参。initializer_list是一种标准库类型，用于表示某种特定类型的值的数组。initializer_list类型定义在同名的头文件中。它的操作与vector相似，不同的时这个的元素永远时常量</p>
<h2 id="返回类型和return语句"><a href="#返回类型和return语句" class="headerlink" title="返回类型和return语句"></a>返回类型和return语句</h2><h3 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h3><p>可以使用return退出函数，也可以return 返回一个void的函数。</p>
<h3 id="有返回值的函数"><a href="#有返回值的函数" class="headerlink" title="有返回值的函数"></a>有返回值的函数</h3><p>该函数必须return一个与函数返回值类型相同的类型，也可以返回一个能隐式转换成返回值类型的类型。</p>
<p><strong>值是如何被返回</strong></p>
<p>返回的值是用于初始化调用的一个临时变量。</p>
<p>如果使用引用作为返回值，则返回的知识一个别名，并不会拷贝对象。</p>
<p><strong>不要返回局部对象的引用和指针</strong></p>
<p><strong>引用返回左值</strong></p>
<p>调用一个返回引用的函数得到左值，其他为右值，常量引用不能赋值。</p>
<p><strong>列表初始化返回值</strong></p>
<p>C++11新标准规定，函数可以返回花括号包围的值的列表。类似于其他返回结果，此处的列表也用来对表示函数返回的临时量进行初始化。如果列表为空，临时量执行值初始化，否则，返回的值由函数的返回类型决定。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">process</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	<span class="comment">// expected 和actual是string对象</span></span><br><span class="line">	<span class="keyword">if</span> (expected . <span class="built_in">empty</span>())</span><br><span class="line">		<span class="keyword">return</span> &#123;f&#125;;							<span class="comment">//返回一个空vector对象</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (expected -= actual)</span><br><span class="line">		<span class="keyword">return</span> &#123; <span class="string">&quot;functionX&quot;</span> ,<span class="string">&quot;okay&quot;</span> &#125;;		<span class="comment">//返回列表初始化的vector对象</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> &#123; <span class="string">&quot;functionx&quot;</span> ,expected,actual &#125; ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>主函数main的返回值</strong></p>
<p>之前介绍过，如果函数的返回类型不是void，那么它必须返回一个值。但是这条规则有个例外:我们允许main函数没有return语句直接结束。如果控制到达了main函数的结尾处而且没有return语句，编译器将隐式地插入一条返回0的return语句。</p>
<p><strong>递归</strong></p>
<p>指针函数调用自身。main函数不能嗲用自己</p>
<h3 id="返回数组指针"><a href="#返回数组指针" class="headerlink" title="返回数组指针"></a>返回数组指针</h3><p>因不能拷贝数组，所以可以返回一个数组指针</p>
<p><strong>声明返回数组指针的函数</strong></p>
<p><code>Tvpe ( * function (parameter list) )[dimensionl</code></p>
<p><code>int(* func(int i)) [10];</code><br>可以按照以下的顺序来逐层理解该声明的含义:</p>
<ul>
<li><p><code>func(int i)</code>表示调用func函数时需要一个int类型的实参。</p>
</li>
<li><p><code>(*func(int i))</code>意味着我们可以对函数调用的结果执行解引用操作。</p>
</li>
<li><p><code>(*func(int i) ) [10]</code>表示解引用func的调用将得到一个大小是10的数组。</p>
</li>
<li><p><code>int(*func(int i) ) [10]</code>表示数组中的元素是int类型。</p>
</li>
</ul>
<p><strong>使用位置返回类型</strong></p>
<p>由于这里即使复杂度提升也没有很明显的提升，所以可以使用下面的方法</p>
<p><strong>使用decltye</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> odd[] =&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>，<span class="number">7</span>,<span class="number">9</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> even [] = &#123; o ,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span> &#125; ;</span><br><span class="line"><span class="comment">//返回一个指针，该指针指向含有5个整数的数组</span></span><br><span class="line"><span class="keyword">decltype</span> (odd) *<span class="built_in">arrPtr</span>(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> (i % <span class="number">2</span>)? &amp;odd : &amp;even;		<span class="comment">//返回一个指向数组的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何要返回指针务必加一个<code>*</code>。</p>
<h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>如果同一作用域内的几个函数名字相同但形参列表不同，我们称之为重载函数。中我们定义了几个名为print 的函数，main函数不能重载。</p>
<p><strong>定义重载函数</strong></p>
<p>对于重载的函数来说，它们应该在形参数量或形参类型上有所不同。在上面的代码中，虽然每个函数都只接受一个参数，但是参数的类型不同。<br>不允许两个函数除了返回类型外其他所有的要素都相同。假设有两个函数，它们的形参列表一样但是返回类型不同，则第二个函数的声明是错误的。</p>
<p><strong>判断两个形参的类型是否相异</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每对声明的是同一个函数</span></span><br><span class="line"><span class="function">Record <span class="title">lookup</span> <span class="params">(<span class="keyword">const</span> Account &amp;acct)</span></span>;</span><br><span class="line"><span class="function">Record <span class="title">lookup</span> <span class="params">(<span class="keyword">const</span> Account&amp;)</span></span>;			<span class="comment">//省略了形参的名字</span></span><br><span class="line"><span class="keyword">typedef</span> Phone Telno;</span><br><span class="line"><span class="function">Record <span class="title">lookup</span> <span class="params">(<span class="keyword">const</span> Phone&amp;)</span></span>;</span><br><span class="line"><span class="function">Record <span class="title">lookup</span> <span class="params">(<span class="keyword">const</span> Telno&amp;)</span></span>;			<span class="comment">//Telno和Phone 的类型相同</span></span><br></pre></td></tr></table></figure>

<p><strong>重载和const形参</strong></p>
<p>因为顶层const不影响函数的对象，所以顶层const和无const形参无法区分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Record <span class="title">lookup</span> <span class="params">(Phone)</span> </span>;</span><br><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="keyword">const</span> Phone)</span></span>;			<span class="comment">//重复声明了Record lookup(Phone)</span></span><br></pre></td></tr></table></figure>

<p><strong>const_cast和重载</strong></p>
<p>可以使用该函数去掉或者加上const，再返回去。</p>
<p><strong>调用重载的函数</strong></p>
<p>现在我们需要掌握的是，当调用重载函数时有三种可能的结果:</p>
<ul>
<li>编译器找到一个与实参最佳匹配(best match）的函数，并生成调用该函数的代码。</li>
<li>找不到任何一个函数与调用的实参匹配，此时编译器发出无匹配（no match）的错误信息。</li>
<li>有多于一个函数可以匹配,但是每一个都不是明显的最佳选择。此时也将发生错误，称为二义性调用( ambiguous call)。</li>
</ul>
<h3 id="重载与作用域"><a href="#重载与作用域" class="headerlink" title="重载与作用域"></a>重载与作用域</h3><p>重载对作用域的一般性质并没有什么改变:如果我们在内层作用域中声明名字，它将隐藏外层作用域中声明的同名实体。在不同的作用域中无法重载函数名:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string read o) ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">const</span> string &amp;)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">double</span>)</span></span>;<span class="number">1</span>/重载print函数<span class="function"><span class="keyword">void</span> <span class="title">fooBar</span><span class="params">(<span class="keyword">int</span> ival)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in"><span class="keyword">bool</span></span>(read= <span class="literal">false</span>; 			<span class="comment">//新作用域:隐藏了外层的read</span></span><br><span class="line">	string s = <span class="built_in">read</span> ( ); 		<span class="comment">//错误:read是一个布尔值，而非函数</span></span><br><span class="line">	<span class="comment">//不好的习惯:通常来说，在局部作用域中声明函数不是一个好的选择</span></span><br><span class="line">	<span class="keyword">void</span> print <span class="keyword">int</span>);			<span class="comment">//新作用域:隐藏了之前的print</span></span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;value: &quot;</span>);			<span class="comment">//错误:print (const string &amp;)被隐藏掉了</span></span><br><span class="line">	<span class="built_in">print</span>(ival);				<span class="comment">//正确:当前print (int)可见</span></span><br><span class="line">	<span class="built_in">print</span> (<span class="number">3.14</span>);				<span class="comment">//正确:调用print(int) ; print (double)被隐藏掉了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特殊用于语言特性"><a href="#特殊用于语言特性" class="headerlink" title="特殊用于语言特性"></a>特殊用于语言特性</h2><h3 id="默认实参"><a href="#默认实参" class="headerlink" title="默认实参"></a>默认实参</h3><p>在声明函数时可以给形参赋予一个默认值，默认实参作为形参的初始值出现在形参列表中。我们可以为一个或多个形参定义默认值，不过需要注意的是，一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> string: :size_type sz;				<span class="comment">//关于typedef参见2.5.1节(第60页)</span></span><br><span class="line"><span class="function">string <span class="title">screen</span> <span class="params">(sz ht = <span class="number">24</span>, sz wid = <span class="number">80</span>,<span class="keyword">char</span> backgrnd = <span class="string">&#x27; &#x27;</span> )</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>使用默认实参调用函数</strong></p>
<p>函数调用时实参按其位置解析，默认实参负责填补函数调用缺少的尾部实参‘靠右侧位置)，调用函数时，传入的实参是从左向右依次传入函数形参中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string window;</span><br><span class="line">window = <span class="built_in">screen</span> () ;					<span class="comment">//等价于screen (24,80,&#x27;&#x27;)</span></span><br><span class="line">window = <span class="built_in">screen</span> (<span class="number">66</span>);					<span class="comment">//等价于screen (66,80,&#x27;</span></span><br><span class="line">window= <span class="built_in">screen</span> (<span class="number">66</span>，<span class="number">256</span>);				<span class="comment">//screen (66,256,&#x27; &#x27;)</span></span><br><span class="line">window = <span class="built_in">screen</span> (<span class="number">66</span>，<span class="number">256</span>,<span class="string">&#x27;#’);			//screen (66,256,&#x27;</span>#<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure>

<p><strong>默认实参声明</strong></p>
<p>对于函数的声明来说，通常的习惯是将其放在头文件中，并且一个函数只声明一次，但是多次声明同一个函数也是合法的。不过有一点需要注意，在给定的作用域中一个形参只能被赋予一次默认实参,换句话说，函数的后续声明只能为之前那些没有默认值的形参添加默认实参，而且该形参右侧的所有形参必须都有默认值。</p>
<p><em>通常，应该在函数声明中指定默认实参，并将该声明放在合适的头文件中。</em></p>
<p><strong>默认实参初始值</strong></p>
<p>局部变量不能作为默认实参。除此之外,只要表达式的类型能转换成形参所需的类型，该表达式就能作为默认实参:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wd、def和ht的声明必须出现在函数之外</span></span><br><span class="line">sz wd = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">char</span> def = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="function">sz <span class="title">ht</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">string <span class="title">screen</span><span class="params">(sz = ht(), sz = wd, <span class="keyword">char</span> = def)</span> </span>;</span><br><span class="line">string window = <span class="built_in">screen</span> ();<span class="comment">//调用 screen (ht ( ) , 80,&#x27; &#x27;)</span></span><br></pre></td></tr></table></figure>


<p>用作默认实参的名字在函数声明所在的作用域内解析，而这些名字的求值过程发生在函数调用时:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	def =<span class="string">&#x27;*’;				//改变默认实参的值</span></span><br><span class="line"><span class="string">	sz wd=100 ;				//隐藏了外层定义的wd，但是没有改变默认值</span></span><br><span class="line"><span class="string">	window = screen ();		//调用screen(ht (), 80, &#x27;</span>*’ )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内联函数和constexpr函数"><a href="#内联函数和constexpr函数" class="headerlink" title="内联函数和constexpr函数"></a>内联函数和constexpr函数</h3><p>把规模较小的操作定义成函数有很多好处，主要包括:</p>
<ul>
<li>阅读和理解shorterString函数的调用要比读懂等价的条件表达式容易得多。</li>
<li>使用函数可以确保行为的统一，每次相关操作都能保证按照同样的方式进行。</li>
<li>如果我们需要修改计算过程，显然修改函数要比先找到等价表达式所有出现的地方再逐一修改更容易。</li>
<li>函数可以被其他应用重复利用，省去了程序员重新编写的代价。</li>
</ul>
<p>然而，使用shorterstring 函数也存在一个潜在的缺点:</p>
<ul>
<li>调用函数一般比求等价表达式的值要慢一些。在大多数机器上，一次函数调用其实包含着一系列工作:调用前要先保存寄存器，并在返回时恢复;可能需要拷贝实参;程序转向一个新的位置继续执行。</li>
</ul>
<p><strong>内联函数可避免函数调用的开销</strong></p>
<p>将函数指定为内联函数(inline)，通常就是将它在每个调用点上“内联地”展开。假设我们把shorterstring 函数定义成内联函数，则如下调用</p>
<p><code>cout &lt;&lt; shorterstring(s1, s2) &lt;&lt;endl;</code></p>
<p>将在编译过程中展开成类似于下面的形式<br><code>cout&lt;&lt;( (s1.size() &lt; s2.size() ? s1 : s2)&lt;&lt;endl;</code></p>
<p>从而消除了shorterString函数的运行时开销。</p>
<p>在shorterstring函数的返回类型前面加上关键字inline,这样就可以将它声明成内联函数了:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内联版本:寻找两个string对象中较短的那个</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> string &amp;<span class="title">shorterstring</span><span class="params">(<span class="keyword">const</span> string &amp;s1,<span class="keyword">const</span> string &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s1.<span class="built_in">size</span> () &lt;= s2.<span class="built_in">size</span> () ? sl : s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内联说明知识向编译器发生的一个请求，编译器可以选择忽略。</p>
<p><strong>constexpr函数</strong></p>
<p>是指能用于常量表达式的函数。定义constexpr函数的方法与其他函数类似，不过要遵循几项约定:函数的返回类型及所有形参的类型都得是字面值类型，而且函数体中必须有且只有一条return语句:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">new_sz</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">42</span>;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> foo = <span class="built_in">new_sz</span>();					<span class="comment">//正确:foo是一个常量表达式</span></span><br></pre></td></tr></table></figure>

<p>执行该初始化任务时，编译器把对constexpr函数的调用替换成其结果值。为了能在编译过程中随时展开，constexpr函数被隐式地指定为内联函数。</p>
<p>我们允许constexpr函数的返回值并非一个常量:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果arg是常量表达式，则scale (arg)也是常量表达式</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> <span class="title">scale</span><span class="params">(<span class="keyword">size_t</span> cnt)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">new_sz</span> () * cnt; &#125;</span><br></pre></td></tr></table></figure>

<p>当scale的实参是常量表达式时，它的返回值也是常量表达式;反之则不然:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="built_in">scale</span>(<span class="number">2</span>)];					<span class="comment">//正确:scale (2)是常量表达式</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;							<span class="comment">//i不是常量表达式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a2</span><span class="params">(scale(i) ];					<span class="comment">//错误:scale(i)不是常量表达式</span></span></span></span><br></pre></td></tr></table></figure>

<p>如果非常亮表达式调用scale函数，当scale函数用在需要常量表达式时，会报错。</p>
<p><label style="color:red">constexpr函数不一定返回常量表达式</label></p>
<h4 id="与const的比较"><a href="#与const的比较" class="headerlink" title="与const的比较"></a>与const的比较</h4><p>const并不能代表“常量”，它仅仅是对变量的一个修饰，告诉编译器这个变量只能被初始化，且不能被直接修改（实际上可以通过堆栈溢出等方式修改）。</p>
<p>constexpr可以用来修饰变量、函数、构造函数。一旦以上任何元素被constexpr修饰，那么等于说是告诉编译器 “请大胆地将我看成编译时就能得出常量值的表达式去优化我”。</p>
<p><strong>把内联函数和constexpr函数放在头文件内</strong></p>
<h3 id="调试帮助"><a href="#调试帮助" class="headerlink" title="调试帮助"></a>调试帮助</h3><p>基本思想是，程序可以包含一些用于调试的代码，但是这些代码只在开发程序时使用。当应用程序编写完成准备发布时，要先屏蔽掉调试代码。这种方法用到两项预处理功能:assert和 NDEBUG。</p>
<p><strong>assert预处理宏</strong></p>
<p><code>assert ( expr);</code></p>
<p>首先对expr求值，如果表达式为假（即 0)，assert输出信息并终止程序的执行。如果表达式为真（即非0)，assert什么也不做。头文件为cassert。</p>
<p>assert宏常用于检查“不能发生”的条件。例如，一个对输入文本进行操作的程序可能要求所有给定单词的长度都大于某个阈值。此时,程序可以包含一条如下所示的语句:<br><code>assert(word . size() &gt; threshold);</code></p>
<p><strong>NDEBUG预处理变量</strong></p>
<p>assert 的行为依赖于一个名为NDEBUG的预处理变量的状态。如果定义了NDEBUG,则assert什么也不做。默认状态下没有定义NDEBUG,此时assert将执行运行时检查。</p>
<p>我们可以使用一个#define语句定义NDEBUG，从而关闭调试状态。</p>
<p>此外，也可以使用NDEBUG编写自己的条件调试代码。如果NDEBUG未定义，将执行#ifndef和#endif之间的代码;如果定义了NDEBUG，这些代码将被忽略掉:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> ia[], <span class="keyword">size_t</span> size)</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">	<span class="comment">// __func__是编译器定义的一个局部静态变量，用于存放函数的名字</span></span><br><span class="line">	cerr &lt;&lt; __func__ &lt;&lt; <span class="string">&quot;: array size is &quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>调试函数名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>_ _FILE_ _</code></td>
<td>存放文件名的字符串字面值</td>
</tr>
<tr>
<td><code>_ _func_ _</code></td>
<td>存放调试函数的名字</td>
</tr>
<tr>
<td><code>_ _LINE_ _</code></td>
<td>存放当前行号的整型字面值</td>
</tr>
<tr>
<td><code>_ _TIME_ _</code></td>
<td>存放文件编译时间的字符串字面值</td>
</tr>
<tr>
<td><code>_ _DATE_ _</code></td>
<td>存放文件编译日期的字符串字面值</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (word.<span class="built_in">size</span> () &lt; threshold)</span><br><span class="line">	cerr &lt;&lt;<span class="string">&quot;Error: &quot;</span>&lt;&lt;__F工LE_-</span><br><span class="line">		&lt;&lt;<span class="string">&quot; : in function &quot;</span> &lt;&lt; __func__</span><br><span class="line">		&lt;&lt; <span class="string">&quot; at line &quot;</span> &lt;&lt;__LINE__&lt;&lt;endl</span><br><span class="line">		&lt;&lt;<span class="string">&quot; compiled on &quot;</span> &lt;&lt; __DATE__</span><br><span class="line">		&lt;&lt; <span class="string">&quot; at &quot;</span> &lt;&lt;__TIME__&lt;&lt;endl</span><br><span class="line">		&lt;&lt;<span class="string">&quot;word read was \&quot;&quot;</span>&lt;&lt; word</span><br><span class="line">		&lt;&lt;<span class="string">&quot;\&quot;: Length too short&quot;</span> &lt;&lt;endl;</span><br></pre></td></tr></table></figure>

<p>则可得到下面的错误</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Error : wdebug.cc : in function main at line <span class="number">27</span></span><br><span class="line">			compiled on Jul <span class="number">11</span> <span class="number">2012</span> at <span class="number">20</span>:<span class="number">50</span>:<span class="number">03</span></span><br><span class="line">			word read was <span class="string">&quot;foo&quot;</span> : Length too <span class="keyword">short</span></span><br></pre></td></tr></table></figure>

<h2 id="函数匹配"><a href="#函数匹配" class="headerlink" title="函数匹配"></a>函数匹配</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>,<span class="keyword">double</span> = <span class="number">3.14</span>)</span></span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">5.6</span>);								<span class="comment">//调用void f(double,double)</span></span><br></pre></td></tr></table></figure>

<p><strong>确定候选函数和可行函数</strong></p>
<ul>
<li>匹配第一步调用对应的重载函数集，集合中函数称为<strong>候选函数</strong>。具有两个特征，1：函数名相同。2：声明在调用点可见。上面的例子中，四个均为候选函数。</li>
<li>第二部考察实参，从候选函数选出能被这组实参调用的函数，成为可行函数，也有两个特征，1：形参，实参数量相等，2：类型对应相等，或者能够互相转化。</li>
</ul>
<p>则这里只有函数2和4可以调用，但如果找不到可行函数，会报错。</p>
<p><label style="color:red">如果函数含有默认实参，则我们在调用该函数时传入的实参数量可能少于它实际使用的实参数量。</label></p>
<p><strong>寻找最佳匹配</strong></p>
<p>基本思想：实参类型与形参类型越接近，它们匹配得越好。所以例子中硬调用双double的函数。</p>
<p><strong>多个形参的函数匹配</strong></p>
<p>若调用为<code>(42，2.56)</code>，则第一个参数与f(int,int)匹配，第二参数与f(double, double)匹配。这样会报错，因为二义性调用。调用重载避免强制类型转换。</p>
<h3 id="实参类型转换"><a href="#实参类型转换" class="headerlink" title="实参类型转换"></a>实参类型转换</h3><ol>
<li><p>精确匹配，包括以下情况:</p>
<ul>
<li><p>·实参类型和形参类型相同。</p>
</li>
<li><p>实参从数组类型或函数类型转换成对应的指针类型。</p>
</li>
<li><p>向实参添加顶层const或者从实参中删除顶层const。</p>
</li>
</ul>
</li>
<li><p>通过const转换实现的匹配。</p>
</li>
<li><p> 通过类型提升实现的匹配。</p>
</li>
<li><p>通过算术类型转换（参见4.11.1节，第142页)或指针转换实现的匹配。</p>
</li>
<li><p>通过类类型转换实现的匹配（参见14.9节，第514页，将详细介绍这种转换)。</p>
</li>
</ol>
<p><strong>需要类型提升和算术类型转换的匹配</strong></p>
<p>分析函数调用前，我们应该知道小整型一般都会提升到int类型或更大的整数类型。</p>
<p>假设有两个函数，一个接受int、另一个接受short，则只有当调用提供的是short类型的值时才会选择short版本的函数。有时候，即使实参是一个很小的整数值，也会直接将它提升成int类型;此时使用short版本反而会导致类型转换，如char。</p>
<p>所有转换级别一样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manip</span> <span class="params">(<span class="keyword">long</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manip</span> <span class="params">(<span class="keyword">float</span>)</span></span>;</span><br><span class="line"><span class="built_in">manip</span>(<span class="number">3.14</span>);									<span class="comment">//错误:二义性调用</span></span><br></pre></td></tr></table></figure>

<p><strong>函数匹配和const实参</strong></p>
<p>如果重载函数的区别在于它们的引用类型的形参是否引用了const,或者指针类型的形参是否指向const，则当调用发生时编译器通过实参是否是常量来决定选择哪个函数。指针类型也同样如此</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Record <span class="title">lookup</span> <span class="params">(Account&amp;)</span></span>;				<span class="comment">//函数的参数是Account的引用</span></span><br><span class="line"><span class="function">Record <span class="title">lookup</span> <span class="params">(<span class="keyword">const</span> Account&amp;)</span></span>;			<span class="comment">//函数的参数是一个常量引用</span></span><br><span class="line"><span class="keyword">const</span> Account a;</span><br><span class="line">Account b;</span><br><span class="line"><span class="built_in">lookup</span> (a) ;							<span class="comment">//调用lookup (const Account&amp;)</span></span><br><span class="line"><span class="built_in">lookup</span>(b);								<span class="comment">//调用lookup(Account&amp;)</span></span><br></pre></td></tr></table></figure>

<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针指向的是函数而非对象。和其他指针一样，函数指针指向某种特定类型。函数的类型由它的返回类型和形参类型共同决定，与函数名无关。例如:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较两个string对象的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">lengthCompare</span> <span class="params">(<span class="keyword">const</span> string &amp;,<span class="keyword">const</span> string &amp;)</span></span>;</span><br><span class="line"><span class="comment">//该函数的类型是bool (const string&amp;,const string&amp;)。要想声明一个可以指向该函数的指针，只需要用指针替</span></span><br><span class="line"><span class="comment">//换函数名即可:</span></span><br><span class="line"><span class="comment">//pf指向一个函数，该函数的参数是两个const string的引用，返回值是bool类型</span></span><br><span class="line"><span class="built_in"><span class="keyword">bool</span></span> (*pf) (<span class="keyword">const</span> string &amp;,<span class="keyword">const</span> string &amp;);<span class="comment">//未初始化</span></span><br></pre></td></tr></table></figure>

<p>*pf两端的括号必不可少。如果不写这对括号，则pf是一个返回值为bool指针的函数:</p>
<p><strong>使用函数指针</strong></p>
<p>初始化与使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pf = <span class="literal">nullptr</span>;								<span class="comment">//不指向任何函数</span></span><br><span class="line">pf = lengthCompare;							<span class="comment">//pf指向名为lengthCompare的函数</span></span><br><span class="line">pf = &amp;lengthCompare;						<span class="comment">//等价的赋值语句:取地址符是可选的</span></span><br><span class="line"><span class="comment">//此外，我们还能直接使用指向函数的指针调用该函数，无须提前解引用指针:</span></span><br><span class="line"><span class="keyword">bool</span> b1 = <span class="built_in">pf</span> ( <span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>) ;			<span class="comment">//调用lengthCompare函数</span></span><br><span class="line"><span class="keyword">bool</span> b2 =(*pf) ( <span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span> ) ;		<span class="comment">//一个等价的调用</span></span><br><span class="line"><span class="keyword">bool</span> b3 = <span class="built_in">lengthCompare</span> (<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;goodbye&quot;</span>);<span class="comment">//另一个等价的调用</span></span><br></pre></td></tr></table></figure>

<p>函数指针不存在转换规则，必须精确匹配，否则报错。</p>
<p><strong>函数指针形参</strong></p>
<p>函数形参可以时指向函数的形参。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第三个形参是函数类型，它会自动地转换成指向函数的指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">useBigger</span> <span class="params">(<span class="keyword">const</span> string &amp;s1,<span class="keyword">const</span> string &amp;s2,</span></span></span><br><span class="line"><span class="params"><span class="function">				<span class="keyword">bool</span> pf (<span class="keyword">const</span> string &amp;, <span class="keyword">const</span> string &amp;))</span></span>;</span><br><span class="line"><span class="comment">//等价的声明:显式地将形参定义成指向函数的指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">useBigger</span><span class="params">(<span class="keyword">const</span> string &amp;s1,<span class="keyword">const</span> string &amp;s2，</span></span></span><br><span class="line"><span class="params"><span class="function">				<span class="keyword">bool</span> (*pf) (<span class="keyword">const</span> string &amp;, <span class="keyword">const</span> string &amp;))</span> </span>;</span><br></pre></td></tr></table></figure>

<p>使用函数也会自动转换成指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动将函数lengthCompare转换成指向该函数的指针</span></span><br><span class="line"><span class="built_in">useBigger</span> (s1, s2,lengthCompare);</span><br></pre></td></tr></table></figure>

<p>简化方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Func和Func2是函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">bool</span> <span class="title">Func</span> <span class="params">(<span class="keyword">const</span> string&amp;, <span class="keyword">const</span> string&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span> <span class="params">(lengthCompare)</span> Func2</span>;					<span class="comment">//等价的类型</span></span><br><span class="line"><span class="comment">// FuncP和FuncP2是指向函数的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span> <span class="params">(*FuncP)</span> <span class="params">(<span class="keyword">const</span> string&amp;,<span class="keyword">const</span> string&amp;)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span> <span class="params">(lengthCompare)</span> *FuncP2</span>;				<span class="comment">//等价的类型</span></span><br></pre></td></tr></table></figure>

<p>注意这里typedef的用法，它这里定义了Func表示一类返回值为bool，形参为（/**/）的函数。</p>
<p><strong>返回指向函数的指针</strong></p>
<p>起类型别名将函数返回</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> F = <span class="built_in"><span class="keyword">int</span></span> (<span class="keyword">int</span>* , <span class="keyword">int</span>);					<span class="comment">// F是函数类型，不是指针</span></span><br><span class="line"><span class="keyword">using</span> PF = <span class="built_in"><span class="keyword">int</span></span> (* ) (<span class="keyword">int</span>*, <span class="keyword">int</span>) ;			<span class="comment">//PF是指针类型</span></span><br></pre></td></tr></table></figure>

<p>函数类型需要强制进行转化为函数指针类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">PF <span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span></span>;						<span class="comment">//正确:PF是指向函数的指针，f1返回指向函数的指针</span></span><br><span class="line"><span class="built_in">Ff1</span> (<span class="keyword">int</span>) ;						<span class="comment">//错误:F是函数类型，f1不能返回一个函数</span></span><br><span class="line"><span class="function">F *<span class="title">f1</span> <span class="params">(<span class="keyword">int</span>)</span> </span>;					<span class="comment">//正确:显式地指定返回类型是指向函数的指针</span></span><br></pre></td></tr></table></figure>

<p>也可直接声明，但要麻烦得多：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*<span class="built_in">f1</span> (<span class="keyword">int</span>) ) (<span class="keyword">int</span>*, <span class="keyword">int</span>) ;</span><br><span class="line"><span class="comment">//使用尾置返回类型</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">f1</span> <span class="params">(<span class="keyword">int</span>)</span> -&gt; <span class="title">int</span><span class="params">(*)</span> <span class="params">(<span class="keyword">int</span>* , <span class="keyword">int</span>)</span> </span>;</span><br></pre></td></tr></table></figure>

<p><strong>auto和decltype</strong></p>
<p>decltype(函数名)，可以返回对应的函数类型，加<code>*</code>可以转化为函数指针。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第七章</title>
    <url>/2021/12/10/%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
    <content><![CDATA[<p>​        <strong>写在前面</strong>：由于我的失误操作，导致第七章被第六章的内容覆盖，怀着悲痛的心情准备写第二遍，不过也应该可以比第一遍写的更好，在此提醒大家，不要随意切换文件并点击系统弹出来的保存，并即使做好备份。这是一个十分悲痛的教训，望大家注意。</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类的基本思想是数据<strong>抽象（data abstraction）</strong>和<strong>封装（encapsulation)<strong>。数据抽象是一种依赖于</strong>接口(interface）</strong>和**实现(implementation)**分离的编程（以及设计〉技术。类的接口包括用户所能执行的操作;类的实现则包括类的数据成员、负责接口实现的函数体以及定义类所需的各种私有函数。</p>
<h2 id="定义抽象数据类型"><a href="#定义抽象数据类型" class="headerlink" title="定义抽象数据类型"></a>定义抽象数据类型</h2><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>sales_data的接口应该包含以下操作:</p>
<ul>
<li>一个isbn 成员函数，用于返回对象的ISBN编号</li>
<li>一个combine成员函数，用于将一个sales_data对象加到另一个对象上</li>
<li>一个名为add 的函数，执行两个sales data对象的加法</li>
<li>一个read函数，将数据从istream读入到sales_data对象中。</li>
<li>一个print函数，将sales data对象的值输出到ostream</li>
</ul>
<h4 id="使用改进的Sales-data类"><a href="#使用改进的Sales-data类" class="headerlink" title="使用改进的Sales_data类"></a>使用改进的Sales_data类</h4><p>在考虑如何实现我们的类之前，首先来看看应该如何使用上面这些接口函数。举个例子，我们使用这些函数编写1.6节（第21页）书店程序的另外一个版本，其中不再使用sales_item对象，而是使用sales_data对象:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sales_data total ;								<span class="comment">//保存当前求和结果的变量</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">read</span> (cin, total))&#123;							<span class="comment">//读入第一笔交易</span></span><br><span class="line">	sales_data trans;							<span class="comment">//保存下一条交易数据的变量</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">read</span> (cin,trans))&#123;					<span class="comment">//读入剩余的交易</span></span><br><span class="line">		<span class="keyword">if</span> (total .<span class="built_in">isbn</span> ( ) == trans.<span class="built_in">isbn</span> ( ))	<span class="comment">//检查 isbn</span></span><br><span class="line">			total.<span class="built_in">combine</span> (trans);				<span class="comment">//更新变量total当前的值</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">print</span> (cout, total) &lt;&lt; endl;		<span class="comment">//输出结果</span></span><br><span class="line">            total = trans;						<span class="comment">//处理下一本书</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">print</span> (cout, total) &lt;&lt; endl ;			<span class="comment">//输出最后一条交易</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;											<span class="comment">//没有输入任何信息</span></span><br><span class="line">	cerr &lt;&lt;<span class="string">&quot;No data?! &quot;</span> &lt;&lt; endl ;				<span class="comment">//通知用户</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义改进的Sales-data类"><a href="#定义改进的Sales-data类" class="headerlink" title="定义改进的Sales_data类"></a>定义改进的Sales_data类</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sales_data</span> &#123;</span></span><br><span class="line">	<span class="comment">//新成员:关于sales_data对象的操作</span></span><br><span class="line">	std: :<span class="function">string <span class="title">isbn</span> <span class="params">( )</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">	<span class="function">Sales_data&amp; <span class="title">combine</span> <span class="params">(<span class="keyword">const</span> sales_data&amp;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">avg_price</span> <span class="params">( )</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="comment">//数据成员和2.6.1节（第64页）相比没有改变</span></span><br><span class="line">	std::string bookNo;</span><br><span class="line">	<span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// sales_data的非成员接口函数</span></span><br><span class="line"><span class="function">sales_data <span class="title">add</span> <span class="params">(<span class="keyword">const</span> Sales_data&amp;,<span class="keyword">const</span> Sales_data&amp;)</span> </span>;</span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std: :ostream&amp;,<span class="keyword">const</span> sales_data&amp;)</span> </span>;</span><br><span class="line"><span class="function">std::istream &amp;<span class="title">read</span><span class="params">(std: :istream&amp;,Sales_data&amp;)</span> </span>;</span><br></pre></td></tr></table></figure>

<h4 id="定义成员函数"><a href="#定义成员函数" class="headerlink" title="定义成员函数"></a>定义成员函数</h4><p>所有成员必须声明在类内部，但是成员函数体可以在类外定义。</p>
<p>在isbn函数中是如何bookNo所依赖的对象的呢？</p>
<h4 id="引入this"><a href="#引入this" class="headerlink" title="引入this"></a>引入this</h4><p>调用为：<code>total .isbn ()</code>这样的调用实际上是隐式地指向调用该函数的对象成员，这里返回的就是total.bookNo。</p>
<p>成员函数通过一个名为<strong>this</strong>的额外的隐式参数来访问调用它的那个对象。当我们调用一个成员函数时，用请求该函数的对象地址初始化this，如</p>
<p><code>total .isbn ()</code>则编译器负责把total的地址传递给isbn的隐式形参this，可以等价地认为编译器将该调用重写成了如下的形式:<code>//伪代码，用于说明调用成员函数的实际执行过程Sales_data : :isbn (&amp;total)</code></p>
<h4 id="引入const成员函数"><a href="#引入const成员函数" class="headerlink" title="引入const成员函数"></a>引入const成员函数</h4><p>const修饰的成员函数，实际修饰该成员函数隐藏的this指针，表明在该成员函数中不能对类的任何成员进行修改。</p>
<p>且const对象只能调用const函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Display1</span><span class="params">()</span><span class="keyword">const</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> Date d1;</span><br><span class="line">	d1.<span class="built_in">Display1</span>();<span class="comment">//d1为const成员，不可修改</span></span><br><span class="line">	Date d2;</span><br><span class="line">	d2.<span class="built_in">Display</span>();<span class="comment">//d1没有要求，可改可不改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类作用域和成员函数"><a href="#类作用域和成员函数" class="headerlink" title="类作用域和成员函数"></a>类作用域和成员函数</h4><p>类本身就是一个作用域，成员函数体可以随意使用类中的其他成员而无须在意这些成员出现的次序。</p>
<p>因为编译器是首先编译成员的声明，其次才是成员函数体。</p>
<h4 id="在类的外部定义成员函数"><a href="#在类的外部定义成员函数" class="headerlink" title="在类的外部定义成员函数"></a>在类的外部定义成员函数</h4><p>我们可以在类的外部定义成员函数，这样做的作用可以保持类内代码看起来更加清晰简洁。</p>
<p>但在外部定义必须在类内提前声明，且与类外函数保持一致。不同之处在于需要加上类名：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> sales_data: :<span class="built_in">avg_price</span> () <span class="keyword">const</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (units_sold)</span><br><span class="line">		<span class="keyword">return</span> revenue/units_sold;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定义返回this对象的函数"><a href="#定义返回this对象的函数" class="headerlink" title="定义返回this对象的函数"></a>定义返回this对象的函数</h4><p>我们可以把自己这个对象返回，如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Sales_data&amp; Sales_data : :<span class="built_in">combine</span> (<span class="keyword">const</span> Sales_data &amp;rhs)&#123;</span><br><span class="line">	units_sold += rhs.units_sold; <span class="comment">//把rhs的成员加到this对象的成员上</span></span><br><span class="line">	revenue += rhs.revenue;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//返回调用该函数的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数可以把自己一些数据和参数的数据相加，然后以引用的形式返回。</p>
<h3 id="定义类相关的非成员函数"><a href="#定义类相关的非成员函数" class="headerlink" title="定义类相关的非成员函数"></a>定义类相关的非成员函数</h3><p>类的作者常常需要定义一些辅助函数，比如 add、read和 print等。尽管这些函数定义的操作从概念上来说属于类的接口的组成部分，但它们实际上并不属于类本身。</p>
<h4 id="类中的输入与输出"><a href="#类中的输入与输出" class="headerlink" title="类中的输入与输出"></a>类中的输入与输出</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入的交易信息包括ISBN、售出总数和售出价格</span></span><br><span class="line"><span class="function">istream &amp;<span class="title">read</span><span class="params">(istream &amp;is, Sales_ data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">	is &gt;&gt; item. bookNo &gt;&gt; item.units_ sold &gt;&gt; price;</span><br><span class="line">	item. revenue = price * item.units_ sold;</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span> <span class="params">(ostream &amp;os，<span class="keyword">const</span> Sales_ data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	os &lt;&lt; item.<span class="built_in">isbn</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_ sold &lt;&lt;<span class="string">&quot; &quot;</span></span><br><span class="line">		&lt;&lt; item.revenue &lt;&lt;” ”&lt;&lt; item.<span class="function">avg_ <span class="title">price</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="keyword">return</span> OS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>read函数由于将流中数据读到给定对象，print函数将给定对象打印到流中。</p>
<p>由于与流数据有交互，所以需要将IO类的引用作为参数。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>每个类都分别定义了它的对象被初始化的方式，类通过一个或几个特殊的成员函数来，控制其对象的初始化过程，这些函数叫做<strong>构造函数</strong>。构造函数的任务是初始化类对象的数据成员，无论何时只要类的对象被创建，就会执行构造函数。</p>
<h4 id="合成的默认构造函数"><a href="#合成的默认构造函数" class="headerlink" title="合成的默认构造函数"></a>合成的默认构造函数</h4><p>当没有定义任何构造函数时，创建对象则会执行合成的默认的构造函数：</p>
<p>●如果存在类内的初始值(参见2.6.1节，第64页)，用它来初始化成员。<br>●否则，默认初始化(参见2.2.1节，第40页)该成员。</p>
<p>但合成的默认构造知识和简单的类，复杂的类容易出错，所以尽量自己去定义默认构造函数。</p>
<h4 id="定义的构造函数"><a href="#定义的构造函数" class="headerlink" title="定义的构造函数"></a>定义的构造函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_</span> <span class="title">data</span> &#123;</span></span><br><span class="line">	<span class="comment">//新增的构造函数</span></span><br><span class="line">	<span class="function">Sales_ <span class="title">data</span><span class="params">()</span> </span>= <span class="keyword">default</span>;</span><br><span class="line">	<span class="function">Sales_ <span class="title">data</span><span class="params">(<span class="keyword">const</span> std: :string &amp;s)</span> : bookNo(s) &#123;</span>&#125;</span><br><span class="line">	<span class="function">Sales_ <span class="title">data</span> <span class="params">(<span class="keyword">const</span> std: :string &amp;s，<span class="keyword">unsigned</span> n, <span class="keyword">double</span> p)</span> :</span></span><br><span class="line"><span class="function">				bookNo(s)，units_ sold(n), revenue (p*n) &#123;</span> &#125;</span><br><span class="line">	<span class="function">Sales_ <span class="title">data</span><span class="params">(std: :istream &amp;)</span> </span>;</span><br><span class="line">	<span class="comment">//之前已有的其他成员</span></span><br><span class="line">	std: :<span class="function">string <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">	<span class="function">Sales_ data&amp; <span class="title">combine</span> <span class="params">(<span class="keyword">const</span> Sales_ data&amp;)</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> avg_ <span class="title">price</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	std: :string bookNo;</span><br><span class="line">	<span class="keyword">unsigned</span> units_ sold = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h4><p><code>Sales_ data() = default;</code>这是一个默认的构造函数，他的作用和合成的默认构造函数一样。</p>
<p><em>上面的默认构造函数之所以对Sales data有效，是因为我们为内置类型的数据成员提供了初始值。如果你的编译器不支持类内初始值，那么你的默认构造函数就应该使用构造函数初始值列表(马上就会介绍)来初始化类的每个成员。</em></p>
<h4 id="构造函数初始值"><a href="#构造函数初始值" class="headerlink" title="构造函数初始值"></a>构造函数初始值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Sales_ <span class="title">data</span><span class="params">(<span class="keyword">const</span> std: :string &amp;s)</span> : bookNo(s) &#123;</span> &#125;</span><br><span class="line"><span class="function">Sales_ <span class="title">data</span> <span class="params">(<span class="keyword">const</span> std: :string &amp;s，<span class="keyword">unsigned</span> n, <span class="keyword">double</span> p)</span> :</span></span><br><span class="line"><span class="function">			bookNo(s)，units_ sold(n), revenue (p*n) &#123;</span> &#125;</span><br></pre></td></tr></table></figure>

<p>使用初始值列表为一个或几个数据成员赋值，且构造函数不应该轻易覆盖掉类内的初始值，除非新赋的值与原值不同。如果你不能使用类内初始值，则所有构造函数都应该显式地初始化每个内置类型的成员。</p>
<h4 id="在类外定义构造函数"><a href="#在类外定义构造函数" class="headerlink" title="在类外定义构造函数"></a>在类外定义构造函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Sales_ data::Sales_ <span class="title">data</span><span class="params">(std::istream &amp;is)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">read</span>(is，*<span class="keyword">this</span>); <span class="comment">// read 函数的作用是从is中读取一条交易信息然后</span></span><br><span class="line">					 <span class="comment">//存入this对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先它没有返回类型，且必须指定类名，由于这里的初始值列表为空，所以初始化任务交给函数体，没没有被构造函数赋值的成员将执行默认初始化。如string为空string，int为0。</p>
<p>函数read的第二个形参为该对象的引用。</p>
<h3 id="拷贝、赋值和析构"><a href="#拷贝、赋值和析构" class="headerlink" title="拷贝、赋值和析构"></a>拷贝、赋值和析构</h3><p>一般来说编译器会默认的合成拷贝、赋值和析构，例如赋值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">total = trans; <span class="comment">//处理下一本书的信息.</span></span><br><span class="line"><span class="comment">// 它的行为与下面的代码相同</span></span><br><span class="line"><span class="comment">// Sales_ data的默认赋值操作等价于:</span></span><br><span class="line">total .bookNo = trans . bookNo;</span><br><span class="line">total.units_ sold = trans.units sold;</span><br><span class="line">total. revenue = trans. revenue;</span><br></pre></td></tr></table></figure>

<h4 id="不可依赖合成版本"><a href="#不可依赖合成版本" class="headerlink" title="不可依赖合成版本"></a>不可依赖合成版本</h4><p>编译器默认生成的函数常常会出现一些问题，所以后面会了解到如何自定义这些函数。</p>
<h2 id="访问控制与封装"><a href="#访问控制与封装" class="headerlink" title="访问控制与封装"></a>访问控制与封装</h2><p>可以使用访问说明符加强类的封装性：</p>
<ul>
<li><p>定义在public说明符之后的成员在整个程序内可被访问，public成员定义类的接口。</p>
</li>
<li><p>定义在private说明符之后的成员可以被类的成员函数访问，但是不能被使用该类的代码访问，private部分封装了( 即隐藏了)类的实现细节。</p>
</li>
</ul>
<p>说明符数量不限，且作用域到下一个访问说明符为止。出于统一编程风格的考虑，当我们希望定义的类的所有成员是public的时，使用struct； 反之，如果希望成员是private的，使用class。</p>
<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>若要想某些函数可以访问类内私有成员，我们可以将他声明为友元，只需要增加一条以friend关键字开始的函数声明语句即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="comment">//为sales_data的非成员函数所做的友元声明</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> sales_data <span class="title">add</span> <span class="params">(<span class="keyword">const</span> sales_data&amp;,<span class="keyword">const</span> sales_data&amp;)</span> </span>;</span><br><span class="line"><span class="keyword">friend</span> std: :<span class="function">istream &amp;<span class="title">read</span><span class="params">(std: :istream&amp;，sales_data&amp;)</span> </span>;</span><br><span class="line"><span class="keyword">friend</span> std: :<span class="function">ostream &amp;<span class="title">print</span><span class="params">(std: :ostream&amp;,<span class="keyword">const</span> sales_data&amp;)</span> </span>;</span><br><span class="line"><span class="comment">//其他成员及访问说明符与之前一致</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">sales_data</span>() = <span class="keyword">default</span>;</span><br><span class="line">	<span class="built_in">sales_data</span> (<span class="keyword">const</span> std: :string &amp;s, <span class="keyword">unsigned</span> n,<span class="keyword">double</span> p):</span><br><span class="line">	<span class="built_in">bookNo</span> (s) , <span class="built_in">units_sold</span>(n) , <span class="built_in">revenue</span> (p*n)&#123; &#125;</span><br><span class="line">	<span class="built_in">sales_data</span> (<span class="keyword">const</span> std: :string &amp;s): <span class="built_in">bookNo</span>(s)&#123; &#125;</span><br><span class="line">	<span class="built_in">sales_data</span>(std: :istream&amp;) ;</span><br><span class="line">	std: :<span class="function">string <span class="title">isbn</span> <span class="params">( )</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">	<span class="function">sales_data &amp;<span class="title">combine</span> <span class="params">(<span class="keyword">const</span> sales_data&amp;)</span> </span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	std: :string bookNo ;</span><br><span class="line">	<span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;<span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125; ;</span><br><span class="line"><span class="comment">// sales_data接口的非成员组成部分的声明</span></span><br><span class="line"><span class="function">sales_data <span class="title">add</span> <span class="params">(<span class="keyword">const</span> sales_data&amp;, <span class="keyword">const</span> sales_data&amp;)</span></span>;</span><br><span class="line">std: :<span class="function">istream &amp;<span class="title">read</span><span class="params">(std: :istream&amp;, sales_data&amp; )</span></span>;</span><br><span class="line"><span class="function">std::ostream &amp;<span class="title">print</span><span class="params">(std: :ostream&amp;,<span class="keyword">const</span> Sales_data&amp; )</span></span>;</span><br></pre></td></tr></table></figure>

<p>友元必须在类内声明，最好写在开头和劫为的尾置。</p>
<h4 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h4><ul>
<li>确保用户代码不会无意间破坏封装对象的状态。</li>
<li>被封装的类的具体实现细节可以随时改变，而无须调整用户级别的代码。</li>
</ul>
<h4 id="友元的声明"><a href="#友元的声明" class="headerlink" title="友元的声明"></a>友元的声明</h4><p>友元声明相当于给这个函数开通了权限，函数还是需要声明和定义。</p>
<h2 id="类的其他特性"><a href="#类的其他特性" class="headerlink" title="类的其他特性"></a>类的其他特性</h2><h3 id="类成员再探"><a href="#类成员再探" class="headerlink" title="类成员再探"></a>类成员再探</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">screen</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">typedef</span> std: :string : :size_type pos;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	pos cursor = <span class="number">0</span>;</span><br><span class="line">	pos height = <span class="number">0</span>, width = <span class="number">0</span> ;std: : string contents ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>定义一个窗口类，其中使用typedef来重命名，其作用等同于：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//使用类型别名等价地声明一个类型名字</span></span><br><span class="line">	<span class="keyword">using</span> pos = std::string::size_type;</span><br><span class="line">	<span class="comment">//其他成员与之前的版本一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Screen类成员函数"><a href="#Screen类成员函数" class="headerlink" title="Screen类成员函数"></a>Screen类成员函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">screen</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">typedef</span> std::string::size_type pos;</span><br><span class="line">	<span class="built_in">Screen</span>() = <span class="keyword">default</span>; <span class="comment">//因为Screen有另一个构造函数，</span></span><br><span class="line">						<span class="comment">//所以本函数是必需的</span></span><br><span class="line">	<span class="comment">//cursor被其类内初始值初始化为0</span></span><br><span class="line">	<span class="built_in">screen</span>(pos ht, pos wd,<span class="keyword">char</span> c) : <span class="built_in">height</span> (ht), <span class="built_in">width</span> (wd)，<span class="built_in">contents</span> (ht * wd, c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">char</span> <span class="title">get</span> <span class="params">()</span> <span class="keyword">const</span>							<span class="comment">//读取光标处的字符</span></span></span><br><span class="line"><span class="function">		</span>&#123; <span class="keyword">return</span> contents [cursor] ; &#125;			<span class="comment">//隐式内联</span></span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span> <span class="params">(pos ht, pos wd)</span><span class="keyword">const</span> </span>;		<span class="comment">//显式内联</span></span><br><span class="line">	<span class="function">screen &amp;<span class="title">move</span><span class="params">(pos r, pos c)</span></span>;					<span class="comment">//能在之后被设为内联</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	pos cursor = <span class="number">0</span>;</span><br><span class="line">	pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">	std::string contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里第二个构造函数只接受了三个参数，所以另一个成员采用类内初始值的方式初始化。</p>
<h4 id="令成员作为内联函数"><a href="#令成员作为内联函数" class="headerlink" title="令成员作为内联函数"></a>令成员作为内联函数</h4><p>类内的函数是固定为内联函数的，当类外函数需要作为类内成员时，可以加上inline声明成内联函数。</p>
<p>其可以在类内声明（不推荐，因为类内函数就是内联函数），也可以在类外声明，但最好只在类外声明。</p>
<h4 id="重载成员函数"><a href="#重载成员函数" class="headerlink" title="重载成员函数"></a>重载成员函数</h4><p>成员函数与非成员函数都可以被重载，使用时根据参数数量来决定用哪种函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">screen myscreen;</span><br><span class="line"><span class="keyword">char</span> ch = myscreen. <span class="built_in">get</span> ( ) ;				<span class="comment">//调用screen : :get ()</span></span><br><span class="line">ch = myscreen.<span class="built_in">get</span> (<span class="number">0</span> , <span class="number">0</span>);					<span class="comment">//调用screen: :get (pos, pos)</span></span><br></pre></td></tr></table></figure>

<h4 id="可变数据成员"><a href="#可变数据成员" class="headerlink" title="可变数据成员"></a>可变数据成员</h4><p>如何希望一个变量无论什么情况都可以被改变。可以在变量声明时加入mutable关键字。即使他是const对象的成员，或通过const函数赋值，都可以被改变。</p>
<h4 id="类数据成员初始值"><a href="#类数据成员初始值" class="headerlink" title="类数据成员初始值"></a>类数据成员初始值</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">window_mgr</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">//这个window _mgr追踪的Screen</span></span><br><span class="line">	<span class="comment">//默认情况下，一个window_mgr包含一个标准尺寸的空白Screen</span></span><br><span class="line">	std::vector&lt;screen&gt; screens&#123; <span class="built_in">screen</span> (<span class="number">24</span>，<span class="number">80</span>, <span class="string">&#x27; &#x27;</span> )&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当初始化类类型成员，可以使用列表初始化的方式，类内初始值必须以=或者{}表示。</p>
<h3 id="返回-this的成员函数"><a href="#返回-this的成员函数" class="headerlink" title="返回*this的成员函数"></a>返回*this的成员函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Screen &amp;<span class="title">set</span> <span class="params">(<span class="keyword">char</span>)</span> </span>;</span><br><span class="line">	<span class="function">Screen &amp;<span class="title">set</span> <span class="params">(pos, pos, <span class="keyword">char</span>)</span> </span>;</span><br><span class="line">	<span class="comment">//其他成员和之前的版本一致</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span> <span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	contents [cursor] = C;			<span class="comment">//设置当前光标所在位置的新值</span></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;					<span class="comment">//将this对象作为左值返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Screen &amp;<span class="title">Screen::set</span><span class="params">(pos r, pos col, <span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">	contents[r*width + col] = ch;	<span class="comment">//设置给定位置的新值</span></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;					<span class="comment">//将this对象作为左值返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>set函数返回值是调用set的对象的引用，可以作为左值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把光标移动到一个指定的位置，然后设置该位置的字符值</span></span><br><span class="line">myscreen.<span class="built_in">move</span> ( <span class="number">4</span>,<span class="number">0</span> ) .<span class="built_in">set</span> (<span class="string">&#x27;#’);</span></span><br><span class="line"><span class="string">//上述语句等价于</span></span><br><span class="line"><span class="string">myScreen.move ( 4,0);</span></span><br><span class="line"><span class="string">myscreen.set(&#x27;</span>#’);</span><br></pre></td></tr></table></figure>

<p>若返回值不是引用，则：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果move返回Screen而非screen&amp;</span></span><br><span class="line">screen temp = myscreen . <span class="built_in">move</span> ( <span class="number">4</span> ,o) ;			<span class="comment">//对返回值进行烤贝</span></span><br><span class="line">temp.<span class="built_in">set</span> (<span class="string">&#x27;#’);									//不会改变myscreen的 contents</span></span><br></pre></td></tr></table></figure>

<h4 id="const成员函数返回-this"><a href="#const成员函数返回-this" class="headerlink" title="const成员函数返回*this"></a>const成员函数返回*this</h4><p>若为前面的类定义一个display操作，因为打印不需要改变类中的成员，所以令display为一个const成员，所以*this是一个const对象。返回值是一个const对象的引用，所以：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">screen myScreen;</span><br><span class="line"><span class="comment">//如果display返回常量引用，则调用set将引发错误</span></span><br><span class="line">myScreen.<span class="built_in">display</span> (cout).<span class="built_in">set</span> (<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="基于const的重载"><a href="#基于const的重载" class="headerlink" title="基于const的重载"></a>基于const的重载</h4><p>一个函数可以重载为const和非const，分别用在常量对象，和非常量对象的调用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">screen</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//根据对象是否是const重载了display函数</span></span><br><span class="line">	<span class="function">screen &amp;<span class="title">display</span><span class="params">(std::ostream &amp;os)</span></span>&#123; <span class="built_in">do_display</span>(os) ; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> screen &amp;<span class="title">display</span><span class="params">(std::ostream &amp;os)</span> <span class="keyword">const</span></span>&#123; <span class="built_in">do_display</span> (os) ; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">//该函数负责显示Screen的内容</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">do_display</span><span class="params">(std: :ostream &amp;os)</span><span class="keyword">const</span> </span>&#123;os &lt;c contents; &#125;</span><br><span class="line">	<span class="comment">//其他成员与之前的版本一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中do_display是一个公共代码，他的好处为：</p>
<ul>
<li>一个基本的愿望是避免在多处使用同样的代码。</li>
<li>我们预期随着类的规模发展，display函数有可能变得更加复杂。</li>
<li>我们很可能在开发过程中给do_display函数添加某些调试信息，而这些信息将在代码的最终产品版本中去掉。显然,只在 do_display一处添加或删除这些信息要更容易一些。</li>
<li>这个额外的函数调用不会增加任何开销。因为我们在类内部定义了do_display,所以它隐式地被声明成内联函数。</li>
</ul>
<h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><p>每一个类都是唯一的，即使他们的成员完全一样，所以他们也不可以互相赋值。</p>
<h4 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h4><p>类的声明可以只声明不定义，也被称为<strong>向前声明</strong>，在未定义前他是一个<strong>不完全类型</strong>，不完全类型只能在非常有限的情景下使用:</p>
<ul>
<li>可以定义指向这种类型的指针或引用，</li>
<li>可以声明（但是不能定义）以不完全类型作为参数或者返回类型的函数。</li>
</ul>
<p><em>创建它的对象之前他必须被定义过！</em></p>
<h3 id="友元再探"><a href="#友元再探" class="headerlink" title="友元再探"></a>友元再探</h3><h4 id="类之间的友元"><a href="#类之间的友元" class="headerlink" title="类之间的友元"></a>类之间的友元</h4><p>如果想在A类的成员函数内可以控制另一个B类的成员，可以将A类在B类中声明称友元，如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line">    <span class="comment">//其他内容...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>则A类的所有成员函数都可以访问B类的私有成员。</p>
<p>注意：友元关系没有传递性，若A中声明了友元C类，C只可以访问A，而不能访问B。</p>
<h4 id="成员函数作为友元"><a href="#成员函数作为友元" class="headerlink" title="成员函数作为友元"></a>成员函数作为友元</h4><p>若不需要将整个类作为友元，则可以只为一个函数声明友元，且必须明确属于哪个类。且应注意一定的顺序：</p>
<ul>
<li>定义A类，并声明其中的需要改变B类成员的函数（简称C函数吧），但不要定义。</li>
<li>定义B类，声明友元函数C。</li>
<li>最后定义C函数。</li>
</ul>
<h4 id="函数重载和友元"><a href="#函数重载和友元" class="headerlink" title="函数重载和友元"></a>函数重载和友元</h4><p>若一个函数名存在多个重载，则友元函数需要声明多个，且他们是一一对应的。</p>
<h4 id="友元声明和作用域"><a href="#友元声明和作用域" class="headerlink" title="友元声明和作用域"></a>友元声明和作用域</h4><p>友元声明不是必须在类或者函数之后，但无论如何一定要在类外声明一次。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;<span class="comment">/*友元函数可以定义在类的内部*/</span>&#125;</span><br><span class="line">	<span class="built_in">X</span>()&#123; <span class="built_in">f</span>(); &#125;<span class="comment">//错误:f还没有被声明</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span>;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> x: :<span class="built_in">g</span>() &#123; <span class="keyword">return</span> <span class="built_in">f</span>(); &#125;		<span class="comment">//错误:f还没有被声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>;							<span class="comment">//声明那个定义在中的函数</span></span><br><span class="line"><span class="keyword">void</span> x : :<span class="built_in">h</span>() &#123; <span class="keyword">return</span> <span class="built_in">f</span>(); &#125;		<span class="comment">//正确:现在f的声明在作用域中了</span></span><br></pre></td></tr></table></figure>

<p>根本还是因为友元只是开通了某个人进入这个地方的权限，而这个人需要被承认是一个人。才能使用该权限。</p>
<h2 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h2><p>类有自己的作用域，在类外必须由对象、引用或指针使用成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">screen::pos ht = <span class="number">24</span>, wd = <span class="number">80</span> ;			<span class="comment">//使用screen定义的pos类型</span></span><br><span class="line"><span class="function">screen <span class="title">scr</span> <span class="params">(ht, wd, <span class="string">&#x27; &#x27;</span>)</span> </span>;</span><br><span class="line">Screen *p = &amp;scr;</span><br><span class="line"><span class="keyword">char</span> c = scr.<span class="built_in">get</span> () ;						<span class="comment">//访问scr对象的get成员</span></span><br><span class="line">c = p-&gt;<span class="built_in">get</span> () ;								<span class="comment">//访问p所指对象的get成员</span></span><br></pre></td></tr></table></figure>

<p>类外的成员函数，因为在类外，所以并不知道类内的成员，所以必须加上类名，包括返回值如果是类内的成员也必须加上类名。</p>
<h3 id="名字查找与类的作用域"><a href="#名字查找与类的作用域" class="headerlink" title="名字查找与类的作用域"></a>名字查找与类的作用域</h3><p>名字查找的大致过程为：</p>
<ul>
<li>首先，在名字所在的块中寻找其声明语句，只考虑在名字的使用之前出现的声明。</li>
<li>如果没找到，继续查找外层作用域。</li>
<li>如果最终没有找到匹配的声明，则程序报错。</li>
</ul>
<p>对于定义在类内部的成员函数：</p>
<ul>
<li>首先，编译成员的声明。</li>
<li>直到类全部可见后才编译函数体。</li>
</ul>
<h4 id="类成员声明的名字查找"><a href="#类成员声明的名字查找" class="headerlink" title="类成员声明的名字查找"></a>类成员声明的名字查找</h4><p>声明过程中使用的名字必须在使用前确保可见，如果某个成员的声明使用了类中尚未出现的名字，则编译器将会在类外中继续查找。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> Money;</span><br><span class="line">string bal;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Money <span class="title">balance</span> <span class="params">()</span> </span>&#123; <span class="keyword">return</span> bal; &#125;<span class="comment">//这里的返回值为类外定义的double,</span></span><br><span class="line">    			<span class="comment">//bal在函数体内，所以整个类可见后才处理，所以这里返回的是类内的bal。</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Money bal;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="类型名要特殊处理"><a href="#类型名要特殊处理" class="headerlink" title="类型名要特殊处理"></a>类型名要特殊处理</h4><p>类内可以重新为一个类型定义名字，但如果已经使用过了，就不能在定义它了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> Money;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Money <span class="title">balance</span><span class="params">( )</span> </span>&#123; <span class="keyword">return</span> bal; &#125;		<span class="comment">//使用外层作用域的Money</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">double</span> Money;					<span class="comment">//错误:不能重新定义Money</span></span><br><span class="line">	Money bal;								<span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>成员函数使用名字解析</p>
<ul>
<li>首先，在成员函数内查找该名字的声明。和前面一样，只有在函数使用之前出现的声明才被考虑。</li>
<li>如果在成员函数内没有找到,则在类内继续查找,这时类的所有成员都可以被考虑。</li>
<li>如果类内也没找到该名字的声明，在成员函数定义之前的作用域内继续查找。</li>
</ul>
<p>如果成员函数参数名字与类成员名字冲突，那么使用类内的成员最好写成类名::的形式，更加清楚。当然，更好的办法是另起一个名字。</p>
<h2 id="构造函数再探"><a href="#构造函数再探" class="headerlink" title="构造函数再探"></a>构造函数再探</h2><h3 id="构造函数初始值列表"><a href="#构造函数初始值列表" class="headerlink" title="构造函数初始值列表"></a>构造函数初始值列表</h3><p>定义变量时最好立即对其进行初始化，如没有初始化，则会执行默认初始化。</p>
<h4 id="初始值有时必不可少"><a href="#初始值有时必不可少" class="headerlink" title="初始值有时必不可少"></a>初始值有时必不可少</h4><p>有时遇到无法默认初始化的类型、常量或者引用，则必须添加初始值。</p>
<h4 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h4><p>初始化顺序不是按参数的顺序，而是按照在类内声明的顺序。</p>
<p><em>建议：构造函数初始化顺序与成员声明最好一致，且不用成员去初始化成员</em></p>
<h4 id="默认实参和构造函数"><a href="#默认实参和构造函数" class="headerlink" title="默认实参和构造函数"></a>默认实参和构造函数</h4><p>如果一个构造函数为所有参数都提供了默认实参,则它实际上也定义了默认构造函数。</p>
<p>如果你希望用户给出一个非0实参的同时给处其他的实参，则建议不要给他形参添加默认值。例如图书管理程序，用户提供一本书的名字时，你需要他同时提供书的价格、序列号等，就不应该给形参设置默认值，这样用户就必须输入图书全部信息。</p>
<h3 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//非委托构造函数使用对应的实参初始化成员</span></span><br><span class="line">	<span class="built_in">Sales_data</span>(std::string s, <span class="keyword">unsigned</span> cnt,<span class="keyword">double</span> price):</span><br><span class="line">			<span class="built_in">bookNo</span>(s), <span class="built_in">units_sold</span>(cnt), <span class="built_in">revenue</span> (cnt*price)&#123; &#125;</span><br><span class="line">	<span class="comment">//其余构造函数全都委托给另一个构造函数</span></span><br><span class="line">	<span class="built_in">sales_data</span>() : <span class="built_in">sales_data</span> (<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line">	<span class="built_in">sales_data</span> (std::string s) : <span class="built_in">sales_data</span>(s， <span class="number">0</span>,<span class="number">0</span>)&#123;&#125;</span><br><span class="line">	<span class="built_in">sales_data</span> (std::istream &amp;is) : <span class="built_in">sales_data</span>()&#123; <span class="built_in">read</span> (is,*<span class="keyword">this</span>) ; &#125;</span><br><span class="line">	<span class="comment">//其他成员与之前的版本一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>它也有成员初始值列表和一个函数体，参数列表须与委托的构造函数匹配。最后一个构造函数委托的是默认构造函数，默认构造执行后，执行read（）函数。</p>
<p>当一个构造函数委托给另一个构造函数时，受委托的构造函数的初始值列表和函数体被依次执行。在 sales data类中，受委托的构造函数体恰好是空的。假如函数体包含有代码的话，将先执行这些代码，然后控制权才会交还给委托者的函数体。</p>
<h3 id="默认构造函数的作用"><a href="#默认构造函数的作用" class="headerlink" title="默认构造函数的作用"></a>默认构造函数的作用</h3><p>默认初始化在以下情况发生</p>
<ul>
<li>当我们在块作用域内不使用任何初始值定义一个非静态变量或者数组时。</li>
<li>当一个类本身含有类类型的成员且使用合成的默认构造函数时。</li>
<li>当类类型的成员没有在构造函数初始值列表中显式地初始化时。</li>
</ul>
<p>值初始化在以下情况发生</p>
<ul>
<li>在数组初始化的过程中如果我们提供的初始值数量少于数组的大小时。</li>
<li>当我们不使用初始值定义一个局部静态变量时。</li>
<li>当我们通过书写形如T( )的表达式显式地请求值初始化时，其中T是类型名(vector的一个构造函数只接受一个实参用于说明vector大小，它就是使用一个这种形式的实参来对它的元素初始化器进行值初始化)。类必须包含一个默认构造函数以便在上述情况下使用，其中的大多数情况非常容易判断。</li>
</ul>
<h4 id="一个常犯的错误"><a href="#一个常犯的错误" class="headerlink" title="一个常犯的错误"></a>一个常犯的错误</h4><p>对于C++的新手程序员来说有一种常犯的错误，它们试图以如下的形式声明-一<br>个用默认构造函数初始化的对象:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Sales_ data <span class="title">obj</span><span class="params">()</span> </span>;				<span class="comment">//错误:声明了一个函数而非对象</span></span><br><span class="line">Sales_ data obj2;				<span class="comment">//正确: obj2是一个对象而非函数</span></span><br></pre></td></tr></table></figure>

<h3 id="隐式的类类型转换"><a href="#隐式的类类型转换" class="headerlink" title="隐式的类类型转换"></a>隐式的类类型转换</h3><p>如果构造函数接受一个实参，那么实际上也定义了隐式转换的机制，例如：A类中有一个构造函数只接受一个string类型的参数，那么在需要A类的地方，我们可以由string去代替，编译器会自动的将string转换为A。</p>
<h4 id="只允许一步类类型的转换"><a href="#只允许一步类类型的转换" class="headerlink" title="只允许一步类类型的转换"></a>只允许一步类类型的转换</h4><p>如果直接把一个常量字符串用在A类的地方，需要先转换成string，再转换为A，所以是错误的。可以先显示的转化为string，如：<code>string(&quot;999&quot;)</code>，再放到需要A的地方。</p>
<p>这种转换取决于用户对使用它的看法，并不总是有效。</p>
<h4 id="抑制构造函数隐式转换"><a href="#抑制构造函数隐式转换" class="headerlink" title="抑制构造函数隐式转换"></a>抑制构造函数隐式转换</h4><p>在构造函数前加上explicit用来阻止隐式转换的发生，它只对有一个参数的函数有效：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span> <span class="params">(<span class="keyword">const</span> std::string &amp;s)</span> : bookNo(s) &#123;</span> &#125;</span><br><span class="line">	<span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span> <span class="params">(std::istream&amp;)</span> </span>;</span><br><span class="line">	<span class="comment">//其他成员与之前的版本一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="explicit构造只用于直接初始化"><a href="#explicit构造只用于直接初始化" class="headerlink" title="explicit构造只用于直接初始化"></a>explicit构造只用于直接初始化</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string null_book = <span class="string">&quot;999&quot;</span>;</span><br><span class="line"><span class="function">Sales_ _data <span class="title">item1</span> <span class="params">(null_book)</span> </span>; <span class="comment">// 正确:直接初始化</span></span><br><span class="line"><span class="comment">//错误:不能将explicit构造函数用于拷贝形式的初始化过程</span></span><br><span class="line">Sales_ data item2 = null_book;</span><br></pre></td></tr></table></figure>

<p>使用该关键字后不可用于拷贝。</p>
<h4 id="显示转换构造函数"><a href="#显示转换构造函数" class="headerlink" title="显示转换构造函数"></a>显示转换构造函数</h4><p>explicit函数会阻止隐式的转换，但是我们依然可以用该函数显示的进行转换：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正确:实参是一个显式构造的Sales_ data对象</span></span><br><span class="line">item. <span class="built_in">combine</span> (Sales_ <span class="built_in">data</span> (null_ book)) ;</span><br><span class="line"><span class="comment">//正确: static_ cast可以使用explicit的构造函数</span></span><br><span class="line">item. <span class="built_in">combine</span> (static_ cast&lt;Sales_ data&gt;(cin)) ;</span><br></pre></td></tr></table></figure>

<h4 id="标准库显式的构造函数的类："><a href="#标准库显式的构造函数的类：" class="headerlink" title="标准库显式的构造函数的类："></a>标准库显式的构造函数的类：</h4><p>我们用过的-.些标准库中的类含有单参数的构造函数:</p>
<ul>
<li>接受一个单参数的const char*的string构造函数不是explicit的。</li>
<li>接受一个容量参数的vector构造函数(参见3.3.1节，第87页)是explicit的。</li>
</ul>
<h3 id="聚合类"><a href="#聚合类" class="headerlink" title="聚合类"></a>聚合类</h3><p>满足下列条件，可以说它是一个聚合类：</p>
<ul>
<li>所有成员都是public的。</li>
<li>没有定义任何构造函数。</li>
<li>没有类内初始值。</li>
<li>没有基类，也没有virtual函数。</li>
</ul>
<p>如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> ival;</span><br><span class="line">	string S;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>聚合类的显示初始化方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// val1. ival= 0; val1.s = string ( &quot;Anna&quot; )</span></span><br><span class="line">Datavall= &#123; <span class="number">0</span>, <span class="string">&quot;Anna&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>显示初始化的缺点：</p>
<ul>
<li>要求类的所有成员都是public的。</li>
<li>将正确初始化每个对象的每个成员的重任交给了类的用户(而非类的作者)。因为用户很容易忘掉某个初始值，或者提供–个不恰当的初始值，所以这样的初始化过程冗长乏味且容易出错。</li>
<li>添加或删除-一个成员之后，所有的初始化语句都需要更新。</li>
</ul>
<h3 id="字面值常量类"><a href="#字面值常量类" class="headerlink" title="字面值常量类"></a>字面值常量类</h3><p>数据成员都是字面值类型的聚合类就是字面值常量类。不是聚合但符合下列要求也是：</p>
<ol>
<li><p>数据成员都必须是字面值类型。</p>
</li>
<li><p>类必须至少含有一个constexpr构造函数。</p>
</li>
<li><p>如果一个数据成员含有类内初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的constexpr构造函数。</p>
</li>
<li><p>类必须使用析构函数的默认定义，该成员负责销毁类的对象。</p>
</li>
</ol>
<p>对于条件的理解：</p>
<p>满足条件1，就可以在编译阶段求值，这一点和聚合类一样。</p>
<p>满足条件2，就可以创建这个类的constexpr类型的对象。</p>
<p>满足条件3，就可以保证即使有类内初始化，也可以在编译阶段解决。</p>
<p>满足条件4，就可以保证析构函数没有不能预期的操作。</p>
<h4 id="constexpr构造函数"><a href="#constexpr构造函数" class="headerlink" title="constexpr构造函数"></a>constexpr构造函数</h4><p>构造函数不能是const的，但字面值常量类的构造函数可以是constexpr的，且必须至少有一个constexpr构造函数。</p>
<p>constexpr构造函数函数体一般来说是空的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span> <span class="params">(<span class="keyword">bool</span> b = <span class="literal">true</span>)</span> : hw(b)， io(b)， other(b) &#123;</span> &#125;</span><br><span class="line">	<span class="function"><span class="keyword">constexpr</span> <span class="title">Debug</span> <span class="params">(<span class="keyword">bool</span> h，<span class="keyword">bool</span> i, <span class="keyword">bool</span> o)</span> : hw(h)，io(i), other(o) &#123;</span> &#125;</span><br><span class="line">	<span class="function"><span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="title">any</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> hw || io || other; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> set_ <span class="title">io</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; io = b; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> set_ <span class="title">hw</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; hw = b; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> set_ <span class="title">other</span> <span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; hw = b; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">bool</span> hw;					<span class="comment">//硬件错误，而非IO错误</span></span><br><span class="line">	<span class="keyword">bool</span> io;					<span class="comment">// I0错误</span></span><br><span class="line">	<span class="keyword">bool</span> other;					<span class="comment">//其他错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样声明以后，就可以在使用constexpr表达式或者constexpr函数的地方使用字面值常量类了。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第八章</title>
    <url>/2021/12/10/%E7%AC%AC%E5%85%AB%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="IO库"><a href="#IO库" class="headerlink" title="IO库"></a>IO库</h1><p>以往用到的IO库设施：</p>
<ul>
<li><p>istream(输入流)类型，提供输入操作。</p>
</li>
<li><p>ostre am(输出流)类型，提供输出操作。</p>
</li>
<li><p>cin, 一个istream对象，从标准输入读取数据。</p>
</li>
<li><p>cout，一个ostream对象，向标准输出写入数据。</p>
</li>
<li><p>cerr，一个ostream对象，通常用于输出程序错误消息，写入到标准错误。</p>
</li>
<li><p><code>&gt;&gt;</code>运算符，用来从一个istream对象读取输入数据。</p>
</li>
<li><p><code>&lt;&lt;</code>运算符，用来向一个ostream对象写入输出数据。</p>
</li>
<li><p>getline函数，从一个给定的istream读取一行数据，存入一个给定的string对象中。</p>
</li>
</ul>
<h2 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h2><table>
<thead>
<tr>
<th>头文件</th>
<th align="left">类型</th>
</tr>
</thead>
<tbody><tr>
<td>iostream</td>
<td align="left">istream, wistream从流读取数据<br/>ostream, wost ream向流写入数据<br/>iostream，wiostream读写流</td>
</tr>
<tr>
<td>fstream</td>
<td align="left">ifstream, wifstream 从文件读取数据<br/>ofstream, wofstream 向文件写入数据<br/>fstream，wfstream读写文件</td>
</tr>
<tr>
<td>sstream</td>
<td align="left">istringstream, wistringstream 从string读取数据.<br/>ostringstream, wostringstream 向string写入数据<br/>stringstream, wstringstream 读写string</td>
</tr>
</tbody></table>
<p>为了支持使用宽字符的语言，标准库定义了一组类型和对象来操纵wchar_t 类型的数据。宽字符版本的类型和函数的名字以一个w开始。例如，wcin、wcout和wcerr是分别对应cin、cout和cerr的宽字符版对象。宽字符版本的类型和对象与其对应的普通char版本的类型定义在同一个头文件中。例如，头文件fstream定义了ifstream 和wifstream类型。</p>
<h4 id="IO类型间的关系"><a href="#IO类型间的关系" class="headerlink" title="IO类型间的关系"></a>IO类型间的关系</h4><p>设备类型和字符大小不会影响我们执行的IO操作，例如使用&gt;&gt;读取数据，我们不需要管是从控制台还是磁盘文件、还是string读取，同样也不需要管字符存入的是char还是wchar_t。这一点实际上是通过类的继承机制实现的。类型ifstream和istringstream都继承自istream. 因此，我们可以像使用istream对象-样来使用ifstream和istringstream对象。</p>
<h3 id="IO对象无拷贝或赋值"><a href="#IO对象无拷贝或赋值" class="headerlink" title="IO对象无拷贝或赋值"></a>IO对象无拷贝或赋值</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ofstream out1， out2;</span><br><span class="line">out1 = out2;								<span class="comment">//错误:不能对流对象賦值</span></span><br><span class="line"><span class="function">ofstream <span class="title">print</span> <span class="params">(ofstream)</span> </span>;					<span class="comment">//错误:不能初始化ofstream参数</span></span><br><span class="line">out2 = <span class="built_in">print</span> (out2) ;						<span class="comment">//错误:不能拷贝流对象</span></span><br></pre></td></tr></table></figure>

<p>由于不能拷贝IO对象，因此我们也不能将形参或返回类型设置为流类型。进行IO操作的函数通常以引用方式传递和返回流。读写一个IO对象会改变其状态，因此传递和返回的引用不能是const的。</p>
<h3 id="条件状态"><a href="#条件状态" class="headerlink" title="条件状态"></a>条件状态</h3><p>一个流发生错误，后续的IO操作都会失败，所以因通过代码检查它是否处于良好状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(cin &gt;&gt; word)&#123;</span><br><span class="line">	<span class="comment">//如果能够进来，代表流状态良好</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查询流的状态"><a href="#查询流的状态" class="headerlink" title="查询流的状态"></a>查询流的状态</h4><p>上面的操作只知道有没有错误，但不知道是什么错误，所以IO库定义了一个与机器无关的iostate类型：</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>badbit</td>
<td>系统级错误，如不可恢复的读写错误。</td>
</tr>
<tr>
<td>failbit</td>
<td>期望读取的数值却读出一个字符等错误，这种问题可以修正，且流还可以使用。<br>到达文件结束位置会被置位。</td>
</tr>
<tr>
<td>eofbit</td>
<td>到达文件结束位置，其会被置位。</td>
</tr>
<tr>
<td>goodbit</td>
<td>值为0表示流未发生错误，如果上面任何一个被置位，则检测流状态的条件会失败</td>
</tr>
</tbody></table>
<p>标准库还定义了一组函数来查询这些标志位的状态。操作 good在所有错误位均未置位的情况下返回true，而 bad、fail和 eof则在对应错误位被置位时返回true。此外，在 badbit被置位时，fail也会返回true。这意味着，使用good或fail是确定流的总体状态的正确方法。实际上，我们将流当作条件使用的代码就等价于!fail()。而eof和 bad操作只能表示特定的错误。</p>
<h4 id="管理条件状态"><a href="#管理条件状态" class="headerlink" title="管理条件状态"></a>管理条件状态</h4><p>流对象的rdstate成员返回一个iostate值，对应流的当前状态。setstate操作将给定条件位置位，表示发生了对应错误。clear成员是一个重载的成员(参见6.4节,第206页):它有一个不接受参数的版本，而另一个版本接受一个iostate类型的参数。<br>clear不接受参数的版本清除(复位)所有错误标志位。执行clear()后,调用good会返回true。我们可以这样使用这些成员:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记住cin的当前状态</span></span><br><span class="line"><span class="keyword">auto</span> old_state = cin.<span class="built_in">rdstate</span>();			<span class="comment">//记住cin的当前状态</span></span><br><span class="line">cin.<span class="built_in">clear</span>();							<span class="comment">//使cin有效</span></span><br><span class="line"><span class="built_in">process_input</span> (cin) ;					<span class="comment">//使用cin</span></span><br><span class="line">cin.<span class="built_in">setstate</span>(old_state) ;				<span class="comment">//将cin置为原有状态</span></span><br></pre></td></tr></table></figure>

<p>带参数的clear版本接受一个iostate值，表示流的新状态。为了复位单一的条件状态位，我们首先用rdstate读出当前条件状态，然后用位操作将所需位复位来生成新的状态。例如，下面的代码将failbit和 badbit复位，但保持eofbit不变://复位failbit和badbit，保持其他标志位不变cin.clear(cin.rdstate () &amp; ~cin.failbit &amp; ~cin.badbit);</p>
<h3 id="管理输出缓冲"><a href="#管理输出缓冲" class="headerlink" title="管理输出缓冲"></a>管理输出缓冲</h3><p>每个输出流都管理一个缓冲区，用来保存程序读写的数据。例如，如果执行下面的代码</p>
<p><code>os &lt;&lt; &quot;please enter a value: &quot;;</code></p>
<p>文本串可能立即打印出来，但也有可能被操作系统保存在缓冲区中，随后再打印。有了缓冲机制，操作系统就可以将程序的多个输出操作组合成单一的系统级写操作。由于设备的写操作可能很耗时，允许操作系统将多个输出操作组合为单一的设备写操作可以带来很大的性能提升。</p>
<p>导致缓冲刷新（即，数据真正写到输出设备或文件）的原因有很多;</p>
<ul>
<li>程序正常结束，作为main函数的return操作的一部分，缓冲刷新被执行。</li>
<li>缓冲区满时，需要刷新缓冲，而后新的数据才能继续写入缓冲区。</li>
<li>我们可以使用操纵符如 endl（参见1.2节，第6页）来显式刷新缓冲区。</li>
<li>在每个输出操作之后，我们可以用操纵符unitbuf设置流的内部状态，来清空缓冲区。默认情况下，对cerr是设置unitbuf的，因此写到cerr的内容都是立即刷新的。</li>
<li>一个输出流可能被关联到另一个流。在这种情况下，当读写被关联的流时，关联到的流的缓冲区会被刷新。例如，默认情况下，cin和 cerr都关联到cout。因此，读cin或写cerr都会导致cout的缓冲区被刷新。</li>
</ul>
<h4 id="刷新输出缓冲区"><a href="#刷新输出缓冲区" class="headerlink" title="刷新输出缓冲区"></a>刷新输出缓冲区</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt;<span class="string">&quot;hi! &quot;</span> &lt;&lt;endl;			<span class="comment">//输出hi和一个换行，然后刷新缓冲区</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hi ! &quot;</span> &lt;&lt; flush;		<span class="comment">//输出hi，然后刷新缓冲区，不附加任何额外字符</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hi ! &quot;</span> &lt;&lt;ends;			<span class="comment">//输出hi和一个空字符，然后刷新缓冲区</span></span><br></pre></td></tr></table></figure>

<h4 id="unitbuf操纵符"><a href="#unitbuf操纵符" class="headerlink" title="unitbuf操纵符"></a>unitbuf操纵符</h4><p>如果想在每次输出操作后都刷新缓冲区，我们可以使用unitbuf操纵符。它告诉流在接下来的每次写操作之后都进行一次 flush 操作。而nounitbuf操纵符则重置流，使其恢复使用正常的系统管理的缓冲区刷新机制：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; unitbuf;					<span class="comment">//所有输出操作后都会立即刷新缓冲区	</span></span><br><span class="line"><span class="comment">//任何输出都立即刷新，无缓冲</span></span><br><span class="line">cout &lt;&lt;nounitbuf ;					<span class="comment">//回到正常的缓冲方式</span></span><br></pre></td></tr></table></figure>

<p><em>如果程序异常终止,输出缓冲区是不会被刷新的。当一个程序崩溃后，它所输出的数据很可能停留在输出缓冲区中等待打印。<br>当调试一个已经崩溃的程序时,需要确认那些你认为已经输出的数据确实已经刷新了。否则，可能将大量时间浪费在追踪代码为什么没有执行上，而实际上代码已经执行了，只是程序崩溃后缓冲区没有被刷新，输出数据被挂起没有打印而已。</em></p>
<h4 id="关联输入和输出流"><a href="#关联输入和输出流" class="headerlink" title="关联输入和输出流"></a>关联输入和输出流</h4><p>当一个输入流被关联到一个输出流时，任何试图从输入流读取数据的操作都会先刷新关联的输出流。标准库将cout和 cin关联在一起，因此下面语句导致cout的缓冲区被刷新。<br><code>cin &gt;&gt; ival;</code><br>tie可以将自己和一个输出流绑定起来，并且返回与自己关联的对象：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cin.<span class="built_in">tie</span> ( &amp;cout) ;						<span class="comment">//仅仅是用来展示:标准库将cin和cout关联在一起</span></span><br><span class="line"><span class="comment">// old_tie指向当前关联到cin的流（如果有的话)</span></span><br><span class="line">ostream *old_tie = cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>); 	<span class="comment">//cin 不再与其他流关联</span></span><br><span class="line"><span class="comment">//将cin 与cerr关联;这不是一个好主意，因为cin应该关联到cout</span></span><br><span class="line">cin.<span class="built_in">tie</span> ( &amp;cerr);						<span class="comment">//读取cin会刷新cerr而不是cout</span></span><br><span class="line">cin.<span class="built_in">tie</span>(old_tie) ;						<span class="comment">//重建cin和 cout间的正常关联</span></span><br></pre></td></tr></table></figure>

<p>在这段代码中，为了将一个给定的流关联到一个新的输出流，我们将新流的指针传递给了tie。为了彻底解开流的关联，我们传递了一个空指针。每个流同时最多关联到一个流，但多个流可以同时关联到同一个ostream。</p>
<h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2><p>头文件 fstream定义了三个类型来支持文件IO:ifstream从一个给定文件读取数据，ofstream向一个给定文件写入数据，以及fstream可以读写给定文件。</p>
<p>fstream中定义的类型还增加了一些新的成员管理与流关联的文件</p>
<table>
<thead>
<tr>
<th align="left">代码</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fstream fstrm;</td>
<td>创建一个未绑定的文件流。fstream是头文件fstream 中定义的一个类型</td>
</tr>
<tr>
<td align="left">fstream fstrm (s);</td>
<td>创建一个fstream，并打开名为s的文件。s可以是string类型，或者是<br>一个指向C风格字符串的指针。这些构造函数都是explicit的。默认的<br>文件模式mode依赖于fstream的类型</td>
</tr>
<tr>
<td align="left">fstream fstrm <br>(s,mode) ;</td>
<td>与前一个构造函数类似，但按指定mode打开文件</td>
</tr>
<tr>
<td align="left">fstrm.open (s)</td>
<td>打开名为s 的文件，并将文件与 fstrm绑定。s可以是一个string或一个指向<br>C风格字符串的指针。默认的文件mode依赖于fstream的类型。返回void</td>
</tr>
<tr>
<td align="left">fstrm.close ()</td>
<td>关闭与fstrm绑定的文件。返回void</td>
</tr>
<tr>
<td align="left">fstrm.is_open ()</td>
<td>返回一个bool值,指出与fstrm关联的文件是否成功打开且尚未关闭</td>
</tr>
</tbody></table>
<h3 id="使用文件流对象"><a href="#使用文件流对象" class="headerlink" title="使用文件流对象"></a>使用文件流对象</h3><p>向读写一个文件时，需要先定义一个文件流对象，如果提供了一个文件名，则会自动调用open：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">in</span> <span class="params">(ifile)</span></span>;						<span class="comment">//构造一个ifstream并打开给定文件</span></span><br><span class="line">ofstream out;								<span class="comment">//输出文件流未关联到任何文件</span></span><br></pre></td></tr></table></figure>

<p>输入流in，初始化为从文件读取数据，输出流out，未关联。</p>
<h4 id="用fstream代替iostream-amp"><a href="#用fstream代替iostream-amp" class="headerlink" title="用fstream代替iostream&amp;"></a>用fstream代替iostream&amp;</h4><p>根据在要求使用基类对象的地方，我们可以使用继承类型的对象来替代。所以在调用一个具有iostream的参数时，可以用fstream来调用。</p>
<h4 id="成员函数open和close"><a href="#成员函数open和close" class="headerlink" title="成员函数open和close"></a>成员函数open和close</h4>]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第四章</title>
    <url>/2021/12/09/%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>一元运算符</strong>作用于一个运算对象，二元运算符作用于两个运算对象，三元对运算对象没有限制。</p>
<p>C++语言定义了运算符作用于内置类型和复合类型的运算对象时所执行的操作。当运算符作用于类类型的运算对象时，用户可以自行定义其含义。因为这种自定义的过程事实上是为已存在的运算符赋予了另外一层含义，所以称之为**重载运算符（ overloadedoperator)**。IO库的&gt;&gt;和&lt;&lt;运算符以及string对象、vector对象和迭代器使用的运算</p>
<p><strong>左值和右值</strong></p>
<span id="more"></span>

<ul>
<li>当一个对象被用作右值的时候，用的是对象的值（内容);</li>
<li>当对象被用作左值的时候,用的是对象的身份（在内存中的位置)。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">decltype</span>(*p) d1;<span class="comment">//d1为引用类型</span></span><br><span class="line"><span class="keyword">decltype</span>(&amp;p) d2;<span class="comment">//d2为指针的指针</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="求值顺序"><a href="#求值顺序" class="headerlink" title="求值顺序"></a>求值顺序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; ++i &lt;&lt; endl; <span class="comment">//未定义的</span></span><br></pre></td></tr></table></figure>

<p>这里可能先++i再求值，结果为1 1，也可能求值，再++i，结果为0 1，所以避免出现此种代码。</p>
<p>只有&amp;&amp;、||、？：、，四种运算符有明确的求值顺序。</p>
<p>形如<code>f() + g() * h() + j()</code>，因为求值的顺序与优先级和结合律无关，所以如果函数内部改变了一些关联的参数，则无法预计</p>
<hr>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><ul>
<li>一元运算符大于二元运算符</li>
<li>%不允许运算对象为浮点类型</li>
<li>C++11规定无论正负一律向0取整</li>
</ul>
<hr>
<h2 id="逻辑和关系运算符"><a href="#逻辑和关系运算符" class="headerlink" title="逻辑和关系运算符"></a>逻辑和关系运算符</h2><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">与</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">或</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">异或</td>
</tr>
<tr>
<td align="center">||</td>
<td align="center">短路或</td>
</tr>
<tr>
<td align="center">&amp;&amp;</td>
<td align="center">短路与</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">非</td>
</tr>
</tbody></table>
<p>逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。这种策略称为<strong>短路求值(short-circuit evaluation）</strong>。<br><strong>逻辑非运算符</strong></p>
<p>在对象前加！表示取反，如<code>!s.empty()</code>。</p>
<p><strong>关系运算符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//哎哟!这个条件居然拿i&lt;j的布尔值结果和k比较!</span></span><br><span class="line"><span class="keyword">if</span> (i&lt;j&lt;k)<span class="comment">//若k 大于1则为真!</span></span><br><span class="line"><span class="comment">//正确:当i小于j并且j小于k时条件为真</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;j &amp;&amp; j&lt;k)&#123;<span class="comment">/* ...* / &#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算的结果是它的左侧运算对象，并且是一个左值。相应的，结果的类型就是左侧运算对象的类型。如果赋值运算符的左右两个运算对象类型不同，则右侧运算对象将转换成左侧运算对象的类型。</p>
<p>C++11允许使用花括号赋值</p>
<p>如<code>vector&lt;int&gt; v = &#123;0,5,3,4,8&#125;;</code></p>
<p><strong>赋值运算满足右结合律</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值运算符满足右结合律，这一点与其他二元运算符不太一样:</span></span><br><span class="line"><span class="keyword">int</span> ival,jval;</span><br><span class="line">ival = jval = <span class="number">0</span>;		<span class="comment">//正确:都被赋值为0</span></span><br><span class="line"><span class="keyword">int</span> ival, *pval;		<span class="comment">// ival的类型是int; pval是指向int的指针</span></span><br><span class="line">ival = pval = <span class="number">0</span> ;		<span class="comment">//错误:不能把指针的值赋给int</span></span><br><span class="line">string sl,s2;</span><br><span class="line">sl = s2 = <span class="string">&quot;OK&quot;</span> ;		<span class="comment">//字符串字面值&quot;OK&quot;转换成string对象</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一种形式烦琐、容易出错的写法</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="built_in">get_value</span> () ;		<span class="comment">//得到第一个值</span></span><br><span class="line"><span class="keyword">while</span> (i != <span class="number">42</span>)&#123;</span><br><span class="line">	<span class="comment">//其他处理·</span></span><br><span class="line">	i = <span class="built_in">get_value</span> ( );		<span class="comment">//得到剩下的值</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i ;</span><br><span class="line"><span class="comment">//更好的写法:条件部分表达得更加清晰</span></span><br><span class="line"><span class="keyword">while</span> ((i = <span class="built_in">get_value</span>())!= <span class="number">42</span>)&#123;	<span class="comment">//其他处理…..</span></span><br></pre></td></tr></table></figure>

<p><label stype = "color: red">切勿混淆”==”与“=”</label></p>
<hr>
<h2 id="递增和递减"><a href="#递增和递减" class="headerlink" title="递增和递减"></a>递增和递减</h2><p>++和–是加一减一一种简介的书写，若非必须，建议养成写前置版本的习惯。因为后置版本会造成性能浪费。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> pbeg = v.<span class="built_in">begin</span> ();</span><br><span class="line"><span class="comment">//输出元素直至遇到第一个负值为止</span></span><br><span class="line"><span class="keyword">while</span> (pbeg != v.<span class="built_in">end</span> () &amp;&amp; *beg &gt;= <span class="number">0</span> )</span><br><span class="line">	cout&lt;&lt; *pbeg++ &lt;&lt; endl;<span class="comment">//输出当前值并将pbeg向前移动一个元素</span></span><br></pre></td></tr></table></figure>

<p><code>*pbeg++</code>等价于<code>*(pbeg++)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该循环的行为是未定义的!</span></span><br><span class="line"><span class="keyword">while</span> (beg != s.<span class="built_in">end</span> () &amp; &amp; !<span class="built_in">isspace</span>(*beg))</span><br><span class="line">	*beg = <span class="built_in">toupper</span> ( *beg++); <span class="comment">//错误:该赋值语句未定义</span></span><br></pre></td></tr></table></figure>

<p>如果一条子表达式改变了某个运算对象的值，另一条子表达式又要使用该值的话，运算对象的求值顺序就很关键了。因为递增运算符和递减运算符会改变运算对象的值，所以要提防在复合表达式中错用这两个运算符。</p>
<hr>
<h2 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h2><p>ptr-&gt;mem等价于(*ptr).mem；</p>
<p>因为解引用运算符的优先级低于点运算符，所以执行解引用运算的子表达式两端必须加上括号。如果没加括号，代码的含义就大不相同了。</p>
<hr>
<h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>cond ? expr1 : expr2;</p>
<p>此运算符只对expr1和expr2中的一个求值。</p>
<p><strong>嵌套运算符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">finalgrade = (grade &gt; <span class="number">90</span>) ? <span class="string">&quot;high pass&quot;</span></span><br><span class="line">						  : (grade &lt; <span class="number">60</span>)?<span class="string">&quot;fail&quot;</span> : <span class="string">&quot;pass&quot;</span> ;</span><br></pre></td></tr></table></figure>

<p>条件运算符是满足右结合性质，意味着从右向左顺序组合，但嵌套最好不要超过两层。</p>
<p><em>解释一下左（右）结合律，举个例子，假设<del>是一个运算符，又有表达式a</del>b<del>c，如果</del>是左结合的，那么该表达式被解析为(a<del>b)</del>c，如果<del>是右结合的，那么该表达式将被解析为a</del>(b~c)。比如上表中三目运算符?:是从右向左结合的</em></p>
<p><strong>优先级</strong></p>
<p>该运算符优先级非常低，所以长表达式嵌套时最好加上括号。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; ( (grade &lt; <span class="number">60</span>) ? <span class="string">&quot;fail&quot;</span> : <span class="string">&quot;pass&quot;</span> );	<span class="comment">// 输出pass或者fail</span></span><br><span class="line">cout &lt;&lt; (grade &lt; <span class="number">60</span>) ? <span class="string">&quot;fail&quot;</span> : <span class="string">&quot;pass&quot;</span>;		<span class="comment">//输出1或者0!</span></span><br><span class="line">cout &lt;&lt; grade &lt; <span class="number">60</span> ? <span class="string">&quot;fail&quot;</span> : <span class="string">&quot;pass&quot;</span>;		<span class="comment">//错误:试图比较cout和60</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&amp; 			位与</span><br><span class="line">| 			位或</span><br><span class="line">^ 			位异或</span><br><span class="line">~ 			取反</span><br><span class="line">&gt;&gt; 			向右移</span><br><span class="line">&gt;&gt;&gt; 		无符号右移</span><br><span class="line">&lt;&lt; 			向左移</span><br></pre></td></tr></table></figure>

<p>关于符号位如何处理没有明确的规定，所以强烈建议仅将位运算符用于处理无符号类型，小整型在使用位运算符时会自动提升至大整型。</p>
<p><strong>移位运算符</strong></p>
<p>左移运算符(&lt;&lt;)在右侧插入值为0的二进制位。右移运算符(&gt;&gt;)的行为则依赖于其左侧运算对象的类型:如果该运算对象是无符号类型,在左侧插入值为0的二进制位;如果该运算对象是带符号类型，在左侧插入符号位的副本或值为0的二进制位，如何选择要视具体环境而定。</p>
<p><strong>位求反运算符</strong></p>
<p>位求反运算符(~）将运算对象逐位求反后生成一个新值，将1置为0、将0置为1。char类型的运算对象首先提升成int类型，提升时运算对象原来的位保持不变，往高位添加0即可。因此在本例中，首先将bits提升成int类型，增加24个高位0，随后将提升后的值逐位求反。</p>
<p><strong>使用位运算符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> quiz1 =<span class="number">0</span>;							<span class="comment">//我们把这个值当成是位的集合来使用</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="number">1UL</span> = <span class="number">1</span>;</span><br><span class="line"><span class="number">1UL</span> &lt;&lt; <span class="number">27</span>										<span class="comment">//生成一个值，该值只有第27位为1</span></span><br><span class="line">quiz1 |= <span class="number">1UL</span>&lt;&lt; <span class="number">27</span>;								<span class="comment">//等价于quiz1 = quiz1 | 1UL&lt;&lt; 27;</span></span><br></pre></td></tr></table></figure>

<p>设quiz1当成位的集合，每一个位标识该位学生是否及格，则使用该代码可以表示第27位学生及格了。</p>
<p>若第27位学生没有及格使用一个第27位是0，其他位都是1的数,使用&amp;位于运算即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">quizl &amp;= ^(<span class="number">1UL</span> &lt;&lt; <span class="number">27</span>);</span><br><span class="line"><span class="keyword">bool</span> status = quiz1 &amp;(<span class="number">1UL</span>&lt;&lt;<span class="number">27</span>);						<span class="comment">//学生27是否通过了测验?</span></span><br></pre></td></tr></table></figure>

<p>最后代码可判断第27位是否通过检测。</p>
<p><strong>位移运算符（IO预算符）满足左结合律</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt; <span class="string">&quot;hi&quot;</span> &lt;&lt; <span class="string">&quot; there&quot;</span> &lt;&lt;endl; </span><br><span class="line"><span class="comment">//的执行过程实际上等同于</span></span><br><span class="line">((cout&lt;&lt;<span class="string">&quot;hi&quot;</span>) &lt;&lt;<span class="string">&quot; there&quot;</span> ) &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="number">42</span> + <span class="number">10</span>;				<span class="comment">//正确:+的优先级更高，因此输出求和结果</span></span><br><span class="line">cout &lt;&lt; (<span class="number">10</span> &lt; <span class="number">42</span>);				<span class="comment">//正确:括号使运算对象按照我们的期望组合在一起，输出1</span></span><br><span class="line">cout &lt;&lt; <span class="number">10</span> &lt; <span class="number">42</span>;				<span class="comment">//错误:试图比较cout和42!</span></span><br></pre></td></tr></table></figure>

<p>移位运算符的优先级不高不低，介于中间:比算术运算符的优先级低，但比关系运算符、赋值运算符和条件运算符的优先级高。因此在一次使用多个运算符时，有必要在适当的地方加上括号使其满足我们的要求。</p>
<hr>
<h2 id="sizeof运算符"><a href="#sizeof运算符" class="headerlink" title="sizeof运算符"></a>sizeof运算符</h2><p>sizeof运算符返回一条表达式或一个类型名字所占的字节数。sizeof运算符满足右结合律，其所得的值是一个size_t类型的常量表达式。运算符的运算对象有两种形式:<code>sizeof (type);sizeof expr;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Sales_data data, *p;</span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span> (Sales_data) ;							<span class="comment">//存储sales_data类型的对象所占的空间大小</span></span><br><span class="line"><span class="keyword">sizeof</span> data;									<span class="comment">//data的类型的大小，即sizeof(Sales_data)</span></span><br><span class="line"><span class="keyword">sizeof</span> p;										<span class="comment">//指针所占的空间大小</span></span><br><span class="line"><span class="keyword">sizeof</span> *p;										<span class="comment">// p所指类型的空间大小，即sizeof(Sales_data)</span></span><br><span class="line"><span class="keyword">sizeof</span> data.revenue;							<span class="comment">//sales_data的revenue成员对应类型的大小</span></span><br><span class="line"><span class="keyword">sizeof</span> sales_data: :revenue;					<span class="comment">//另一种获取revenue大小的方式</span></span><br></pre></td></tr></table></figure>

<p>这些例子中最有趣的一个是<code>sizeof  *p</code>。首先，因为 sizeof满足右结合律并且与<code>*</code>运算符的优先级一样，所以表达式按照从右向左的顺序组合。也就是说，它等价于<code>sizeof (*p)</code>。其次，因为sizeof不会实际求运算对象的值,所以即使p是一个无效(即未初始化）的指针也不会有什么影响。在sizeof的运算对象中解引用一个无效指针仍然是一种安全的行为，因为指针实际上并没有被真正使用。sizeof不需要真的解引用指针也能知道它所指对象的类型。</p>
<ul>
<li>对char或者类型为char的表达式执行sizeof运算，结果得1。</li>
<li>对引用类型执行sizeof运算得到被引用对象所占空间的大小。·对指针执行sizeof运算得到指针本身所占空间的大小。</li>
<li>对解引用指针执行sizeof运算得到指针指向的对象所占空间的大小,指针不需有效。</li>
<li>对数组执行sizeof运算得到整个数组所占空间的大小,等价于对数组中所有的元素各执行一次sizeof运算并将所得结果求和。注意，sizeof运算不会把数组转换成指针来处理。</li>
<li>对string对象或vector对象执行sizeof运算只返回该类型固定部分的大小，不会计算对象中的元素占用了多少空间。</li>
</ul>
<hr>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>对于逗号运算符来说，首先对左侧的表达式求值，然后将求值结果丢弃掉。逗号运算符真正的结果是右侧表达式的值。如果右侧运算对象是左值,那么最终的求值结果也是左值。</p>
<hr>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>如果两种类型可以**相互转换( conversion)**，那么它们就是关联的。<br>举个例子，考虑下面这条表达式，它的目的是将ival初始化为6：</p>
<p><code>int ival = 3.541 + 3;//编译器可能会警告该运算损失了精度</code></p>
<p>代码中，首先为了不损失精度，3转为double类型，与3.541相加，得到double类型结果，但无法复制给int类型，最后再次转会int进行初始化。</p>
<p>上述的类型转换是自动执行的，无须程序员的介入，有时甚至不需要程序员了解。因此，它们被称作<strong>隐式转换（implicit conversion）</strong>。</p>
<p>何时发生隐式转换：</p>
<ul>
<li>在大多数表达式中，比int类型小的整型值首先提升为较大的整数类型。</li>
<li>在条件中，非布尔值转换成布尔类型。<br>初始化过程中，初始值转换成变量的类型;在赋值语句中，右侧运算对象转换成左侧运算对象的类型。</li>
<li>如果算术运算或关系运算的运算对象有多种类型，需要转换成同一种类型。</li>
<li>如第6章将**要介绍的，函数调用时也会发生类型转换。</li>
</ul>
<hr>
<h2 id="算术转换"><a href="#算术转换" class="headerlink" title="算术转换"></a>算术转换</h2><p>其中运算符的运算对象将转换成最宽的类型。例如，如果一个运算对象的类型是 longdouble，那么不论另外一个运算对象的类型是什么都会转换成long double。还有一种更普遍的情况，当表达式中既有浮点类型也有整数类型时，整数值将转换成相应的浮点类型。</p>
<p><strong>整型提升</strong></p>
<ul>
<li><p>对于bool、char、signed char、unsigned char、short和unsigned short等类型来说，只要它们所有可能的值都能存在 int 里，它们就会提升成int 类型；否则，提升成unsigned int类型。就如我们所熟知的，布尔值false提升成0、true提升成1。</p>
</li>
<li><p>较大的char类型( wchar_t.char16_t、char32_t)提升成int.unsigned int、long、unsigned long、long long和 unsigned long long中最小的一种类型，前提是转换后的类型要能容纳原类型所有可能的值。</p>
</li>
</ul>
<p><strong>无符号与带符号转换</strong>（*****）</p>
<p>若类型分别位无符号和带符号，则</p>
<ul>
<li>无符号&gt;=带符号，带符号转为无符号。</li>
<li>相反，如果无符号类型所有值都能存在带符号类型中，则无符号转带符号，如不行带符号转无符号</li>
</ul>
<hr>
<h3 id="其他隐式类型转换"><a href="#其他隐式类型转换" class="headerlink" title="其他隐式类型转换"></a>其他隐式类型转换</h3><p><strong>数组转指针</strong></p>
<p>在大多数组表达式中，数组自动的转为指针，如：<code>int ia[10];    int* ip = ia;</code></p>
<p>但是当数组被用作 decltype关键字的参数，或者作为取地址符（ &amp;)、sizeof 及typeid等运算符的运算对象时，上述转换不会发生。同样的，如果用一个引用来初始化数组<code>int (&amp;arrRef)[10] = arr</code>;，上述转换也不会发生。</p>
<p><strong>指针的转换</strong></p>
<p>指针的转换:C++还规定了几种其他的指针转换方式，包括常量整数值О或者字面值nullptr能转换成任意指针类型;指向任意非常量的指针能转换成<code>void*</code>;指向任意对象的指针能转换成<code>const void*</code>。15.2.2节(第530页）将要介绍，在有继承关系的类型间还有另外一种指针转换的方式。</p>
<p><strong>转换布尔类型</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *cp = <span class="built_in">get_string</span> ();</span><br><span class="line"><span class="keyword">if</span> (cp)<span class="comment">/* ...* / 					//如果指针cp 不是0，条件为真</span></span><br><span class="line"><span class="comment">while ( *cp)/* ...*/</span>				<span class="comment">//如果*cp不是空字符，条件为真</span></span><br></pre></td></tr></table></figure>

<p><strong>转换成常量</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;j = i;				<span class="comment">//非常量转换成const int的引用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;i;				<span class="comment">//非常量的地址转换成const的地址</span></span><br><span class="line"><span class="keyword">int</span> &amp;r = j, *q= p;				<span class="comment">//错误:不允许const转换成非常量</span></span><br></pre></td></tr></table></figure>

<p><strong>类类型定义的转换</strong>：</p>
<p>类类型能定义由编译器自动执行的转换，不过编译器每次只能执行一种类类型的转换。在7.5.4节（第263页)中我们将看到一个例子，如果同时提出多个转换请求，这些请求将被拒绝。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s, t = <span class="string">&quot;a value&quot;</span> ;					<span class="comment">//字符串字面值转换成string类型</span></span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s)							<span class="comment">//while的条件部分把cin转换成布尔值</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">double</span> slope = i/j;</span><br></pre></td></tr></table></figure>

<p>就要使用某种方法将i和/或j显式地转换成double,这种方法称作**强制类型转换(cast)**。</p>
<p><strong>命名的强制类型转换</strong></p>
<p><code>cast-name&lt;type&gt;(expression);</code></p>
<p>其中，type是转换的目标类型而expression是要转换的值。如果 type是引用类型，则结果是左值。cast-name是<strong>static_cast . dynamic_cast . const_cast和reinterpret_cast</strong>中的一种。dynamic_cast支持运行时类型识别。</p>
<p><strong>static_cast</strong></p>
<p>任何具有明确定义的类型转换,只要不包含底层const,都可以使用static_cast。例如，通过将一个运算对象强制转换成double类型就能使表达式执行浮点数除法:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进行强制类型转换以便执行浮点数除法</span></span><br><span class="line"><span class="keyword">double</span> slope = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(j)/ i ;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>* p = &amp;d;							<span class="comment">//正确:任何非常量对象的地址都能存入void*</span></span><br><span class="line"><span class="keyword">double</span> *dp = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>*&gt;(p);	<span class="comment">//正确:将void*转换回初始的指针类型</span></span><br></pre></td></tr></table></figure>

<p><strong>const_cast</strong></p>
<p>const_cast只能改变运算对象的底层const，称其为去掉const性质：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *pc;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(pc); 			<span class="comment">//正确:但是通过p 写值是未定义的行为</span></span><br></pre></td></tr></table></figure>

<p>它能且只能改变常量属性，如对象是常量，再使用它执行写操作会产生未定义后果。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *cp;				</span><br><span class="line"><span class="keyword">char</span> *q = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(cp);				<span class="comment">//错误:static_cast不能转换掉const性质</span></span><br><span class="line"><span class="keyword">static_cast</span>&lt;string&gt;(cp);						<span class="comment">//正确:字符串字面值转换成string类型const_cast&lt;string&gt; (cp) ;							//错误:const_cast只改变常量属性</span></span><br></pre></td></tr></table></figure>

<p><strong>reinterpret_cast</strong>(*****)<br>通常为运算对象的位模式提供较低层次上的重新解释。</p>
<p><label stype = "color:red">避免强制类型转换，特别是最后一种。</label></p>
<p><strong>旧式强制类型转换</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> (expr ) ;								<span class="comment">//函数形式的强制类型转换</span></span><br><span class="line">(type) expr ;								<span class="comment">//c语言风格的强制类型转换</span></span><br><span class="line"><span class="keyword">char</span> *pc = (<span class="keyword">char</span>*) ip; 						<span class="comment">//ip是指向整数的指针,</span></span><br></pre></td></tr></table></figure>

<p>根据所涉及的类型不同，旧式的强制类型转换分别具有与const_cast、static_cast或reinterpret_cast相似的行为。当我们在某处执行旧式的强制类型转换时，如果换成const_cast和static_cast也合法，则其行为与对应的命名转换一致。如果替换后不合法,则旧式强制类型转换执行与reinterpret_cast类似的功能，与reinterpret_cast效果一样。</p>
<hr>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>​        C++语言提供了一套丰富的运算符，并定义了这些运算符作用于内置类型的运算对象时所执行的操作。此外，C++语言还支持运算符重载的机制，允许我们自己定义运算符作用于类类型时的含义。第14章将介绍如何定义作用于用户类型的运算符。</p>
<p>​        对于含有超过一个运算符的表达式，要想理解其含义关键要理解优先级、结合律和求值顺序。每个运算符都有其对应的优先级和结合律，优先级规定了复合表达式中运算符组合的方式，结合律则说明当运算符的优先级一样时应该如何组合。</p>
<p>​        大多数运算符并不明确规定运算对象的求值顺序:编译器有权自由选择先对左侧运算对象求值还是先对右侧运算对象求值。一般来说，运算对象的求值顺序对表达式的最终结果没有影响。但是，如果两个运算对象指向同一个对象而且其中一个改变了对象的值，就会导致程序出现不易发现的严重缺陷。</p>
<p>​        最后一点，运算对象经常从原始类型自动转换成某种关联的类型。例如，表达式中的小整型会自动提升成大整型。不论内置类型还是类类型都涉及类型转换的问题。如果需要，我们还可以显式地进行强制类型转换。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第三章</title>
    <url>/2021/12/08/C++%20Primer%20%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="字符串、向量和数组"><a href="#字符串、向量和数组" class="headerlink" title="字符串、向量和数组"></a>字符串、向量和数组</h1><p>​        第2章介绍的内置类型是由C++语言直接定义的。这些类型，比如数字和字符，体现了大多数计算机硬件本身具备的能力。标准库定义了另外一组具有更高级性质的类型，它们尚未直接实现到计算机硬件中。<br>​        本章将介绍两种最重要的标准库类型: string 和 vector。string表示可变长的字符序列，vector存放的是某种给定类型对象的可变长序列。本章还将介绍内置数组类型，和其他内置类型一样，<strong>数组的实现与硬件密切相关</strong>。因此相较于标准库类型string和 vector，数组在灵活性上稍显不足。</p>
<span id="more"></span>

<h2 id="命名空间的using声明"><a href="#命名空间的using声明" class="headerlink" title="命名空间的using声明"></a>命名空间的using声明</h2><p>有了 using声明就无须专门的前缀（形如std :）也能使用所需的名字。声明如下：<br><code>using namespace::name ;</code><br>例如：<code>using std::cin; using std::cout;</code></p>
<p>头文件不应包含using声明，以免产生名字的冲突。</p>
<h2 id="标准库类型string"><a href="#标准库类型string" class="headerlink" title="标准库类型string"></a>标准库类型string</h2><p>使用前需包含</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br></pre></td></tr></table></figure>

<h3 id="定义和初始化"><a href="#定义和初始化" class="headerlink" title="定义和初始化"></a>定义和初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string sl;<span class="comment">//默认初始化，s1是一个空字符串</span></span><br><span class="line">string s2 = s1;<span class="comment">//s2是s1的副本</span></span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(s1)</span></span>;<span class="comment">//与上面相同</span></span><br><span class="line">string s4 = <span class="string">&quot;hiya&quot;</span>;<span class="comment">//s3是该字符串字面值的副本</span></span><br><span class="line"><span class="function">string <span class="title">s5</span><span class="params">(<span class="string">&quot;hiya&quot;</span>)</span></span>;<span class="comment">//与上相同</span></span><br><span class="line"><span class="function">string <span class="title">s6</span><span class="params">(<span class="number">10</span>,<span class="string">&#x27;c&#x27;</span> )</span></span>;<span class="comment">//s4的内容是cccccccccc</span></span><br><span class="line">string s7 = <span class="built_in">string</span>(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>);<span class="comment">//与上相同</span></span><br></pre></td></tr></table></figure>

<p><strong>直接初始化与拷贝初始化</strong></p>
<p>区分：使用等号的都是拷贝初始化，其余是直接初始化。</p>
<h3 id="string对象上的操作"><a href="#string对象上的操作" class="headerlink" title="string对象上的操作"></a>string对象上的操作</h3><p><strong>读写string对象</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="function">nt <span class="title">main</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">	string s;<span class="comment">//空字符串</span></span></span></span><br><span class="line"><span class="params"><span class="function">	cin &gt;&gt; s;<span class="comment">//将string 对象读入s，遇到空白停止</span></span></span></span><br><span class="line"><span class="params"><span class="function">	cout &lt;&lt; s &lt;&lt;endl;<span class="comment">//输出s</span></span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">return</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure>

<p>输入过程中自动忽略开头空白，直到下一处空白，如：“   Hello World!  ”则只会输出”Hello”，输出结果没有任何空格。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string sl, s2;</span><br><span class="line">cin &gt;&gt; sl &gt;&gt; s2; <span class="comment">//把第一个输入读到s1中，第二个输入读到s2中</span></span><br><span class="line">cout&lt;&lt; s1 &lt;&lt; s2 &lt;&lt;endl;<span class="comment">//输出两个string对象</span></span><br></pre></td></tr></table></figure>

<p>这样输入上面的语句则会输出”HelloWorld!”。</p>
<p><strong>读取未知数量的string对象</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	string word;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; word)&#123;<span class="comment">//反复读取，直至到达文件末尾</span></span><br><span class="line">		cout &lt;&lt; word &lt;&lt; endl;<span class="comment">//逐个输出单词，每个单词后面紧跟一个换行</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在遇到文件结束符或非法输入就结束了</p>
<p><strong>getline读取一整行</strong></p>
<p>​    <strong>getline函数</strong>的参数是一个输入流和一个string对象，函数从给定的输入流中读入内容，直到遇到换行符为止（注意换行符也被读进来了)，然后把所读的内容存入到那个string对象中去（注意不存换行符)。getline只要一遇到换行符就结束读取操作并返回结果，哪怕输入的一开始就是换行符也是如此。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( )</span></span>&#123;</span><br><span class="line">	string line;</span><br><span class="line">    <span class="comment">//每次读入一整行，直至到达文件末尾</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">getline</span>(cin,line) )</span><br><span class="line">		cout&lt;&lt; line &lt;&lt; endl;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>string的empty和size操作</strong></p>
<ul>
<li><p>empty函数根据string对象是否为空返回对应的布尔值。</p>
</li>
<li><p>size函数返回string对象的长度，其类型为string::size_type类型，它是一个无符号类型的值，所以尽量避免size()和int混用。</p>
</li>
</ul>
<p><strong>比较string对象</strong></p>
<ul>
<li>两个string对象长度相同，所包含字符必须一模一样才算相等。</li>
<li>长度不同，而且较短string对象的每个字符都与较长string对象对应位置上的字符相同，就说较短string对象小于较长string对象。</li>
<li>如果两个string 对象在某些对应的位置上不一致，则string对象比较的结果<br>其实是string对象中第一对相异字符比较的结果。</li>
</ul>
<p><strong>为string对象赋值</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">st1</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>)</span>, st2</span>;</span><br><span class="line">st1 = st2;</span><br></pre></td></tr></table></figure>

<p><strong>两个string对象相加</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;hello, &quot;</span>, s2 = <span class="string">&quot;world\n&quot;</span>;</span><br><span class="line">string s3 = s1 + s2; <span class="comment">// s3 = &quot;hello, world\n&quot;</span></span><br><span class="line">s1 += s2; <span class="comment">//与上面等价</span></span><br></pre></td></tr></table></figure>

<p><strong>字面值和string对象相加</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s4 = s1 + <span class="string">&quot;, &quot;</span> + s2; <span class="comment">//可以，依次运算中至少保证有一个string对象</span></span><br><span class="line">string s5 = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span><span class="comment">//错误，不允许两个字面值直接相加</span></span><br></pre></td></tr></table></figure>



<h3 id="处理string对象中的字符"><a href="#处理string对象中的字符" class="headerlink" title="处理string对象中的字符"></a>处理string对象中的字符</h3><p>函数名称                                   返回值<br>isalnum()        如果参数是字母数字，即字母或者数字，函数返回true</p>
<p>isalpha()         如果参数是字母，函数返回true</p>
<p>iscntrl()           如果参数是控制字符，函数返回true</p>
<p>isdigit()           如果参数是数字（0－9），函数返回true<br>isgraph()        如果参数是除空格之外的打印字符，函数返回true</p>
<p>islower()         如果参数是小写字母，函数返回true</p>
<p>isprint()          如果参数是打印字符（包括空格），函数返回true</p>
<p>ispunct()        如果参数是标点符号，函数返回true</p>
<p>isspace()        如果参数是标准空白字符，如空格、换行符、水平或垂直制表符，函数返回true</p>
<p>isupper()        如果参数是大写字母，函数返回true</p>
<p>isxdigit()         如果参数是十六进制数字，即0－9、a－f、A－F，函数返回true</p>
<p>tolower()        如果参数是大写字符，返回其小写，否则返回该参数</p>
<p>toupper()       如果参数是小写字符，返回其大写，否则返回该参数</p>
<p>C++版本的标准库头文件为形如cname，而C头文件形如name.h，这里建议使用C++版本。</p>
<p><strong>for处理每个字符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">str</span> <span class="params">( <span class="string">&quot;some string&quot;</span> )</span></span>;</span><br><span class="line"><span class="comment">//每行输出str中的一个字符。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : str)  <span class="comment">//对于str中的每个字符</span></span><br><span class="line">	cout &lt;&lt; c &lt;&lt; endl; <span class="comment">//输出当前字符，后面紧跟一个换行符</span></span><br></pre></td></tr></table></figure>

<p>如果需要改变str中的字符，则在c前面加上&amp;。</p>
<p><strong>处理部分字符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//依次处理s中的字符直至我们处理完全部字符或者遇到一个空白</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">decltype</span>(s.<span class="built_in">size</span>()) index =<span class="number">0</span>;index != s.<span class="built_in">size</span> ( ) &amp;&amp; !<span class="built_in">isspace</span>(s [index]); ++index)</span><br><span class="line">	s[index] = <span class="built_in">toupper</span>(s[index]);<span class="comment">//将当前字符改成大写形式</span></span><br></pre></td></tr></table></figure>

<p>这里主要注意一点，index必须大于等于0，小于size()。</p>
<h1 id="标准库类型vector"><a href="#标准库类型vector" class="headerlink" title="标准库类型vector"></a>标准库类型vector</h1><p>头文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br></pre></td></tr></table></figure>

<p>vector是一个<strong>类模板</strong>，模板本身不是类或函数，相反可以将模板看作为编译器生成类或函数编写的一份说明。编译器根据模板创建类或函数的过程称为**实例化（instantiation)**，当使用模板时，需要指出编译器应把类或函数实例化成何种类型。</p>
<p>例如<code>vector&lt;int&gt; ivec; vector&lt;Sales_item&gt; Sales_vec;</code></p>
<p><label style = "color::red">vector模板不是类型，包含元素类型的vector才是，如<code>vector&lt;int&gt;</code>,且不可以包含引用</label></p>
<h3 id="定义和初始化vector对象"><a href="#定义和初始化vector对象" class="headerlink" title="定义和初始化vector对象"></a>定义和初始化vector对象</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;T&gt; v1				v1是一个空vector，它潜在的元素是T类型的，执行默认初始化</span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v2</span> <span class="params">(v1)</span>			v2中包含有v1所有元素的副本</span></span><br><span class="line"><span class="function">vector&lt;T&gt; v2 </span>= v1			等价于<span class="built_in">v2</span>(v1)，v2中包含有v1所有元素的副本</span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v3</span> <span class="params">(n,val)</span>		v3包含了n个重复的元素，每个元素的值都是val</span></span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v4</span> <span class="params">(n)</span>			v4包含了n个重复地执行了值初始化的对象</span></span><br><span class="line"><span class="function">vector&lt;T&gt; v5</span>&#123;a,b,c...&#125;  	v5包含了初始值个数的元素，每个元素被赋予相应的初始值</span><br><span class="line">vector&lt;T&gt; v5 =&#123;a,b,c...&#125; 	等价于v5&#123;a,b,c...&#125;</span><br></pre></td></tr></table></figure>

<p>拷贝构造（类型必须相同）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; ivec;				<span class="comment">//初始状态为空</span></span><br><span class="line"><span class="comment">//在此处给ivec添加一些值</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">ivec2</span> <span class="params">(ivec)</span></span>;		<span class="comment">//把ivec的元素拷贝给ivec2</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; ivec3 = ivec;		<span class="comment">//把ivec的元素拷贝给ivec3</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">svec</span><span class="params">(ivec2)</span></span>;		<span class="comment">//错误: svec的元素是string对象，不是int</span></span><br></pre></td></tr></table></figure>

<p><strong>列表初始化vector对象</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; articles = &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span> , <span class="string">&quot;the&quot;</span> &#125;;</span><br><span class="line">vector&lt;string&gt; v1 &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span> &#125; ; 	<span class="comment">//列表初始化</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">v2</span><span class="params">( <span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span>)</span> </span>; 		<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>

<p><strong>值初始化</strong></p>
<p>使用<code>vector&lt;T&gt; v(n);</code>需注意 T 支不支持默认初始化。</p>
<p><code>vector&lt;int&gt; vi = 10;//错误:必须使用直接初始化的形式指定向量大小</code></p>
<p>注意区分花括号和圆括号</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">10</span>)</span> </span>;		<span class="comment">// v1有10个元素，每个的值都是0</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v2&#123;<span class="number">10</span>&#125;; 		<span class="comment">// v2有1个元素，该元素的值是10</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>，<span class="number">1</span>)</span></span>;		<span class="comment">// v3有10个元素，每个的值都是1</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v4 &#123;<span class="number">10</span>,<span class="number">1</span>&#125;; 		 <span class="comment">// v4有2个元素，值分别是10和1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; v5 &#123; <span class="string">&quot;hi&quot;</span>&#125;;<span class="comment">//列表初始化:v5有一个元素</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">v6</span><span class="params">(<span class="string">&quot;hi&quot;</span>)</span></span>;<span class="comment">//错误:不能使用字符串字面值构建vector对象</span></span><br><span class="line">vector&lt;string&gt; V7 &#123;<span class="number">10</span>&#125;;<span class="comment">// v7有10个默认初始化的元素</span></span><br><span class="line">vector&lt;string&gt; v8&#123;<span class="number">10</span>,<span class="string">&quot;hi&quot;</span> &#125;;<span class="comment">// v8有10个值为&quot;hi&quot;的元素</span></span><br></pre></td></tr></table></figure>

<p>上面的代码中，只有v5为列表初始化，使用花括号时，若提供的对象不可以作为对象的初始值，则编译器会尝试默认值初始化。</p>
<h3 id="向vector对象中添加元素"><a href="#向vector对象中添加元素" class="headerlink" title="向vector对象中添加元素"></a>向vector对象中添加元素</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v2;<span class="comment">//空vector对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i != <span class="number">100</span>; ++i)</span><br><span class="line">	v2.<span class="built_in">push_back</span>(i); <span class="comment">//依次把整数值放到v2尾端//循环结束后v2有100个元素，值从0到99</span></span><br></pre></td></tr></table></figure>

<p><label style = "color::red">使用范围for循环遍历容器时，不得改变vector容器的大小。</label></p>
<h3 id="其他vector操作"><a href="#其他vector操作" class="headerlink" title="其他vector操作"></a>其他vector操作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.<span class="built_in">empty</span> () 				<span class="comment">//如果v不含有任何元素，返回真;否则返回假</span></span><br><span class="line">v.<span class="built_in">size</span> () 				<span class="comment">//返回v中元素的个数</span></span><br><span class="line">v.<span class="built_in">push_back</span> (t) 		<span class="comment">//向v的尾端添加一个值为t的元素</span></span><br><span class="line">v [n] 					<span class="comment">//返回v中第n个位置上元素的引用</span></span><br><span class="line">v1 = v2					<span class="comment">//用v2中元素的铂贝替换v1中的元素</span></span><br><span class="line">vl = &#123;a,b,c... &#125;		<span class="comment">//用列表中元素的拷贝替换v1中的元素</span></span><br><span class="line">vl == v2 				<span class="comment">//v1和 v2相等当且仅当它们的元素数量相同且对应位置的元素值都相同</span></span><br><span class="line">v1 != v2</span><br><span class="line">&lt;,&lt;=,&gt;,&gt;= 				<span class="comment">//顾名思义，以字典顺序进行比较</span></span><br></pre></td></tr></table></figure>

<p>vector容器的size类型一定要包含元素类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">veetor&lt;<span class="keyword">int</span>&gt;: :size_type		<span class="comment">//正确</span></span><br><span class="line">vector::size type			<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>

<p>vector容器的比较大小参照string。</p>
<p><label style = "color::red">vector对象（以及string对象）的下标运算符可用于访问已存在的元素，而不能用于添加元素。</label></p>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="使用迭代器"><a href="#使用迭代器" class="headerlink" title="使用迭代器"></a>使用迭代器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由编译器决定b和e的类型</span></span><br><span class="line"><span class="comment">// b表示v的第一个元素，e表示v尾元素的下一位置</span></span><br><span class="line"><span class="keyword">auto</span> b = v.<span class="built_in">begin</span>(), e = v.<span class="built_in">end</span>(); <span class="comment">//b 和e的类型相同</span></span><br></pre></td></tr></table></figure>

<p><label style = "color::red">容器为空时，begin和end都是返回的是同一个迭代器，都是尾后迭代器</label></p>
<p><strong>迭代器运算符</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">* iter				<span class="comment">//返回迭代器iter所指兀素的引用</span></span><br><span class="line">iter-&gt;mem			<span class="comment">//解引用iter并获取该元素的名为mem的成员，等价于(*iter).mem</span></span><br><span class="line">++iter			 	<span class="comment">//令iter指示容器中的下一个元素</span></span><br><span class="line">--iter				<span class="comment">//令iter指示容器中的上一个元素</span></span><br><span class="line">iter1 == iter2		<span class="comment">//判断两个迭代器是否相等（不相等)，如果两个迭代器指示的是同一个元</span></span><br><span class="line">iter1 != iter2		<span class="comment">//素或者它们是同一个容器的尾后迭代器，则相等;反之，不相等</span></span><br></pre></td></tr></table></figure>

<p><strong>迭代器的移动</strong></p>
<p>采用++或–操作改变其位置</p>
<p><label style = "color::red">end返回的迭代器不代表莫格元素，所以不能增减，解引用操作</label></p>
<p>迭代器用法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//依次处理s 的字符直至我们处理完全部字符或者遇到空白</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span> ( ) &amp;&amp; !<span class="built_in">isspace</span> (*it); ++it)</span><br><span class="line">	*it = <span class="built_in">toupper</span>(*it); <span class="comment">//将当前字符改成大写形式</span></span><br></pre></td></tr></table></figure>

<p><strong>迭代器类型</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; : :iterator it; <span class="comment">// it能读写vector&lt;int&gt;的元素</span></span><br><span class="line">string: :iterator it2;		<span class="comment">// it2能读写string对象中的字符</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; : : const_iterator it3; <span class="comment">// it3只能读元素，不能写元素</span></span><br><span class="line">string : :const_iterator it4;  		<span class="comment">//it4只能读字符，不能写字符</span></span><br></pre></td></tr></table></figure>

<p><label style = "color::red">如果容器是常量，则只能使用const迭代器</label></p>
<p><strong>begin和end</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt; cv;</span><br><span class="line"><span class="keyword">auto</span> itl = v.<span class="built_in">begin</span>();	<span class="comment">//it1的类型是vector&lt;int&gt; : :iterator</span></span><br><span class="line"><span class="keyword">auto</span> it2 = cv.<span class="built_in">begin</span>();	<span class="comment">//it2的类型是vector&lt;int&gt;::const_iterator</span></span><br><span class="line"><span class="keyword">auto</span> it3 = v.<span class="built_in">cbegin</span>();	<span class="comment">//it3的类型是vector&lt;int&gt;::const iterator</span></span><br></pre></td></tr></table></figure>

<p>如果对象只需读操作而无须写操作的话最好使用常量类型(比如 const_iterator)。为了便于专门得到const_iterator类型的返回值,C++11新标准引入了两个新函数,分别是cbegin和cend，无论对象是什么，返回值都是const_iterator。</p>
<p><strong>结合解引用和成员访问操作</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">( *it) .<span class="built_in">empty</span>()	<span class="comment">//解引用it，然后调用结果对象的empty成员</span></span><br><span class="line">*it.<span class="built_in">empty</span>()		<span class="comment">//错误:试图访问it的名为empty的成员，但it是个迭代器，没有empty成员</span></span><br><span class="line">it-&gt;<span class="built_in">empty</span>()		<span class="comment">//此操作与上面操作相同</span></span><br></pre></td></tr></table></figure>

<p>为了简化上述表达式，C++语言定义了箭头运算符（-&gt;)。箭头运算符把解引用和成员访问两个操作结合在一起，也就是说，it-&gt;mem和(*it) .mem表达的意思相同。</p>
<p><strong>迭代器失效</strong></p>
<p><label style = "color::red">谨记,但凡是使用了迭代器的循环体，都不要向迭代器所属的容器添加元素。</label></p>
<h3 id="迭代器运算"><a href="#迭代器运算" class="headerlink" title="迭代器运算"></a>迭代器运算</h3><p>迭代器可以进行+- 等运算使它一次移动多个位置，大于小于操作则判断迭代器的相对位置，但必须在同一个容器里。</p>
<p>迭代器相减得到所得结果是两个迭代器的距离。所谓距离指的是右侧的迭代器向前移动多少位置就能追上左侧的迭代器，其类型是名为difference_type 的带符号整型数。string 和vector都定义了difference_type ，因为这个距离可正可负，所以difference_type是带符号类型的。</p>
<p><strong>使用迭代器运算</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// text必须是有序的</span></span><br><span class="line"><span class="comment">// beg 和end表示我们搜索的范围</span></span><br><span class="line"><span class="keyword">auto</span> beg = text.<span class="built_in">begin</span> ( ) , end = text.<span class="built_in">end</span> ( ) ;</span><br><span class="line"><span class="keyword">auto</span> mid = text.<span class="built_in">begin</span> () + (end - beg)/<span class="number">2</span>; <span class="comment">// 初始状态下的中间点</span></span><br><span class="line"><span class="comment">//当还有元素尚未检查并且我们还没有找到sought时执行循环</span></span><br><span class="line"><span class="keyword">while</span> (mid != end &amp; &amp; *mid != sought) &#123;</span><br><span class="line">	<span class="keyword">if</span> (sought&lt; *mid)	<span class="comment">//我们要找的元素在前半部分吗?</span></span><br><span class="line">		end = mid;		<span class="comment">//如果是，调整搜索范围使得忽略掉后半部分</span></span><br><span class="line">	<span class="keyword">else</span>				<span class="comment">//我们要找的元素在后半部分</span></span><br><span class="line">		beg = mid + <span class="number">1</span>;	<span class="comment">//在mid之后寻找</span></span><br><span class="line">	mid = beg + (end - beg)/ <span class="number">2</span>;				<span class="comment">//新的中间点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>与vector对比：</p>
<ul>
<li>数组也是存放类型相同的对象的容器，这些对象本身没有名字，需要通过其所在位置访问。</li>
<li>与vector不同的地方是，数组的大小确定不变，不能随意向数组中增加元素。因为数组的大小固定，因此对某些特殊的应用来说程序的运行时性能较好，但是相应地也损失了一些灵活性。</li>
</ul>
<h3 id="定义和初始化-1"><a href="#定义和初始化-1" class="headerlink" title="定义和初始化"></a>定义和初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> cnt = <span class="number">42</span>;			<span class="comment">//不是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">unsigned</span> sz = <span class="number">42</span>;	<span class="comment">//常量表达式，关于constexpr，参见2.4.4节（第59页)</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>] ;				<span class="comment">//含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> *parr[sz];				<span class="comment">//含有42个整型指针的数组</span></span><br><span class="line">string bad[cnt ] ;			<span class="comment">//错误:cnt不是常量表达式</span></span><br><span class="line">string strs[<span class="built_in">get_size</span>()];	<span class="comment">// 当get_size是constexpr时正确;否则错误</span></span><br></pre></td></tr></table></figure>

<p><label style = "color::red">和内置类型的变量一样,如果在函数内部定义了某种内置类型的数组，那么默认初始化会令数组含有未定义的值。</label></p>
<p>定义数组的时候必须指定数组的类型，不允许用auto关键字由初始值的列表推断类型。另外和 vector一样，数组的元素应为对象，因此不存在引用的数组。</p>
<p><strong>显示初始化数组元素</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> sz = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">int</span> ia1[sz] = &#123;<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>];				<span class="comment">//含有3个元素的数组,元素值分别是0，1，2</span></span><br><span class="line"><span class="keyword">int</span> a2[]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;					<span class="comment">//若不指定维度，则根据初始值计算，这里是维度是3的数组</span></span><br><span class="line"><span class="keyword">int</span> a3[<span class="number">5</span>] = &#123;<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>&#125;;				<span class="comment">//等价于a3[] =&#123;0,1，2，0,0&#125;</span></span><br><span class="line">string a4 [<span class="number">3</span>] = &#123; <span class="string">&quot;hi&quot;</span>,<span class="string">&quot;bye&quot;</span> &#125; ;	<span class="comment">//等价于a4 [] = &#123; &quot;hi&quot;，&quot;bye&quot;，&quot;&quot; )</span></span><br><span class="line"><span class="keyword">int</span> a5[<span class="number">2</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;					<span class="comment">//错误:初始值过多</span></span><br></pre></td></tr></table></figure>

<p><strong>字符数组的特殊性</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> al[]= &#123;<span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>&#125;;		<span class="comment">//列表初始化，没有空字符</span></span><br><span class="line"><span class="keyword">char</span> a2[]= &#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;+‘， ’+‘， ’\0‘&#125;;	//列表初始化，含有显式的空字符</span></span><br><span class="line"><span class="string">char a3[]= &quot;C++&quot;;					//自动添加表示字符串结束的空字符</span></span><br><span class="line"><span class="string">const char a4 [6]=&quot;Daniel&quot;;			//错误:没有空间可存放空字符!</span></span><br></pre></td></tr></table></figure>

<p><label style = "color::red">字符串结尾还有一个空字符，也会占用空间，和被拷贝。</label></p>
<p><strong>拷贝与赋值</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0</span>,<span class="number">1</span>，<span class="number">2</span>&#125;;			   <span class="comment">//含有3个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> a2[]= a;					<span class="comment">//错误:不允许使用一个数组初始化另一个数组</span></span><br><span class="line">a2 = a;							<span class="comment">//错误:不能把一个数组直接赋值给另一个数组</span></span><br></pre></td></tr></table></figure>

<p><em>一些编译器支持数组的赋值,这就是所谓的编译器扩展（compiler extension)。但一般来说,最好避免使用非标准特性，因为含有非标准特性的程序很可能在其他编译器上无法正常工作。</em></p>
<p><strong>复杂数组的声明</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptrs[<span class="number">10</span>] ;			<span class="comment">//ptrs是含有10个整型指针的数组</span></span><br><span class="line"><span class="keyword">int</span> &amp;refs[<span class="number">10</span>]=<span class="comment">/* ?*/</span>;		<span class="comment">//错误:不存在引用的数组</span></span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*Parray)[<span class="number">10</span>]= &amp;arr;	<span class="comment">// Parray指向一个含有10个整数的数组</span></span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (&amp;arrRef)[<span class="number">10</span>] = arr;	<span class="comment">//arrRef引用一个含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> * (&amp;arry)[<span class="number">10</span>] = ptrs;  <span class="comment">//arry是数组的引用，该数组含有10个指针</span></span><br></pre></td></tr></table></figure>

<p>这里重点在于顺序，</p>
<ul>
<li>对于无括号情况，从右往左，例如ptrs，我们先看到的是[10]，表明这是一个数组。</li>
<li>对于右括号，从内向外，例如parray，先看到是一个指针，表明是一个指针，它指向了数组。</li>
<li>对于arry，先从内向外，再从右往左。</li>
</ul>
<h3 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h3><p>在使用数组下标的时候，通常将其定义为size_t类型。size_t是一种机器相关的无符号类型，它被设计得足够大以便能表示内存中任意对象的大小。在cstddef头文件中定义了size_t类型，这个文件是C标准库 stddef.h头文件的C++语言版本。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : scores)		<span class="comment">//对于scores中的每个计数值</span></span><br><span class="line">	cout&lt;&lt; i &lt;&lt;<span class="string">&quot; &quot;</span>;			<span class="comment">//输出当前的计数值</span></span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure>



<h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><p>在大多数表达式中,使用数组类型的对象其实是使用一个指向该数组首元素的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;	<span class="comment">// ia是一个含有10个整数的数组</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">ia2</span><span class="params">(ia)</span></span>;						<span class="comment">// ia2是一个整型指针，指向ia的第一个元素</span></span><br><span class="line">ia2 =<span class="number">42</span>;							<span class="comment">//错误:ia2是一个指针，不能用int值给指针赋值</span></span><br><span class="line"><span class="comment">//尽管ia是由10个整数构成的数组，但当使用ia作为初始值时，编译器实际执行的初始化过程类似于下面的形式:</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">ia2</span> <span class="params">( &amp;ia[<span class="number">0</span>])</span></span>;					<span class="comment">//显然ia2的类型是int*</span></span><br><span class="line"><span class="comment">//当使用decltype关键字时上述转换不会发生，decltype (ia)返回的类型是由10个整数构成的数组:</span></span><br><span class="line"><span class="keyword">decltype</span>(ia) ia3 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125; ;</span><br><span class="line">ia3 = p;							<span class="comment">//错误:不能用整型指针给数组赋值</span></span><br><span class="line">ia3 [<span class="number">4</span>] = i;					 	<span class="comment">//正确:把i的值赋给ia3的一个元素</span></span><br></pre></td></tr></table></figure>

<p><strong>指针也是迭代器</strong></p>
<p>指针可以做与迭代器同样的操作（我认为本质上没有区别），尾指针可以通过<code>int *e = &amp;arr[arr.len];</code>的方法获取。</p>
<p><strong>标准函数begin和end</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[ ] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); 	<span class="comment">//ia是一个含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> *beg = <span class="built_in">begin</span> (ia) ;				<span class="comment">//指向ia首元素的指针</span></span><br><span class="line"><span class="keyword">int</span> * last = <span class="built_in">end</span> (ia) ;				<span class="comment">//指向arr尾元素的下一位置的指针</span></span><br></pre></td></tr></table></figure>

<p><em>C++11新标准引入了两个名为begin和 end 的函数。这两个函数与容器中的两个同名成员，功能类似，不过数组毕竟不是类类型，因此这两个函数不是成员函数。正确的使用形式是将数组作为它们的参数:</em></p>
<p><label style = "color::red">一个指针如果指向了某种内置类型数组的尾元素的“下一位置”，则其具备与vector的end函数返回的与迭代器类似的功能。特别要注意,尾后指针不能执行解引用和递增操作。</label></p>
<p><strong>指针运算</strong></p>
<p>这里与容器中的迭代器除了两个指针相减是ptrdiff_t类型基本一致，该类型也是带符号类型。</p>
<p><em>指针运算同样适用于空指针和所指对象并非数组的指针。在后一种情况下，两个指针必须指向同一个对象或该对象的下一位置。如果p是空指针，允许给p加上或减去一个值为0的整型常量表达式。两个空指针也允许彼此相减，结果当然是0。</em></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">int</span> last1 = *(ia + <span class="number">4</span>);		<span class="comment">//为ia[4]的值</span></span><br><span class="line"><span class="keyword">int</span> last2 = *ia +<span class="number">4</span>			<span class="comment">//含义完全不同，</span></span><br></pre></td></tr></table></figure>

<p><strong>下标和指针</strong></p>
<p>只要指针指向的是数组中的元素(或者数组中尾元素的下一位置)，都可以执行下标运算:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = ia[<span class="number">2</span>];				<span class="comment">// ia转换成指向数组首元素的指针ll ia [2]得到(ia + 2)所指的元素</span></span><br><span class="line"><span class="keyword">int</span> *p = ia;				<span class="comment">// p指向ia的首元素</span></span><br><span class="line">i =*(p + <span class="number">2</span>);				<span class="comment">//价于i = ia[2]</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;ia[ <span class="number">2</span>] ;			<span class="comment">// p指向索引为2的元素</span></span><br><span class="line"><span class="keyword">int</span> j = p[<span class="number">1</span>];				<span class="comment">// p[1]等价于*(p + 1)，就是ia[3]表示的那个元素</span></span><br><span class="line"><span class="keyword">int</span> k= p[<span class="number">-2</span>] ;				<span class="comment">// p[-2]是ia [ 0]表示的那个元素</span></span><br></pre></td></tr></table></figure>

<p>数组下标类型是带符号类型，这与vector和string不一致。</p>
<p><strong>C风格字符串</strong></p>
<p>风险大，不推荐使用，故暂时跳过</p>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>严格来说，C++语言中没有多维数组，通常所说的多维数组其实是数组的数组。谨记这一点，对今后理解和使用多维数组大有益处。</p>
<p><strong>多维数组初始化</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[ <span class="number">3</span>][<span class="number">4</span>]= &#123;			 <span class="comment">//三个元素，每个元素都是大小为4的数组</span></span><br><span class="line">	&#123; <span class="number">0</span>,<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span> &#125; ,			<span class="comment">//第1行的初始值</span></span><br><span class="line">	&#123; <span class="number">4</span>,<span class="number">5</span>，<span class="number">6</span>，<span class="number">7</span>),				<span class="comment">//第2行的初始值</span></span><br><span class="line">	&#123; <span class="number">8</span>,<span class="number">9</span>，<span class="number">10</span>，<span class="number">11</span>&#125;			<span class="comment">//第3行的初始值</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//没有标识每行的花括号，与之前的初始化语句是等价的</span></span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;</span><br><span class="line"><span class="comment">//显式地初始化每行的首元素</span></span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;O &#125;, &#123; <span class="number">4</span> &#125;, &#123; <span class="number">8</span> &#125;&#125;;</span><br><span class="line"><span class="comment">//显式地初始化第1行，其他元素执行值初始化0</span></span><br><span class="line"><span class="keyword">int</span> ix[<span class="number">3</span>][<span class="number">4</span>]= &#123;<span class="number">0</span>,<span class="number">3</span>，<span class="number">6</span>，<span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>多维数组的下标引用</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用arr的首元素为ia最后一行的最后一个元素赋值</span></span><br><span class="line">ia [<span class="number">2</span>][<span class="number">3</span>] = arr[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (&amp;row)[<span class="number">4</span>] = ia[<span class="number">1</span>];			<span class="comment">//把row绑定到ia的第二个4元素数组上</span></span><br></pre></td></tr></table></figure>

<p><strong>for循环遍历</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">size_t</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;row : ia)				<span class="comment">//对于外层数组的每一个元素</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;col : row)&#123;			<span class="comment">//对于内层数组的每一个元素</span></span><br><span class="line">		col = cnt;					<span class="comment">//将下一个值赋给该元素</span></span><br><span class="line">		++cnt;						<span class="comment">//将cnt 加1</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><label style = "color::red">要使用范围for语句处理多维数组，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型。</label></p>
<p><strong>指针和多维数组</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>*ip[<span class="number">4</span>];			<span class="comment">//整型指针的数组</span></span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*ip)[<span class="number">4</span>];		<span class="comment">//指向含有4个整数的数组</span></span><br></pre></td></tr></table></figure>

<p>声明指针注意区分以上区别，C++ 11推荐使用auto或者decltype也可避免加指针类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ia [ <span class="number">3</span>][<span class="number">4</span>];			<span class="comment">//大小为3的数组，每个元素是含有4个整数的数组</span></span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span>(*p)[ <span class="number">4</span>]= ia;		<span class="comment">//p指向含有4个整数的数组</span></span><br><span class="line">p= &amp;ia [<span class="number">2</span>];				<span class="comment">//p指向ia的尾元素</span></span><br><span class="line"><span class="comment">//输出ia中每个元素的值，每个内层数组各占一行</span></span><br><span class="line"><span class="comment">// p指向含有4个整数的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p = ia; p != ia + <span class="number">3</span>; ++p)&#123;	</span><br><span class="line">	<span class="comment">// q指向4个整数数组的首元素，也就是说，q指向一个整数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> q = *p; q != *p + <span class="number">4</span>; ++q)</span><br><span class="line">		cout &lt;&lt; *q &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>auto p = begin(ia)</code>以可以更加简洁。</p>
<p><strong>类型别名简化多维数组</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> int_array = <span class="keyword">int</span> [<span class="number">4</span>];	<span class="comment">//新标准下类型别名的声明，参见2.5.1节（第60页)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> int_array[<span class="number">4</span>];	<span class="comment">//等价的typedef声明，参见2.5.1节（第60 页)</span></span><br><span class="line"><span class="comment">//输出ia中每个元素的值，每个内层数组各占一行</span></span><br><span class="line"><span class="keyword">for</span> (int_array *p = ia; p != ia + <span class="number">3</span>; ++p)&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> *q= *p; q != *p + <span class="number">4</span>; ++q)</span><br><span class="line">		cout&lt;&lt; *q&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序将类型“4个整数组成的数组”命名为 int_array，用类型名int_array定义外层循环的控制变量让程序显得简洁明了。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Primer 第二章</title>
    <url>/2021/12/08/C++Primer%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%B8%8A/</url>
    <content><![CDATA[<h1 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h1><p>​    内置类型包括算术类型和空类型</p>
<h2 id="算术类型"><a href="#算术类型" class="headerlink" title="算术类型"></a>算术类型</h2><p>1、算术类型分为两类：整型（包括字符和布尔类型）和浮点型。</p>
<p>2、布尔类型（bool）：取值是真或假。</p>
<span id="more"></span>

<p>3、字符类型（char）：一个char的空间应确保可以存放机器基本字符集中任意字符对应的数字值，即一个char的大小和一个机器字节一样（8位）。</p>
<p>4、短整型（short）：16位</p>
<p>5、整型（int）：16位</p>
<p>6、长整型（long）；32位</p>
<p>7、长整型（long long）：64位</p>
<p>8、单精度浮点类型（float）：32位，保留6位有效数字</p>
<p>9、双精度浮点类型（double）：64位，保留10位有效数字</p>
<p>10、扩展精度浮点类型（long double）：96或128位，保留10位有效数字</p>
<h3 id="带符号与无符号类型"><a href="#带符号与无符号类型" class="headerlink" title="带符号与无符号类型"></a>带符号与无符号类型</h3><p>​        除去<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B">布尔类型</a>和扩展的字符型之外，其他整型可以划分为<strong>带符号的（signed）</strong>  和 <strong>无符号类型（unsigned）</strong> 两种，带符号类型可以表示正数、负数或0，无符号类型仅能表示大于等于0的值。</p>
<p><label style="color:red">只有整型才有符号型和无符号型之分，浮点型无此区别</label></p>
<p>​        类型int 、short 、 long 和 long long 都是带符号的，通过在这些类型名前添加unsigned就可以得到无符号类型，</p>
<p>例如 unsigned long 。类型 unsigned int 可以缩写为 unsigned 。</p>
<p><strong>特殊的char</strong></p>
<p>​        与其他整型不同，字符型被分为了三种：char 、 signed char 和 unsigned char。特别注意的是：类型 cahr 和 类型 signed char 并不一样。尽管字符型有三种，但是字符型的表现形式却只有两种： 带符号和无符号的。类型char实际上会表现为上述两种形式的一种 ，具体是哪种由编译器决定。</p>
<p>​        无符号类型中所有比特都用来存储值，例如，8比特的unsigned char 可以表示0至255区间内的值。</p>
<p>​        但是约定了在表示范围内正值和负值的最应该平衡。因此，8比特的signed char 理论上应该可以表示-127至127区间内的值，大多数现代计算器实际的表示范围定位 -128 至 127。可以理解为：因为把0划分到了无符号类型，所以0+127 = 128.</p>
<p>看一段代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span> c2 = <span class="number">256</span>;</span><br></pre></td></tr></table></figure>

<p>（均假设cahr占8比特）这两个语句的运行结果是：</p>
<p>c的值为255，</p>
<p>c2的值是未定义的。</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li>当我们把一个非布尔类型的算术值赋给布尔类型时，初始值为o则结果为false,否则结果为true。</li>
<li>当我们把一个布尔值赋给非布尔类型时，初始值为false 则结果为o，初始值为true则结果为1。</li>
<li>当我们把一个浮点数赋给整数类型时，进行了近似处理。结果值将仅保留浮点数中小数点之前的部分。</li>
<li>当我们把一个整数值赋给浮点类型时，小数部分记为0。如果该整数所占的空间超过了浮点类型的容量，精度可能有损失。</li>
</ul>
<p><strong>结论：</strong></p>
<p>1.当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。例如，8比特大小的unsigned char 可以表示0至255区间内的值，如果我们赋了一个区间意外的值，则实际的结果是该值对256取模后所得的余数。因此，把-1赋给8比特大小的unsigned char 所得的结果是255.</p>
<p>2.当我们赋给符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。此时，程序可能继续工作、可能崩溃，也可能生成垃圾数据。</p>
<h3 id="字面值常量"><a href="#字面值常量" class="headerlink" title="字面值常量"></a>字面值常量</h3><p>​        <strong>字面值常量</strong>（literal constant），“字面值”是指只能用它的值称呼它，“常量”是指其值不能修改。每个字面值都有相应的类型，3.14是double型，2是int型。只有内置类型存在字面值。</p>
<p><strong>1.</strong> <strong>整形字面值规则</strong></p>
<p>整形字面值常量可以用十进制、八进制、十六进制表示。</p>
<p>20    // dec</p>
<p>024   // oct（以0开头）</p>
<p>0x14  // hex（以0x或0X开头）</p>
<p>整形字面值常量的类型默认为int或long，其值适合int就是int类型，比int大就是long类型。在数值后加L或l（小写字母l容易与数字1混淆，建议用L）可以指定为long，加U或u指定为unsigned类型，加UL或LU定义为unsigned long类型。没有short类型的字面值常量。</p>
<p><strong>2.</strong> <strong>浮点字面值规则</strong></p>
<p>可以用十进制或科学计数法（指数用E或e）表示，默认为double，在数值后加F或f表示单精度，加L或l表示扩展精度。</p>
<p>3.14159F      .001f    12.345L     0.</p>
<p>3.14159E0f     1E-3F   1.2345E1L   0e0</p>
<p><strong>3.</strong> <strong>布尔字面值和字符字面值</strong></p>
<p>布尔字面值：true、false。字符字面值由单引号定义：’2’（char类型）、L’a’（wchar_t类型）。</p>
<p><strong>4.</strong> <strong>非打印字符和转义序列</strong></p>
<p>非打印字符和特殊字符（如单引号、双引号、反斜杠）都要写为转义字符（以反斜杠开头）。</p>
<p><img src="https://s2.loli.net/2021/12/07/vCu3TR6SWiftqVL.png" alt="image.png"></p>
<p>无论是普通字符，还是非打印字符和特殊字符，都可以表示为“通用转义字符”。如八进制形式的“\7（响铃符）、\12（换行符）、\0（空字符）、\62（数字2）”（可以对照ASCII码表看一下）。“通用转义字符”也可以用十六进制表示（\xddd）。</p>
<p><strong>5.</strong> <strong>字符串字面值</strong></p>
<p>需要用双引号括起来，非打印字符写要转义，编译器会自动在末尾添加一个空字符。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">“hello c++”       <span class="comment">// simple string literal</span></span><br><span class="line">“”                <span class="comment">// empty string literal</span></span><br><span class="line">“\n hello \t c++” <span class="comment">// string literal using newlines and tabs</span></span><br><span class="line">L”hello c++”      <span class="comment">// a wide string literal</span></span><br></pre></td></tr></table></figure>

<p><strong>6.</strong> <strong>字符串字面值的连接</strong></p>
<p>两个相邻的，仅由空格、制表符、换行符分隔的字符串字面值，将连接在一起。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::cout &lt;&lt; “a multi-line “ “string literal “</span><br><span class="line">            “<span class="keyword">using</span> concatenation”</span><br><span class="line">          &lt;&lt; std::endl</span><br></pre></td></tr></table></figure>

<p>输出：<strong>a multi-line string literal using concatenation</strong></p>
<p><strong>7</strong> <strong>多行字面值</strong></p>
<p>可以使用反斜杠，将多行内容当作同一行处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// multiline string literal``std::cout &lt;&lt; “a multi-line \``string literal \``using` `a backslash”``   ``&lt;&lt; std::endl;</span></span><br></pre></td></tr></table></figure>

<p>反斜杠必须是行尾字符，后面不能有注释或空格。后继行行首的任何空格和制表符都是字符串字面值的一部分。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>​        变量类型决定所占空间的大小的布局方式以及所能参与的运算，变量与对象可互换。</p>
<h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>​        命名空间 : : 类型说明符 空格 一个或多个变量名（中间以逗号分隔，以分号结束），可同时附初始值。</p>
<p><label style="color:red">初始化不是赋值,初始化的含义是创建变量时赋予其一个初始值,而赋值的含义是把对象的当前值擦除,而以一个新值来替代。</label></p>
<p><strong>列表初始化</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> unit = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> unit = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> unit&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unit</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>以上效相同，但2、3无法转换类型、因为存在丢失信息风险。</p>
<p><strong>默认初始化</strong></p>
<p>​        定义于函数体内的内置类型的对象如果没有初始化，则其值未定义。类的对象如果没有显式地初始化,则其值由类确定。</p>
<h3 id="变量声明和定义的关系"><a href="#变量声明和定义的关系" class="headerlink" title="变量声明和定义的关系"></a>变量声明和定义的关系</h3><p>​        由于C++支持分离式编译，一个变量可被多个文件使用，则可使用变量名前加extern</p>
<p><code>extern int i</code></p>
<p>若给extern变量赋予初始值，则关键字失效。</p>
<p><label style="color:red">变量能且只能被定义一次，但可以被多次声明</label></p>
<p><strong>静态类型</strong></p>
<p>​    ·    <em>C+是一种静态类型（statically typed)语言,其含义是在编译阶段检查类型。其中,检查类型的过程称为类型检查(type checking)。<br>我们已经知道，对象的类型决定了对象所能参与的运算。在C++语言中，编译器负责检查数据类型是否支持要执行的运算,如果试图执行类型不支持的运算,编译器将报错并且不会生成可执行文件。</em></p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>​        用户自定义的标识符中不能连续出现两个下画线，也不能以下画线紧连大写字母开头。此外，定义在函数体外的标识符不能以下画线开头。</p>
<h3 id="名字的作用域"><a href="#名字的作用域" class="headerlink" title="名字的作用域"></a>名字的作用域</h3><p>**全局作用域( global scope)**。一旦声明之后，全局作用域内的名字在整个程序的范围内都可使用。</p>
<p>**块作用域(block scope)**。只在自己所声明区域可用。</p>
<p><label style="color:red">当局部变量与全局变量相同，局部变量会覆盖全局变量。不建议使用相同名称</label></p>
<h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p>​        一条声明语句由一个基本数据类型(base type）和紧随其后的一个声明符( declarator）（变量名）列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>​        引用并非对象，它只是已经存在对象的另一个名字，它出生就必须和初始值绑在一起，永不分离！</p>
<p><strong>引用的定义</strong></p>
<p><code>int i = 1024; int &amp;i1 = i;</code></p>
<p><label style="color:red">引用的初始值必须是像<strong>匹配</strong>的<strong>对象</strong></label></p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>​        与引用类似，指针也实现了对其他对象的<strong>间接访问</strong>。然而指针与引用的不同点如下</p>
<ul>
<li>指针本身就是一个对象，允许对指针赋值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象。</li>
<li>指针无须在定义时赋初值。和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值。</li>
</ul>
<p><strong>指针的定义</strong></p>
<p><code>int i = 1024; int *p = i;</code></p>
<p><label style="color:red">因为引用不是对象，所以不可以定义指向引用</label></p>
<p><strong>指针值</strong></p>
<p>指针的值（即地址）应属下列4种状态之一:</p>
<ul>
<li>指向一个对象。</li>
<li>指向紧邻对象所占空间的下一个位置。</li>
<li>空指针，意味着指针没有指向任何对象。</li>
<li>无效指针，也就是上述情况之外的其他值。</li>
</ul>
<p>使用解引用符*可访问所指对象，仅适用于状态1。</p>
<p><label style="color:red">无效指针不允许拷贝或访问，2、3指针虽然有效，但仍不允许访问</label></p>
<p><strong>空指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1 = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> *p2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p3 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p4 = z;    </span><br></pre></td></tr></table></figure>

<p>p1，p2，p3都定义了一个空指针，但p4并不是空指针。</p>
<p><label style="color:red">建议初始化所有的指针</label></p>
<p><strong>赋值和指针</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> *p1 = <span class="number">0</span>;</span><br><span class="line">*p = <span class="number">100</span>;</span><br><span class="line">p = p1;</span><br></pre></td></tr></table></figure>

<p>赋值改变的永远是等号左侧的对象。则第4行为改指向对象，第5行改指针。</p>
<p><em><em>void</em>  指针</em>*</p>
<p>​        它可以指向任意类型，但也无法进行大部分操作，如输入、输出、赋给另一个void* 指针且不能直接操作所指对象。以它的视角，它只知道自己指向了一块内存空间。</p>
<p><strong>指向指针的指针</strong></p>
<p>​        <code>int *p1 = nullptr; int **p2 = p1;</code></p>
<p><strong>指向指针的引用</strong></p>
<p><code>        int *p = nullptr; int *&amp;r = p;</code></p>
<p>要理解r的类型到底是什么，最简单的办法是从右向左阅读r的定义。离变量名最近的符号（此例中是&amp;r的符号&amp;）对变量的类型有最直接的影响，因此r是一个引用。声明符的其余部分用以确定r引用的类型是什么，此例中的符号*说明r引用的是一个指针，则r为p的别名。</p>
<p>思考：既然有指向指针的指针，那么有引用的引用吗？</p>
<p>答案：[C++ 是否能够定义引用的引用？]zhihu.com/question/28023545</p>
<h2 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h2><p><code>const int i = 520;</code></p>
<p>这样定义一个变量后，任何试图改变i的值的操作都会报错，且const必须附予初始值。</p>
<p><code>int j  = i;</code></p>
<p>i的常量特征仅仅只在执行改变i的才会发挥作用。仍可进行拷贝，运算等，一旦拷贝完成，新对象与原来的对象没什么关系了。</p>
<p><label style="color:red">在多个文件之间共享const对象，必须在变量定义前添加extern，因为我们只需要在一个文件中定义，而在其他文件中声明并使用</label></p>
<h3 id="const的引用"><a href="#const的引用" class="headerlink" title="const的引用"></a>const的引用</h3><p>把引用绑定到const对象上，称为对<strong>常量的引用</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = ci; <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">int</span> &amp;r2 = ci; <span class="comment">//错误</span></span><br></pre></td></tr></table></figure>

<p><strong>初始化和对const的引用</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ci = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> &amp;r1 = ci;</span><br><span class="line"><span class="keyword">const</span> &amp;r2 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> &amp;r3 = r1*<span class="number">2</span>; <span class="comment">//虽然不可以定义引用的引用但是，此句只是引用了48这个常量而已</span></span><br><span class="line"><span class="keyword">int</span> &amp;r4 = r1 * <span class="number">2</span>; <span class="comment">//此句错误，r4是一个普通的非常量引用</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li><p><label style="color:red">const可以引用const或普通变量，但不加const去引用const是不允许的</label></p>
</li>
<li><p>对于const引用一个非const对象，书中解释是可以绑定，但不允许通过此引用去修改它的值。这里我的理解是，既然不能通过自身修改，也能通过其他途径修改，那么他们就没有任何联系了，所以我理解为这里const仅仅只是引用了该对象的值而已。所以解释r4的错误应该是：r4引用了一个常量。</p>
</li>
</ul>
<h3 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h3><p>与引用一样，也可以令指针指向常量或非常量。类似于常量引用，**指向常量的指针(pointer to const)**不能用于改变其所指对象的值。要想存放常量对象的地址，只能使用指向常量的指针:</p>
<p><label style="color:red">所谓指向常量的指针或引用，不过是指针或引用的“自以为是”罢了，他们觉得自己指向了常量，所以自觉地不去改变所指向对象的值</label></p>
<p>指针是对象而引用不是，因此就像其他对象类型一样，允许把指针本身定为常量。**常量指针(const pointer)*<em>必须初始化，而且一旦初始化完成，则它的值(也就是存放在指针中的那个地址）就不能再改变了。把</em>放在const关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味，即不变的是指针本身的值而非指向的那个值:</p>
<p><label style="color:red">总结： 指向常量的指针与常量指针一个是</label></p>
<h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><p>对于一般变量而言没有顶层const和底层const区别，但一般算作顶层const。对于符合变量却有不同。</p>
<p>区别：</p>
<ul>
<li><strong>指向常量的指针</strong>：代表 <strong>不能改变其指向内容</strong>的指针。声明时const可以放在类型名前后都可，拿int类型来说，声明时：const int和int const 是等价的。声明指向常量的指针也就是 <strong>底层const</strong></li>
<li><strong>指针常量</strong>：代表指针本身是常量，声明时必须初始化，之后<strong>它存储的地址值就不能再改变</strong>。声明时const必须放在指针符号<em>后面，即：</em>const 。声明常量指针就是<strong>顶层const</strong></li>
<li>顶层const和底层const很简单， 一个指针本身添加const限定符就是顶层const，而指针所指的对象添加const限定符就是底层const。</li>
</ul>
<p>作用：</p>
<ul>
<li><p>执行对象拷贝时有限制，常量的底层const不能赋值给非常量的底层const。也就是说，你只要能正确区分顶层const和底层const，你就能避免这样的赋值错误。</p>
</li>
<li><p>使用命名的强制类型转换函数const_cast时，需要能够分辨底层const和顶层const，因为const_cast只能改变运算对象的底层const。</p>
</li>
</ul>
<p>[练习一下，const int <em>const</em>const* pppi 是顶层const还是底层const？</p>
<p>答案当然是底层const，因为int前面const限定符，而最后一个*后面没有const限定符。看最后一个例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;  </span><br><span class="line"><span class="comment">//int * pi = &amp;a;  //错误，&amp;a是底层const，不能赋值给非底层const </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *pi = &amp;a; <span class="comment">//正确，&amp;a是底层const，可以赋值给底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> *<span class="keyword">const</span> ppi = &amp;pi  <span class="comment">//即是底层const，也是顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> *<span class="keyword">const</span> *pppi = &amp;ppi; <span class="comment">//底层const</span></span><br></pre></td></tr></table></figure>

<p>[参考原文]<a href="https://blog.csdn.net/qq_19528953/article/details/50922303">(18条消息) C++的顶层const和底层const的理解_冬之晓-CSDN博客_顶层const和底层const</a></p>
<h3 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a>constexpr和常量表达式</h3><p><strong>常量表达式(const expression）</strong>是指值不会改变并且在编译过程就能得到计算结果的表达式。显然，字面值属于常量表达式，用常量表达式初始化的 const对象也是常量表达式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ci = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> r = ci;<span class="comment">//这里并不属于常量表达式</span></span><br></pre></td></tr></table></figure>

<p><strong>constrxpr变量</strong>（C++ 11）</p>
<p>将变量声明为constexpr类型以便由编译器来验证变量的值是否是一个常量表达式。声明为constexpr的变量一定是一个常量，而且必须用常量表达式初始化:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> mf = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> li = mf + <span class="number">1</span>;<span class="comment">//这些都是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> sz = <span class="built_in">size</span>();<span class="comment">//只有当size是一个constexpr函数才是正确的声明</span></span><br></pre></td></tr></table></figure>

<p><label style="color:red">如果认定变量是一个常量表达式，就把它声明称constexpr类型。</label></p>
<p><strong>字面值类型</strong></p>
<ul>
<li><p>算数类型、引用、指针都属于字面值类型。</p>
</li>
<li><p>自定义类、IO库、string类型不属于字面值类型。</p>
</li>
</ul>
<p>尽管指针和引用都能定义成constexpr，但它们的初始值却受到严格限制。一个constexpr指针的初始值必须是nullptr或者o,或者是存储于某个固定地址中的对象。</p>
<ul>
<li><p>函数体内定义的变量一般来说并非存放在固定地址中,因此constexpr指针不能指向这样的变量。</p>
</li>
<li><p>相反的，定义于所有函数体之外的对象其地址固定不变，能用来初始化 constexpr指针。</p>
</li>
</ul>
<p>允许函数定义一类有效范围超出函数本身的变量，这类变量和定义在函数体之外的变量一样也有固定地址。因此，constexpr引用能绑定到这样的变量上，constexpr 指针也能指向这样的变量。</p>
<p><strong>指针和constptr</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = <span class="literal">nullptr</span>;<span class="comment">//p是指向常量整数的指针</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> *q = <span class="literal">nullptr</span>;<span class="comment">//q是指向整数的常量指针</span></span><br></pre></td></tr></table></figure>



<h2 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h2><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>它是一个名字，它是某种类型的同义词。使用类型别名有很多好处，它让复杂的类型名字变得简单明了、易于理解和使用，还有助于程序员清楚地知道使用该类型的真实目的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> wages;<span class="comment">//wage是double的同义词</span></span><br><span class="line"><span class="keyword">typedef</span> wages base, *p;<span class="comment">//base是double的同义词、p是double*的同义词</span></span><br><span class="line"><span class="keyword">using</span> SI = Sale_item;<span class="comment">//C++ 11中一种新的方法，效果一样</span></span><br></pre></td></tr></table></figure>

<p><strong>指针、常量和类型别名</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *pst;  <span class="comment">//这里把char*看作一个整体，则pst替代的是char*</span></span><br><span class="line"><span class="keyword">const</span> pst cstr = <span class="number">0</span>; <span class="comment">//cstr是指向char的常量指针</span></span><br><span class="line"><span class="keyword">const</span> pst *ps;<span class="comment">//ps是一个指针，指向char的常量指针。就等于const char **ps</span></span><br></pre></td></tr></table></figure>

<p>这里比较绕，首先pst是char*的别名，先不论pst看第二行代码，可知cstr是一个不能改变的值，再用pst替换这个值，就是不能改变指向char的指针。再不论pst看第三行，ps是一个指向常量的指针，用pst替换掉这个量，就是一个指向char的常量指针。</p>
<h3 id="auto类型说明符（C-11）"><a href="#auto类型说明符（C-11）" class="headerlink" title="auto类型说明符（C++ 11）"></a>auto类型说明符（C++ 11）</h3><p>C++11新标准引入了auto类型说明符，用它就能让编译器替我们去分析表达式所属的类型。和原来那些只对应一种特定类型的说明符（比如 double)不同，auto 让编译器通过初始值来推算变量的类型。显然，auto定义的变量必须有初始值:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> item = val1 + val2;</span><br><span class="line"><span class="keyword">auto</span> i = <span class="number">0</span>, *p = &amp;i;<span class="comment">//类型一致可以一起定义</span></span><br><span class="line"><span class="keyword">auto</span> sz = <span class="number">0</span>, pi = <span class="number">3.14</span>;<span class="comment">//错误若类型不一致不可一起定义</span></span><br></pre></td></tr></table></figure>

<p><strong>符合类型’常量和auto</strong></p>
<ul>
<li>当引用被当作初始值，参与的是引用的对象</li>
<li>auto一般会忽略掉顶层const，同时底层const会保留下来</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = i, &amp;cr = ci;</span><br><span class="line"><span class="keyword">auto</span> b = ci;  <span class="comment">//b为整数（顶层const忽略）</span></span><br><span class="line"><span class="keyword">auto</span> c = cr;  <span class="comment">//c为整数（一样忽略顶层const）</span></span><br><span class="line"><span class="keyword">auto</span> d = &amp;i;  <span class="comment">//d为指向整形的指针</span></span><br><span class="line"><span class="keyword">auto</span> e = &amp;ci; <span class="comment">//e是指向整数常量的指针（这里属于底层const，保留）</span></span><br><span class="line"><span class="comment">//如果需要auto是顶层const则可以</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> f = ci;<span class="comment">//推演为int，但f为const int</span></span><br><span class="line"><span class="keyword">auto</span> &amp;g = ci;<span class="comment">//推演为int，可定义引用</span></span><br><span class="line"><span class="keyword">auto</span> &amp;h = <span class="number">42</span>;<span class="comment">//非常量引用不可以绑定字面值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> &amp;j = <span class="number">42</span>;<span class="comment">//常量引用可以绑定字面值</span></span><br></pre></td></tr></table></figure>



<h3 id="decltype类型指示符（C-11）"><a href="#decltype类型指示符（C-11）" class="headerlink" title="decltype类型指示符（C++ 11）"></a>decltype类型指示符（C++ 11）</h3><p>它的作用是选择并返回操作数的数据类型，此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。</p>
<p><code>decltype(f()) sum = x;//sum的类型就是函数f返回的类型</code></p>
<p>编译器并不实际调用函数f，而是使用当调用发生时f的返回值类型作为sum的类型。换句话说，编译器为sum指定的类型是什么呢?就是假如f被调用的话将会返回的那个类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cosnt <span class="keyword">int</span> ci = <span class="number">0</span>, &amp;cj = ci;</span><br><span class="line"><span class="keyword">decltype</span>(ci) x = <span class="number">0</span>;<span class="comment">//x类型是const int</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) y = x;<span class="comment">//y的类型是const int&amp;，则y绑定了x</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) z;<span class="comment">//z类型是const int&amp;，必须初始化</span></span><br></pre></td></tr></table></figure>

<p><strong>decltype和引用</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r+<span class="number">0</span>) b;<span class="comment">//正确，加法得到的结果是int，因此b为int类型</span></span><br><span class="line"><span class="keyword">decltype</span>(*p);<span class="comment">//错误，解引用得到的是int&amp;，而非int，需要初始化</span></span><br><span class="line"><span class="keyword">decltype</span>(r) c;<span class="comment">//错误，这里没有用加法，得到的是引用类型，需初始化</span></span><br></pre></td></tr></table></figure>

<p>使用+0的操作可以避免变成引用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>((i)) d;<span class="comment">//d为引用</span></span><br><span class="line"><span class="keyword">decltype</span>(i) e;<span class="comment">//为int</span></span><br></pre></td></tr></table></figure>

<p><label style="color:red">切记:decltype ((variable))（注意是双层括号)的结果永远是引用，而decltype(variable)结果只有当 variable本身就是一个引用时才是引用。</label></p>
<h2 id="自定义的数据结构"><a href="#自定义的数据结构" class="headerlink" title="自定义的数据结构"></a>自定义的数据结构</h2><p>从最基本的层面理解，数据结构是把一组相关的数据元素组织起来然后使用它们的策略和方法。</p>
<h3 id="定义Sales-data类型"><a href="#定义Sales-data类型" class="headerlink" title="定义Sales_data类型"></a>定义Sales_data类型</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span><span class="comment">/*...*/</span>&#125; accum, trans, *salesptr;</span><br><span class="line"><span class="comment">//两种定义相同，但下面一种更好</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span><span class="comment">/*...*/</span>&#125;;</span><br><span class="line">Sales_data  accum, trans, *salesptr;</span><br></pre></td></tr></table></figure>

<p>类体定义<strong>成员</strong>，这个类只有<strong>数据成员</strong>。类体定义完成后相当与一个类型。</p>
<p>C++11新标准规定，可以为数据成员提供一个**类内初始值（in-class initializer)**。创建对象时,类内初始值将用于初始化数据成员。没有初始值的成员将被默认初始化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sales_data</span> &#123;</span></span><br><span class="line">	std::string bookNo;</span><br><span class="line">	<span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="使用Sale-data类"><a href="#使用Sale-data类" class="headerlink" title="使用Sale_data类"></a>使用Sale_data类</h3><p><strong>总体轮廓</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sales_data.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">	sales_data datal, data2;</span><br><span class="line">	<span class="comment">//读入datal和data2的代码</span></span><br><span class="line">	<span class="comment">//检查datal 和data2的工SBN是否相同的代码</span></span><br><span class="line">	<span class="comment">//如果相同，求datal和data2的总和</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>读入数据并处理</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> price = <span class="number">0</span>; <span class="comment">//书的单价，用于计算销售收入</span></span><br><span class="line"><span class="comment">//读入第1笔交易:ISBN、销售数量、单价</span></span><br><span class="line">std: :cin &gt;&gt; data1.bookNo &gt;&gt; datal.units_sold &gt;&gt; price;</span><br><span class="line"><span class="comment">//计算销售收入</span></span><br><span class="line">data1.revenue = data1.units_sold *price;</span><br></pre></td></tr></table></figure>

<p><strong>输出和</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (data1 . bookNo m= data2.bookNo)&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> totalCnt = data1.units_sold + data2.units_sold;</span><br><span class="line">	<span class="keyword">double</span> totalRevenue = data1.revenue + data2.revenue;</span><br><span class="line">	<span class="comment">//输出:ISBN、总销售量、总销售额、平均价格</span></span><br><span class="line">	std::cout &lt;&lt; data1.bookNo&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; totalCnt&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; totalRevenue &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (totalcnt != o)</span><br><span class="line">		std:: cout &lt;&lt; totalRevenue/totalCnt &lt;&lt; std: :endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		std: :cout &lt;&lt;<span class="string">&quot; (no sales) &quot;</span> &lt;&lt; std: :endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//标示成功</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">//两笔交易的ISBN不一样</span></span><br><span class="line">	std: :cerr &lt;&lt;<span class="string">&quot;Data must refer to the same ISBN&quot;</span> &lt;&lt;std: :endl;</span><br><span class="line">	<span class="keyword">return</span> -l;<span class="comment">//标示失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="编写自己的头文件"><a href="#编写自己的头文件" class="headerlink" title="编写自己的头文件"></a>编写自己的头文件</h3><p>头文件一旦改变，相关源文件必须重新编译以获取更新过的声明。</p>
<p><strong>预处理概述</strong></p>
<p>确保头文件多次包含仍能安全工作的常用技术是<strong>预处理器(preprocessor)<strong>，它由C++语言从C语言继承而来。预处理器是在编译之前执行的一段程序，可以部分地改变我们所写的程序。例如#include，当预处理器看到#include标记时就会用指定的头文件的内容代替#include。<br>C++程序还会用到的一项预处理功能是头文件</strong>保护符(header guard)<strong>，头文件保护符依赖于预处理变量。预处理变量有两种状态:已定义和未定义。</strong>#define</strong>指令把一个名字设定为预处理变量，另外两个指令则分别检查某个指定的预处理变量是否已经定义:<strong>#ifdef</strong>当且仅当变量已定义时为真，**#ifndef<strong>当且仅当变量未定义时为真。一旦检查结果为真，则执行后续操作直至遇到</strong>#endif**指令为止。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SALES_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SALES_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sales_data</span> &#123;</span></span><br><span class="line">	std : : string bookNo ;</span><br><span class="line">	<span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;<span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p><label style="color:red">这里只需要知道无论你的程序多简单，习惯性的加上就好。</label></p>
<h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><p>类型规定了其对象的存储要求和所能执行的操作。C++语言提供了一套基础内置类型，如int和char等，这些类型与实现它们的机器硬件密切相关。类型分为非常量和常量，一个常量对象必须初始化,而且一旦初始化其值就不能再改变。此外，还可以定义复合类型,如指针和引用等。复合类型的定义以其他类型为基础。<br>C++语言允许用户以类的形式自定义类型。C++库通过类提供了一套高级抽象类型,如输入输出和string等。</p>
]]></content>
      <categories>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>解决hexo博客中文无法正常显示问题</title>
    <url>/2021/11/08/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%96%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="情况一：没有在站点配置文件或主题配置文件中将语言设置为中文"><a href="#情况一：没有在站点配置文件或主题配置文件中将语言设置为中文" class="headerlink" title="情况一：没有在站点配置文件或主题配置文件中将语言设置为中文"></a>情况一：没有在站点配置文件或主题配置文件中将语言设置为中文</h1><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>1：打开bolg目录下的_config.yml文件。</p>
<span id="more"></span>

<p>2：找到language字段，添加zh-CN，如下</p>
<p><code>language: zh-CN </code></p>
<p>3： 主题配置文件以next为例，打开\blog\themes\next_config.yml文件。</p>
<p>4： 同样进行如上操作</p>
<h3 id="这里建议直接创建Mardown文件"><a href="#这里建议直接创建Mardown文件" class="headerlink" title="这里建议直接创建Mardown文件"></a>这里建议直接创建Mardown文件</h3><p>以下为方法链接，并附上软件下载链接</p>
<p>[右键新建markdown文件]<a href="https://blog.csdn.net/huangjun0210/article/details/105952385">https://blog.csdn.net/huangjun0210/article/details/105952385</a></p>
<p>链接：<a href="https://pan.baidu.com/s/118PmZiKsJV8fLqjFd9X1JA">https://pan.baidu.com/s/118PmZiKsJV8fLqjFd9X1JA</a><br>提取码：5p7c<br>–来自百度网盘超级会员V4的分享</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>类名冲突问题</title>
    <url>/2021/11/07/%E7%B1%BB%E5%90%8D%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><strong>一般来说，leetcode给出的测试用例数量足够多，覆盖范围足够广，基本可以证明代码正确</strong></p>
<p>​        </p>
<p>​        这里可能是因为命名空间的问题，因为力扣中所有类名均为Solution，倘若在同一源文件下可能会造成命名冲突，这里有两种解决方法。</p>
<span id="more"></span>

<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>​        更改类名，如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution_1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;```</span><br></pre></td></tr></table></figure>

<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>​        添加命名空间，如</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> letter &#123;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2021/11/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hello-大家好，这是我的第一篇博客"><a href="#hello-大家好，这是我的第一篇博客" class="headerlink" title="hello! 大家好，这是我的第一篇博客"></a>hello! 大家好，这是我的第一篇博客</h1><h2 id="1、-我是谁？"><a href="#1、-我是谁？" class="headerlink" title="1、 我是谁？"></a>1、 我是谁？</h2><p>​        我是谁不重要。重要的是我想成为知识的传播者。</p>
<span id="more"></span>

<h2 id="2、创建博客的初衷"><a href="#2、创建博客的初衷" class="headerlink" title="2、创建博客的初衷"></a>2、创建博客的初衷</h2><p>​        我在解决一个又一个的问题的时候，各种博客、平台帮了我很多，这其中有很多非常详细且友好的帖子，但也有充斥各种问题的帖子，如语意不清、啰嗦、付费、繁杂等等，虽然最后我还是解决了这些问题，我不希望获得知识的路上充满荆棘，所以我创建了自己的博客，希望分享我所获得的知识，同时把我解决问题的过程、思考、以及总结的经验保存下来。为了你，也为了以后的我不再重蹈覆辙。</p>
<h2 id="3、我的计划"><a href="#3、我的计划" class="headerlink" title="3、我的计划"></a>3、我的计划</h2><p>​        我计划首先分享我在阅读书籍中、以前unity项目中、刷题中、以及搭建博客中的遇到的问题，同时因为我目前从事的是忆阻器件的制备，我也会分享在半导体方向所收获的知识（这方面的知识网上尤其的少）。也希望自己能够再接再厉。学更多的知识、看更远的风景。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
